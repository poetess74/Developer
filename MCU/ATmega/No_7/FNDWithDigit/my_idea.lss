
my_idea.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000468  000004dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000468  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         0000042c  00000000  00000000  000004ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000073f  00000000  00000000  00000918  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e6       	ldi	r30, 0x68	; 104
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  b6:	0c 94 32 02 	jmp	0x464	; 0x464 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <main>:
// ***********************************************************

#include <avr/io.h>              // Most basic include files
#include <util/delay.h>

int main(void) {
  be:	df 93       	push	r29
  c0:	cf 93       	push	r28
  c2:	cd b7       	in	r28, 0x3d	; 61
  c4:	de b7       	in	r29, 0x3e	; 62
  c6:	a5 97       	sbiw	r28, 0x25	; 37
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	f8 94       	cli
  cc:	de bf       	out	0x3e, r29	; 62
  ce:	0f be       	out	0x3f, r0	; 63
  d0:	cd bf       	out	0x3d, r28	; 61
    DDRA = 0xFF;
  d2:	ea e3       	ldi	r30, 0x3A	; 58
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	8f ef       	ldi	r24, 0xFF	; 255
  d8:	80 83       	st	Z, r24
    DDRB = 0xFF;
  da:	e7 e3       	ldi	r30, 0x37	; 55
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	8f ef       	ldi	r24, 0xFF	; 255
  e0:	80 83       	st	Z, r24
    PORTA = 0xFF;
  e2:	eb e3       	ldi	r30, 0x3B	; 59
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	8f ef       	ldi	r24, 0xFF	; 255
  e8:	80 83       	st	Z, r24
    PORTB = 0xFF;
  ea:	e8 e3       	ldi	r30, 0x38	; 56
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	8f ef       	ldi	r24, 0xFF	; 255
  f0:	80 83       	st	Z, r24
    int index = 0;
  f2:	18 8a       	std	Y+16, r1	; 0x10
  f4:	1f 86       	std	Y+15, r1	; 0x0f
    char digit[16] = {
        0xC0, 0xF9, 0xA4, 0xB0, 
        0x99, 0x92, 0x82, 0xF8, 
        0x80, 0x90, 0x88, 0x83, 
        0xC6, 0xA1, 0x86, 0x8E
    };
  f6:	ce 01       	movw	r24, r28
  f8:	41 96       	adiw	r24, 0x11	; 17
  fa:	9a a3       	std	Y+34, r25	; 0x22
  fc:	89 a3       	std	Y+33, r24	; 0x21
  fe:	e0 e0       	ldi	r30, 0x00	; 0
 100:	f1 e0       	ldi	r31, 0x01	; 1
 102:	fc a3       	std	Y+36, r31	; 0x24
 104:	eb a3       	std	Y+35, r30	; 0x23
 106:	f0 e1       	ldi	r31, 0x10	; 16
 108:	fd a3       	std	Y+37, r31	; 0x25
 10a:	eb a1       	ldd	r30, Y+35	; 0x23
 10c:	fc a1       	ldd	r31, Y+36	; 0x24
 10e:	00 80       	ld	r0, Z
 110:	8b a1       	ldd	r24, Y+35	; 0x23
 112:	9c a1       	ldd	r25, Y+36	; 0x24
 114:	01 96       	adiw	r24, 0x01	; 1
 116:	9c a3       	std	Y+36, r25	; 0x24
 118:	8b a3       	std	Y+35, r24	; 0x23
 11a:	e9 a1       	ldd	r30, Y+33	; 0x21
 11c:	fa a1       	ldd	r31, Y+34	; 0x22
 11e:	00 82       	st	Z, r0
 120:	89 a1       	ldd	r24, Y+33	; 0x21
 122:	9a a1       	ldd	r25, Y+34	; 0x22
 124:	01 96       	adiw	r24, 0x01	; 1
 126:	9a a3       	std	Y+34, r25	; 0x22
 128:	89 a3       	std	Y+33, r24	; 0x21
 12a:	9d a1       	ldd	r25, Y+37	; 0x25
 12c:	91 50       	subi	r25, 0x01	; 1
 12e:	9d a3       	std	Y+37, r25	; 0x25
 130:	ed a1       	ldd	r30, Y+37	; 0x25
 132:	ee 23       	and	r30, r30
 134:	51 f7       	brne	.-44     	; 0x10a <main+0x4c>

    while(1) {             // Infinite loop; define here the
        PORTA = digit[index];
 136:	ab e3       	ldi	r26, 0x3B	; 59
 138:	b0 e0       	ldi	r27, 0x00	; 0
 13a:	2f 85       	ldd	r18, Y+15	; 0x0f
 13c:	38 89       	ldd	r19, Y+16	; 0x10
 13e:	ce 01       	movw	r24, r28
 140:	41 96       	adiw	r24, 0x11	; 17
 142:	fc 01       	movw	r30, r24
 144:	e2 0f       	add	r30, r18
 146:	f3 1f       	adc	r31, r19
 148:	80 81       	ld	r24, Z
 14a:	8c 93       	st	X, r24
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	a8 ec       	ldi	r26, 0xC8	; 200
 152:	b2 e4       	ldi	r27, 0x42	; 66
 154:	8b 87       	std	Y+11, r24	; 0x0b
 156:	9c 87       	std	Y+12, r25	; 0x0c
 158:	ad 87       	std	Y+13, r26	; 0x0d
 15a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 15c:	6b 85       	ldd	r22, Y+11	; 0x0b
 15e:	7c 85       	ldd	r23, Y+12	; 0x0c
 160:	8d 85       	ldd	r24, Y+13	; 0x0d
 162:	9e 85       	ldd	r25, Y+14	; 0x0e
 164:	20 e0       	ldi	r18, 0x00	; 0
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	4a e7       	ldi	r20, 0x7A	; 122
 16a:	53 e4       	ldi	r21, 0x43	; 67
 16c:	0e 94 a7 01 	call	0x34e	; 0x34e <__mulsf3>
 170:	dc 01       	movw	r26, r24
 172:	cb 01       	movw	r24, r22
 174:	8f 83       	std	Y+7, r24	; 0x07
 176:	98 87       	std	Y+8, r25	; 0x08
 178:	a9 87       	std	Y+9, r26	; 0x09
 17a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
 17c:	6f 81       	ldd	r22, Y+7	; 0x07
 17e:	78 85       	ldd	r23, Y+8	; 0x08
 180:	89 85       	ldd	r24, Y+9	; 0x09
 182:	9a 85       	ldd	r25, Y+10	; 0x0a
 184:	20 e0       	ldi	r18, 0x00	; 0
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	40 e8       	ldi	r20, 0x80	; 128
 18a:	5f e3       	ldi	r21, 0x3F	; 63
 18c:	0e 94 26 01 	call	0x24c	; 0x24c <__cmpsf2>
 190:	88 23       	and	r24, r24
 192:	2c f4       	brge	.+10     	; 0x19e <main+0xe0>
		__ticks = 1;
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	9e 83       	std	Y+6, r25	; 0x06
 19a:	8d 83       	std	Y+5, r24	; 0x05
 19c:	3f c0       	rjmp	.+126    	; 0x21c <main+0x15e>
	else if (__tmp > 65535)
 19e:	6f 81       	ldd	r22, Y+7	; 0x07
 1a0:	78 85       	ldd	r23, Y+8	; 0x08
 1a2:	89 85       	ldd	r24, Y+9	; 0x09
 1a4:	9a 85       	ldd	r25, Y+10	; 0x0a
 1a6:	20 e0       	ldi	r18, 0x00	; 0
 1a8:	3f ef       	ldi	r19, 0xFF	; 255
 1aa:	4f e7       	ldi	r20, 0x7F	; 127
 1ac:	57 e4       	ldi	r21, 0x47	; 71
 1ae:	0e 94 a3 01 	call	0x346	; 0x346 <__gesf2>
 1b2:	18 16       	cp	r1, r24
 1b4:	4c f5       	brge	.+82     	; 0x208 <main+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1b6:	6b 85       	ldd	r22, Y+11	; 0x0b
 1b8:	7c 85       	ldd	r23, Y+12	; 0x0c
 1ba:	8d 85       	ldd	r24, Y+13	; 0x0d
 1bc:	9e 85       	ldd	r25, Y+14	; 0x0e
 1be:	20 e0       	ldi	r18, 0x00	; 0
 1c0:	30 e0       	ldi	r19, 0x00	; 0
 1c2:	40 e2       	ldi	r20, 0x20	; 32
 1c4:	51 e4       	ldi	r21, 0x41	; 65
 1c6:	0e 94 a7 01 	call	0x34e	; 0x34e <__mulsf3>
 1ca:	dc 01       	movw	r26, r24
 1cc:	cb 01       	movw	r24, r22
 1ce:	bc 01       	movw	r22, r24
 1d0:	cd 01       	movw	r24, r26
 1d2:	0e 94 2a 01 	call	0x254	; 0x254 <__fixunssfsi>
 1d6:	dc 01       	movw	r26, r24
 1d8:	cb 01       	movw	r24, r22
 1da:	9e 83       	std	Y+6, r25	; 0x06
 1dc:	8d 83       	std	Y+5, r24	; 0x05
 1de:	0f c0       	rjmp	.+30     	; 0x1fe <main+0x140>
 1e0:	89 e1       	ldi	r24, 0x19	; 25
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	9c 83       	std	Y+4, r25	; 0x04
 1e6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1e8:	8b 81       	ldd	r24, Y+3	; 0x03
 1ea:	9c 81       	ldd	r25, Y+4	; 0x04
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <main+0x12e>
 1f0:	9c 83       	std	Y+4, r25	; 0x04
 1f2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1f4:	8d 81       	ldd	r24, Y+5	; 0x05
 1f6:	9e 81       	ldd	r25, Y+6	; 0x06
 1f8:	01 97       	sbiw	r24, 0x01	; 1
 1fa:	9e 83       	std	Y+6, r25	; 0x06
 1fc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1fe:	8d 81       	ldd	r24, Y+5	; 0x05
 200:	9e 81       	ldd	r25, Y+6	; 0x06
 202:	00 97       	sbiw	r24, 0x00	; 0
 204:	69 f7       	brne	.-38     	; 0x1e0 <main+0x122>
 206:	14 c0       	rjmp	.+40     	; 0x230 <main+0x172>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 208:	6f 81       	ldd	r22, Y+7	; 0x07
 20a:	78 85       	ldd	r23, Y+8	; 0x08
 20c:	89 85       	ldd	r24, Y+9	; 0x09
 20e:	9a 85       	ldd	r25, Y+10	; 0x0a
 210:	0e 94 2a 01 	call	0x254	; 0x254 <__fixunssfsi>
 214:	dc 01       	movw	r26, r24
 216:	cb 01       	movw	r24, r22
 218:	9e 83       	std	Y+6, r25	; 0x06
 21a:	8d 83       	std	Y+5, r24	; 0x05
 21c:	8d 81       	ldd	r24, Y+5	; 0x05
 21e:	9e 81       	ldd	r25, Y+6	; 0x06
 220:	9a 83       	std	Y+2, r25	; 0x02
 222:	89 83       	std	Y+1, r24	; 0x01
 224:	89 81       	ldd	r24, Y+1	; 0x01
 226:	9a 81       	ldd	r25, Y+2	; 0x02
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <main+0x16a>
 22c:	9a 83       	std	Y+2, r25	; 0x02
 22e:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(100);
        index > 15 ? index = 0 : index++;
 230:	8f 85       	ldd	r24, Y+15	; 0x0f
 232:	98 89       	ldd	r25, Y+16	; 0x10
 234:	80 31       	cpi	r24, 0x10	; 16
 236:	91 05       	cpc	r25, r1
 238:	1c f0       	brlt	.+6      	; 0x240 <main+0x182>
 23a:	18 8a       	std	Y+16, r1	; 0x10
 23c:	1f 86       	std	Y+15, r1	; 0x0f
 23e:	7b cf       	rjmp	.-266    	; 0x136 <main+0x78>
 240:	8f 85       	ldd	r24, Y+15	; 0x0f
 242:	98 89       	ldd	r25, Y+16	; 0x10
 244:	01 96       	adiw	r24, 0x01	; 1
 246:	98 8b       	std	Y+16, r25	; 0x10
 248:	8f 87       	std	Y+15, r24	; 0x0f
 24a:	75 cf       	rjmp	.-278    	; 0x136 <main+0x78>

0000024c <__cmpsf2>:
 24c:	2f d0       	rcall	.+94     	; 0x2ac <__fp_cmp>
 24e:	08 f4       	brcc	.+2      	; 0x252 <__cmpsf2+0x6>
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	08 95       	ret

00000254 <__fixunssfsi>:
 254:	57 d0       	rcall	.+174    	; 0x304 <__fp_splitA>
 256:	88 f0       	brcs	.+34     	; 0x27a <__fixunssfsi+0x26>
 258:	9f 57       	subi	r25, 0x7F	; 127
 25a:	90 f0       	brcs	.+36     	; 0x280 <__fixunssfsi+0x2c>
 25c:	b9 2f       	mov	r27, r25
 25e:	99 27       	eor	r25, r25
 260:	b7 51       	subi	r27, 0x17	; 23
 262:	a0 f0       	brcs	.+40     	; 0x28c <__fixunssfsi+0x38>
 264:	d1 f0       	breq	.+52     	; 0x29a <__fixunssfsi+0x46>
 266:	66 0f       	add	r22, r22
 268:	77 1f       	adc	r23, r23
 26a:	88 1f       	adc	r24, r24
 26c:	99 1f       	adc	r25, r25
 26e:	1a f0       	brmi	.+6      	; 0x276 <__fixunssfsi+0x22>
 270:	ba 95       	dec	r27
 272:	c9 f7       	brne	.-14     	; 0x266 <__fixunssfsi+0x12>
 274:	12 c0       	rjmp	.+36     	; 0x29a <__fixunssfsi+0x46>
 276:	b1 30       	cpi	r27, 0x01	; 1
 278:	81 f0       	breq	.+32     	; 0x29a <__fixunssfsi+0x46>
 27a:	5e d0       	rcall	.+188    	; 0x338 <__fp_zero>
 27c:	b1 e0       	ldi	r27, 0x01	; 1
 27e:	08 95       	ret
 280:	5b c0       	rjmp	.+182    	; 0x338 <__fp_zero>
 282:	67 2f       	mov	r22, r23
 284:	78 2f       	mov	r23, r24
 286:	88 27       	eor	r24, r24
 288:	b8 5f       	subi	r27, 0xF8	; 248
 28a:	39 f0       	breq	.+14     	; 0x29a <__fixunssfsi+0x46>
 28c:	b9 3f       	cpi	r27, 0xF9	; 249
 28e:	cc f3       	brlt	.-14     	; 0x282 <__fixunssfsi+0x2e>
 290:	86 95       	lsr	r24
 292:	77 95       	ror	r23
 294:	67 95       	ror	r22
 296:	b3 95       	inc	r27
 298:	d9 f7       	brne	.-10     	; 0x290 <__fixunssfsi+0x3c>
 29a:	3e f4       	brtc	.+14     	; 0x2aa <__fixunssfsi+0x56>
 29c:	90 95       	com	r25
 29e:	80 95       	com	r24
 2a0:	70 95       	com	r23
 2a2:	61 95       	neg	r22
 2a4:	7f 4f       	sbci	r23, 0xFF	; 255
 2a6:	8f 4f       	sbci	r24, 0xFF	; 255
 2a8:	9f 4f       	sbci	r25, 0xFF	; 255
 2aa:	08 95       	ret

000002ac <__fp_cmp>:
 2ac:	99 0f       	add	r25, r25
 2ae:	00 08       	sbc	r0, r0
 2b0:	55 0f       	add	r21, r21
 2b2:	aa 0b       	sbc	r26, r26
 2b4:	e0 e8       	ldi	r30, 0x80	; 128
 2b6:	fe ef       	ldi	r31, 0xFE	; 254
 2b8:	16 16       	cp	r1, r22
 2ba:	17 06       	cpc	r1, r23
 2bc:	e8 07       	cpc	r30, r24
 2be:	f9 07       	cpc	r31, r25
 2c0:	c0 f0       	brcs	.+48     	; 0x2f2 <__fp_cmp+0x46>
 2c2:	12 16       	cp	r1, r18
 2c4:	13 06       	cpc	r1, r19
 2c6:	e4 07       	cpc	r30, r20
 2c8:	f5 07       	cpc	r31, r21
 2ca:	98 f0       	brcs	.+38     	; 0x2f2 <__fp_cmp+0x46>
 2cc:	62 1b       	sub	r22, r18
 2ce:	73 0b       	sbc	r23, r19
 2d0:	84 0b       	sbc	r24, r20
 2d2:	95 0b       	sbc	r25, r21
 2d4:	39 f4       	brne	.+14     	; 0x2e4 <__fp_cmp+0x38>
 2d6:	0a 26       	eor	r0, r26
 2d8:	61 f0       	breq	.+24     	; 0x2f2 <__fp_cmp+0x46>
 2da:	23 2b       	or	r18, r19
 2dc:	24 2b       	or	r18, r20
 2de:	25 2b       	or	r18, r21
 2e0:	21 f4       	brne	.+8      	; 0x2ea <__fp_cmp+0x3e>
 2e2:	08 95       	ret
 2e4:	0a 26       	eor	r0, r26
 2e6:	09 f4       	brne	.+2      	; 0x2ea <__fp_cmp+0x3e>
 2e8:	a1 40       	sbci	r26, 0x01	; 1
 2ea:	a6 95       	lsr	r26
 2ec:	8f ef       	ldi	r24, 0xFF	; 255
 2ee:	81 1d       	adc	r24, r1
 2f0:	81 1d       	adc	r24, r1
 2f2:	08 95       	ret

000002f4 <__fp_split3>:
 2f4:	57 fd       	sbrc	r21, 7
 2f6:	90 58       	subi	r25, 0x80	; 128
 2f8:	44 0f       	add	r20, r20
 2fa:	55 1f       	adc	r21, r21
 2fc:	59 f0       	breq	.+22     	; 0x314 <__fp_splitA+0x10>
 2fe:	5f 3f       	cpi	r21, 0xFF	; 255
 300:	71 f0       	breq	.+28     	; 0x31e <__fp_splitA+0x1a>
 302:	47 95       	ror	r20

00000304 <__fp_splitA>:
 304:	88 0f       	add	r24, r24
 306:	97 fb       	bst	r25, 7
 308:	99 1f       	adc	r25, r25
 30a:	61 f0       	breq	.+24     	; 0x324 <__fp_splitA+0x20>
 30c:	9f 3f       	cpi	r25, 0xFF	; 255
 30e:	79 f0       	breq	.+30     	; 0x32e <__fp_splitA+0x2a>
 310:	87 95       	ror	r24
 312:	08 95       	ret
 314:	12 16       	cp	r1, r18
 316:	13 06       	cpc	r1, r19
 318:	14 06       	cpc	r1, r20
 31a:	55 1f       	adc	r21, r21
 31c:	f2 cf       	rjmp	.-28     	; 0x302 <__fp_split3+0xe>
 31e:	46 95       	lsr	r20
 320:	f1 df       	rcall	.-30     	; 0x304 <__fp_splitA>
 322:	08 c0       	rjmp	.+16     	; 0x334 <__fp_splitA+0x30>
 324:	16 16       	cp	r1, r22
 326:	17 06       	cpc	r1, r23
 328:	18 06       	cpc	r1, r24
 32a:	99 1f       	adc	r25, r25
 32c:	f1 cf       	rjmp	.-30     	; 0x310 <__fp_splitA+0xc>
 32e:	86 95       	lsr	r24
 330:	71 05       	cpc	r23, r1
 332:	61 05       	cpc	r22, r1
 334:	08 94       	sec
 336:	08 95       	ret

00000338 <__fp_zero>:
 338:	e8 94       	clt

0000033a <__fp_szero>:
 33a:	bb 27       	eor	r27, r27
 33c:	66 27       	eor	r22, r22
 33e:	77 27       	eor	r23, r23
 340:	cb 01       	movw	r24, r22
 342:	97 f9       	bld	r25, 7
 344:	08 95       	ret

00000346 <__gesf2>:
 346:	b2 df       	rcall	.-156    	; 0x2ac <__fp_cmp>
 348:	08 f4       	brcc	.+2      	; 0x34c <__gesf2+0x6>
 34a:	8f ef       	ldi	r24, 0xFF	; 255
 34c:	08 95       	ret

0000034e <__mulsf3>:
 34e:	0b d0       	rcall	.+22     	; 0x366 <__mulsf3x>
 350:	78 c0       	rjmp	.+240    	; 0x442 <__fp_round>
 352:	69 d0       	rcall	.+210    	; 0x426 <__fp_pscA>
 354:	28 f0       	brcs	.+10     	; 0x360 <__mulsf3+0x12>
 356:	6e d0       	rcall	.+220    	; 0x434 <__fp_pscB>
 358:	18 f0       	brcs	.+6      	; 0x360 <__mulsf3+0x12>
 35a:	95 23       	and	r25, r21
 35c:	09 f0       	breq	.+2      	; 0x360 <__mulsf3+0x12>
 35e:	5a c0       	rjmp	.+180    	; 0x414 <__fp_inf>
 360:	5f c0       	rjmp	.+190    	; 0x420 <__fp_nan>
 362:	11 24       	eor	r1, r1
 364:	ea cf       	rjmp	.-44     	; 0x33a <__fp_szero>

00000366 <__mulsf3x>:
 366:	c6 df       	rcall	.-116    	; 0x2f4 <__fp_split3>
 368:	a0 f3       	brcs	.-24     	; 0x352 <__mulsf3+0x4>

0000036a <__mulsf3_pse>:
 36a:	95 9f       	mul	r25, r21
 36c:	d1 f3       	breq	.-12     	; 0x362 <__mulsf3+0x14>
 36e:	95 0f       	add	r25, r21
 370:	50 e0       	ldi	r21, 0x00	; 0
 372:	55 1f       	adc	r21, r21
 374:	62 9f       	mul	r22, r18
 376:	f0 01       	movw	r30, r0
 378:	72 9f       	mul	r23, r18
 37a:	bb 27       	eor	r27, r27
 37c:	f0 0d       	add	r31, r0
 37e:	b1 1d       	adc	r27, r1
 380:	63 9f       	mul	r22, r19
 382:	aa 27       	eor	r26, r26
 384:	f0 0d       	add	r31, r0
 386:	b1 1d       	adc	r27, r1
 388:	aa 1f       	adc	r26, r26
 38a:	64 9f       	mul	r22, r20
 38c:	66 27       	eor	r22, r22
 38e:	b0 0d       	add	r27, r0
 390:	a1 1d       	adc	r26, r1
 392:	66 1f       	adc	r22, r22
 394:	82 9f       	mul	r24, r18
 396:	22 27       	eor	r18, r18
 398:	b0 0d       	add	r27, r0
 39a:	a1 1d       	adc	r26, r1
 39c:	62 1f       	adc	r22, r18
 39e:	73 9f       	mul	r23, r19
 3a0:	b0 0d       	add	r27, r0
 3a2:	a1 1d       	adc	r26, r1
 3a4:	62 1f       	adc	r22, r18
 3a6:	83 9f       	mul	r24, r19
 3a8:	a0 0d       	add	r26, r0
 3aa:	61 1d       	adc	r22, r1
 3ac:	22 1f       	adc	r18, r18
 3ae:	74 9f       	mul	r23, r20
 3b0:	33 27       	eor	r19, r19
 3b2:	a0 0d       	add	r26, r0
 3b4:	61 1d       	adc	r22, r1
 3b6:	23 1f       	adc	r18, r19
 3b8:	84 9f       	mul	r24, r20
 3ba:	60 0d       	add	r22, r0
 3bc:	21 1d       	adc	r18, r1
 3be:	82 2f       	mov	r24, r18
 3c0:	76 2f       	mov	r23, r22
 3c2:	6a 2f       	mov	r22, r26
 3c4:	11 24       	eor	r1, r1
 3c6:	9f 57       	subi	r25, 0x7F	; 127
 3c8:	50 40       	sbci	r21, 0x00	; 0
 3ca:	8a f0       	brmi	.+34     	; 0x3ee <__mulsf3_pse+0x84>
 3cc:	e1 f0       	breq	.+56     	; 0x406 <__mulsf3_pse+0x9c>
 3ce:	88 23       	and	r24, r24
 3d0:	4a f0       	brmi	.+18     	; 0x3e4 <__mulsf3_pse+0x7a>
 3d2:	ee 0f       	add	r30, r30
 3d4:	ff 1f       	adc	r31, r31
 3d6:	bb 1f       	adc	r27, r27
 3d8:	66 1f       	adc	r22, r22
 3da:	77 1f       	adc	r23, r23
 3dc:	88 1f       	adc	r24, r24
 3de:	91 50       	subi	r25, 0x01	; 1
 3e0:	50 40       	sbci	r21, 0x00	; 0
 3e2:	a9 f7       	brne	.-22     	; 0x3ce <__mulsf3_pse+0x64>
 3e4:	9e 3f       	cpi	r25, 0xFE	; 254
 3e6:	51 05       	cpc	r21, r1
 3e8:	70 f0       	brcs	.+28     	; 0x406 <__mulsf3_pse+0x9c>
 3ea:	14 c0       	rjmp	.+40     	; 0x414 <__fp_inf>
 3ec:	a6 cf       	rjmp	.-180    	; 0x33a <__fp_szero>
 3ee:	5f 3f       	cpi	r21, 0xFF	; 255
 3f0:	ec f3       	brlt	.-6      	; 0x3ec <__mulsf3_pse+0x82>
 3f2:	98 3e       	cpi	r25, 0xE8	; 232
 3f4:	dc f3       	brlt	.-10     	; 0x3ec <__mulsf3_pse+0x82>
 3f6:	86 95       	lsr	r24
 3f8:	77 95       	ror	r23
 3fa:	67 95       	ror	r22
 3fc:	b7 95       	ror	r27
 3fe:	f7 95       	ror	r31
 400:	e7 95       	ror	r30
 402:	9f 5f       	subi	r25, 0xFF	; 255
 404:	c1 f7       	brne	.-16     	; 0x3f6 <__mulsf3_pse+0x8c>
 406:	fe 2b       	or	r31, r30
 408:	88 0f       	add	r24, r24
 40a:	91 1d       	adc	r25, r1
 40c:	96 95       	lsr	r25
 40e:	87 95       	ror	r24
 410:	97 f9       	bld	r25, 7
 412:	08 95       	ret

00000414 <__fp_inf>:
 414:	97 f9       	bld	r25, 7
 416:	9f 67       	ori	r25, 0x7F	; 127
 418:	80 e8       	ldi	r24, 0x80	; 128
 41a:	70 e0       	ldi	r23, 0x00	; 0
 41c:	60 e0       	ldi	r22, 0x00	; 0
 41e:	08 95       	ret

00000420 <__fp_nan>:
 420:	9f ef       	ldi	r25, 0xFF	; 255
 422:	80 ec       	ldi	r24, 0xC0	; 192
 424:	08 95       	ret

00000426 <__fp_pscA>:
 426:	00 24       	eor	r0, r0
 428:	0a 94       	dec	r0
 42a:	16 16       	cp	r1, r22
 42c:	17 06       	cpc	r1, r23
 42e:	18 06       	cpc	r1, r24
 430:	09 06       	cpc	r0, r25
 432:	08 95       	ret

00000434 <__fp_pscB>:
 434:	00 24       	eor	r0, r0
 436:	0a 94       	dec	r0
 438:	12 16       	cp	r1, r18
 43a:	13 06       	cpc	r1, r19
 43c:	14 06       	cpc	r1, r20
 43e:	05 06       	cpc	r0, r21
 440:	08 95       	ret

00000442 <__fp_round>:
 442:	09 2e       	mov	r0, r25
 444:	03 94       	inc	r0
 446:	00 0c       	add	r0, r0
 448:	11 f4       	brne	.+4      	; 0x44e <__fp_round+0xc>
 44a:	88 23       	and	r24, r24
 44c:	52 f0       	brmi	.+20     	; 0x462 <__fp_round+0x20>
 44e:	bb 0f       	add	r27, r27
 450:	40 f4       	brcc	.+16     	; 0x462 <__fp_round+0x20>
 452:	bf 2b       	or	r27, r31
 454:	11 f4       	brne	.+4      	; 0x45a <__fp_round+0x18>
 456:	60 ff       	sbrs	r22, 0
 458:	04 c0       	rjmp	.+8      	; 0x462 <__fp_round+0x20>
 45a:	6f 5f       	subi	r22, 0xFF	; 255
 45c:	7f 4f       	sbci	r23, 0xFF	; 255
 45e:	8f 4f       	sbci	r24, 0xFF	; 255
 460:	9f 4f       	sbci	r25, 0xFF	; 255
 462:	08 95       	ret

00000464 <_exit>:
 464:	f8 94       	cli

00000466 <__stop_program>:
 466:	ff cf       	rjmp	.-2      	; 0x466 <__stop_program>
