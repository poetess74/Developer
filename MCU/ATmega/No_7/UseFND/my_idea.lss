
my_idea.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004e6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         0000048c  00000000  00000000  0000053c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000704  00000000  00000000  000009c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 ee       	ldi	r30, 0xE6	; 230
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  b6:	0c 94 71 02 	jmp	0x4e2	; 0x4e2 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <main>:
// ***********************************************************

#include <avr/io.h>              // Most basic include files
#include <util/delay.h>

int main(void) {
  be:	df 93       	push	r29
  c0:	cf 93       	push	r28
  c2:	cd b7       	in	r28, 0x3d	; 61
  c4:	de b7       	in	r29, 0x3e	; 62
  c6:	6c 97       	sbiw	r28, 0x1c	; 28
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	f8 94       	cli
  cc:	de bf       	out	0x3e, r29	; 62
  ce:	0f be       	out	0x3f, r0	; 63
  d0:	cd bf       	out	0x3d, r28	; 61
    DDRA = 0xFF;
  d2:	ea e3       	ldi	r30, 0x3A	; 58
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	8f ef       	ldi	r24, 0xFF	; 255
  d8:	80 83       	st	Z, r24
    DDRB = 0xFF;
  da:	e7 e3       	ldi	r30, 0x37	; 55
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	8f ef       	ldi	r24, 0xFF	; 255
  e0:	80 83       	st	Z, r24
    PORTA = 0xFF;
  e2:	eb e3       	ldi	r30, 0x3B	; 59
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	8f ef       	ldi	r24, 0xFF	; 255
  e8:	80 83       	st	Z, r24
    PORTB = 0xFF;
  ea:	e8 e3       	ldi	r30, 0x38	; 56
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	8f ef       	ldi	r24, 0xFF	; 255
  f0:	80 83       	st	Z, r24

    while(1) {             // Infinite loop; define here the
        PORTA = 0xFF;
  f2:	eb e3       	ldi	r30, 0x3B	; 59
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	8f ef       	ldi	r24, 0xFF	; 255
  f8:	80 83       	st	Z, r24
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	aa ef       	ldi	r26, 0xFA	; 250
 100:	b3 e4       	ldi	r27, 0x43	; 67
 102:	89 8f       	std	Y+25, r24	; 0x19
 104:	9a 8f       	std	Y+26, r25	; 0x1a
 106:	ab 8f       	std	Y+27, r26	; 0x1b
 108:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 10a:	69 8d       	ldd	r22, Y+25	; 0x19
 10c:	7a 8d       	ldd	r23, Y+26	; 0x1a
 10e:	8b 8d       	ldd	r24, Y+27	; 0x1b
 110:	9c 8d       	ldd	r25, Y+28	; 0x1c
 112:	20 e0       	ldi	r18, 0x00	; 0
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	4a e7       	ldi	r20, 0x7A	; 122
 118:	53 e4       	ldi	r21, 0x43	; 67
 11a:	0e 94 e6 01 	call	0x3cc	; 0x3cc <__mulsf3>
 11e:	dc 01       	movw	r26, r24
 120:	cb 01       	movw	r24, r22
 122:	8d 8b       	std	Y+21, r24	; 0x15
 124:	9e 8b       	std	Y+22, r25	; 0x16
 126:	af 8b       	std	Y+23, r26	; 0x17
 128:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
 12a:	6d 89       	ldd	r22, Y+21	; 0x15
 12c:	7e 89       	ldd	r23, Y+22	; 0x16
 12e:	8f 89       	ldd	r24, Y+23	; 0x17
 130:	98 8d       	ldd	r25, Y+24	; 0x18
 132:	20 e0       	ldi	r18, 0x00	; 0
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	40 e8       	ldi	r20, 0x80	; 128
 138:	5f e3       	ldi	r21, 0x3F	; 63
 13a:	0e 94 65 01 	call	0x2ca	; 0x2ca <__cmpsf2>
 13e:	88 23       	and	r24, r24
 140:	2c f4       	brge	.+10     	; 0x14c <main+0x8e>
		__ticks = 1;
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	9c 8b       	std	Y+20, r25	; 0x14
 148:	8b 8b       	std	Y+19, r24	; 0x13
 14a:	3f c0       	rjmp	.+126    	; 0x1ca <main+0x10c>
	else if (__tmp > 65535)
 14c:	6d 89       	ldd	r22, Y+21	; 0x15
 14e:	7e 89       	ldd	r23, Y+22	; 0x16
 150:	8f 89       	ldd	r24, Y+23	; 0x17
 152:	98 8d       	ldd	r25, Y+24	; 0x18
 154:	20 e0       	ldi	r18, 0x00	; 0
 156:	3f ef       	ldi	r19, 0xFF	; 255
 158:	4f e7       	ldi	r20, 0x7F	; 127
 15a:	57 e4       	ldi	r21, 0x47	; 71
 15c:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <__gesf2>
 160:	18 16       	cp	r1, r24
 162:	4c f5       	brge	.+82     	; 0x1b6 <main+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 164:	69 8d       	ldd	r22, Y+25	; 0x19
 166:	7a 8d       	ldd	r23, Y+26	; 0x1a
 168:	8b 8d       	ldd	r24, Y+27	; 0x1b
 16a:	9c 8d       	ldd	r25, Y+28	; 0x1c
 16c:	20 e0       	ldi	r18, 0x00	; 0
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	40 e2       	ldi	r20, 0x20	; 32
 172:	51 e4       	ldi	r21, 0x41	; 65
 174:	0e 94 e6 01 	call	0x3cc	; 0x3cc <__mulsf3>
 178:	dc 01       	movw	r26, r24
 17a:	cb 01       	movw	r24, r22
 17c:	bc 01       	movw	r22, r24
 17e:	cd 01       	movw	r24, r26
 180:	0e 94 69 01 	call	0x2d2	; 0x2d2 <__fixunssfsi>
 184:	dc 01       	movw	r26, r24
 186:	cb 01       	movw	r24, r22
 188:	9c 8b       	std	Y+20, r25	; 0x14
 18a:	8b 8b       	std	Y+19, r24	; 0x13
 18c:	0f c0       	rjmp	.+30     	; 0x1ac <main+0xee>
 18e:	89 e1       	ldi	r24, 0x19	; 25
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	9a 8b       	std	Y+18, r25	; 0x12
 194:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 196:	89 89       	ldd	r24, Y+17	; 0x11
 198:	9a 89       	ldd	r25, Y+18	; 0x12
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <main+0xdc>
 19e:	9a 8b       	std	Y+18, r25	; 0x12
 1a0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1a2:	8b 89       	ldd	r24, Y+19	; 0x13
 1a4:	9c 89       	ldd	r25, Y+20	; 0x14
 1a6:	01 97       	sbiw	r24, 0x01	; 1
 1a8:	9c 8b       	std	Y+20, r25	; 0x14
 1aa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1ac:	8b 89       	ldd	r24, Y+19	; 0x13
 1ae:	9c 89       	ldd	r25, Y+20	; 0x14
 1b0:	00 97       	sbiw	r24, 0x00	; 0
 1b2:	69 f7       	brne	.-38     	; 0x18e <main+0xd0>
 1b4:	14 c0       	rjmp	.+40     	; 0x1de <main+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 1b6:	6d 89       	ldd	r22, Y+21	; 0x15
 1b8:	7e 89       	ldd	r23, Y+22	; 0x16
 1ba:	8f 89       	ldd	r24, Y+23	; 0x17
 1bc:	98 8d       	ldd	r25, Y+24	; 0x18
 1be:	0e 94 69 01 	call	0x2d2	; 0x2d2 <__fixunssfsi>
 1c2:	dc 01       	movw	r26, r24
 1c4:	cb 01       	movw	r24, r22
 1c6:	9c 8b       	std	Y+20, r25	; 0x14
 1c8:	8b 8b       	std	Y+19, r24	; 0x13
 1ca:	8b 89       	ldd	r24, Y+19	; 0x13
 1cc:	9c 89       	ldd	r25, Y+20	; 0x14
 1ce:	98 8b       	std	Y+16, r25	; 0x10
 1d0:	8f 87       	std	Y+15, r24	; 0x0f
 1d2:	8f 85       	ldd	r24, Y+15	; 0x0f
 1d4:	98 89       	ldd	r25, Y+16	; 0x10
 1d6:	01 97       	sbiw	r24, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <main+0x118>
 1da:	98 8b       	std	Y+16, r25	; 0x10
 1dc:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_ms(500);
        PORTA = 0x00;
 1de:	eb e3       	ldi	r30, 0x3B	; 59
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	10 82       	st	Z, r1
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	aa ef       	ldi	r26, 0xFA	; 250
 1ea:	b3 e4       	ldi	r27, 0x43	; 67
 1ec:	8b 87       	std	Y+11, r24	; 0x0b
 1ee:	9c 87       	std	Y+12, r25	; 0x0c
 1f0:	ad 87       	std	Y+13, r26	; 0x0d
 1f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 1f4:	6b 85       	ldd	r22, Y+11	; 0x0b
 1f6:	7c 85       	ldd	r23, Y+12	; 0x0c
 1f8:	8d 85       	ldd	r24, Y+13	; 0x0d
 1fa:	9e 85       	ldd	r25, Y+14	; 0x0e
 1fc:	20 e0       	ldi	r18, 0x00	; 0
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	4a e7       	ldi	r20, 0x7A	; 122
 202:	53 e4       	ldi	r21, 0x43	; 67
 204:	0e 94 e6 01 	call	0x3cc	; 0x3cc <__mulsf3>
 208:	dc 01       	movw	r26, r24
 20a:	cb 01       	movw	r24, r22
 20c:	8f 83       	std	Y+7, r24	; 0x07
 20e:	98 87       	std	Y+8, r25	; 0x08
 210:	a9 87       	std	Y+9, r26	; 0x09
 212:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
 214:	6f 81       	ldd	r22, Y+7	; 0x07
 216:	78 85       	ldd	r23, Y+8	; 0x08
 218:	89 85       	ldd	r24, Y+9	; 0x09
 21a:	9a 85       	ldd	r25, Y+10	; 0x0a
 21c:	20 e0       	ldi	r18, 0x00	; 0
 21e:	30 e0       	ldi	r19, 0x00	; 0
 220:	40 e8       	ldi	r20, 0x80	; 128
 222:	5f e3       	ldi	r21, 0x3F	; 63
 224:	0e 94 65 01 	call	0x2ca	; 0x2ca <__cmpsf2>
 228:	88 23       	and	r24, r24
 22a:	2c f4       	brge	.+10     	; 0x236 <main+0x178>
		__ticks = 1;
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	9e 83       	std	Y+6, r25	; 0x06
 232:	8d 83       	std	Y+5, r24	; 0x05
 234:	3f c0       	rjmp	.+126    	; 0x2b4 <main+0x1f6>
	else if (__tmp > 65535)
 236:	6f 81       	ldd	r22, Y+7	; 0x07
 238:	78 85       	ldd	r23, Y+8	; 0x08
 23a:	89 85       	ldd	r24, Y+9	; 0x09
 23c:	9a 85       	ldd	r25, Y+10	; 0x0a
 23e:	20 e0       	ldi	r18, 0x00	; 0
 240:	3f ef       	ldi	r19, 0xFF	; 255
 242:	4f e7       	ldi	r20, 0x7F	; 127
 244:	57 e4       	ldi	r21, 0x47	; 71
 246:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <__gesf2>
 24a:	18 16       	cp	r1, r24
 24c:	4c f5       	brge	.+82     	; 0x2a0 <main+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 24e:	6b 85       	ldd	r22, Y+11	; 0x0b
 250:	7c 85       	ldd	r23, Y+12	; 0x0c
 252:	8d 85       	ldd	r24, Y+13	; 0x0d
 254:	9e 85       	ldd	r25, Y+14	; 0x0e
 256:	20 e0       	ldi	r18, 0x00	; 0
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	40 e2       	ldi	r20, 0x20	; 32
 25c:	51 e4       	ldi	r21, 0x41	; 65
 25e:	0e 94 e6 01 	call	0x3cc	; 0x3cc <__mulsf3>
 262:	dc 01       	movw	r26, r24
 264:	cb 01       	movw	r24, r22
 266:	bc 01       	movw	r22, r24
 268:	cd 01       	movw	r24, r26
 26a:	0e 94 69 01 	call	0x2d2	; 0x2d2 <__fixunssfsi>
 26e:	dc 01       	movw	r26, r24
 270:	cb 01       	movw	r24, r22
 272:	9e 83       	std	Y+6, r25	; 0x06
 274:	8d 83       	std	Y+5, r24	; 0x05
 276:	0f c0       	rjmp	.+30     	; 0x296 <main+0x1d8>
 278:	89 e1       	ldi	r24, 0x19	; 25
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	9c 83       	std	Y+4, r25	; 0x04
 27e:	8b 83       	std	Y+3, r24	; 0x03
 280:	8b 81       	ldd	r24, Y+3	; 0x03
 282:	9c 81       	ldd	r25, Y+4	; 0x04
 284:	01 97       	sbiw	r24, 0x01	; 1
 286:	f1 f7       	brne	.-4      	; 0x284 <main+0x1c6>
 288:	9c 83       	std	Y+4, r25	; 0x04
 28a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 28c:	8d 81       	ldd	r24, Y+5	; 0x05
 28e:	9e 81       	ldd	r25, Y+6	; 0x06
 290:	01 97       	sbiw	r24, 0x01	; 1
 292:	9e 83       	std	Y+6, r25	; 0x06
 294:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 296:	8d 81       	ldd	r24, Y+5	; 0x05
 298:	9e 81       	ldd	r25, Y+6	; 0x06
 29a:	00 97       	sbiw	r24, 0x00	; 0
 29c:	69 f7       	brne	.-38     	; 0x278 <main+0x1ba>
 29e:	29 cf       	rjmp	.-430    	; 0xf2 <main+0x34>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 2a0:	6f 81       	ldd	r22, Y+7	; 0x07
 2a2:	78 85       	ldd	r23, Y+8	; 0x08
 2a4:	89 85       	ldd	r24, Y+9	; 0x09
 2a6:	9a 85       	ldd	r25, Y+10	; 0x0a
 2a8:	0e 94 69 01 	call	0x2d2	; 0x2d2 <__fixunssfsi>
 2ac:	dc 01       	movw	r26, r24
 2ae:	cb 01       	movw	r24, r22
 2b0:	9e 83       	std	Y+6, r25	; 0x06
 2b2:	8d 83       	std	Y+5, r24	; 0x05
 2b4:	8d 81       	ldd	r24, Y+5	; 0x05
 2b6:	9e 81       	ldd	r25, Y+6	; 0x06
 2b8:	9a 83       	std	Y+2, r25	; 0x02
 2ba:	89 83       	std	Y+1, r24	; 0x01
 2bc:	89 81       	ldd	r24, Y+1	; 0x01
 2be:	9a 81       	ldd	r25, Y+2	; 0x02
 2c0:	01 97       	sbiw	r24, 0x01	; 1
 2c2:	f1 f7       	brne	.-4      	; 0x2c0 <main+0x202>
 2c4:	9a 83       	std	Y+2, r25	; 0x02
 2c6:	89 83       	std	Y+1, r24	; 0x01
 2c8:	14 cf       	rjmp	.-472    	; 0xf2 <main+0x34>

000002ca <__cmpsf2>:
 2ca:	2f d0       	rcall	.+94     	; 0x32a <__fp_cmp>
 2cc:	08 f4       	brcc	.+2      	; 0x2d0 <__cmpsf2+0x6>
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	08 95       	ret

000002d2 <__fixunssfsi>:
 2d2:	57 d0       	rcall	.+174    	; 0x382 <__fp_splitA>
 2d4:	88 f0       	brcs	.+34     	; 0x2f8 <__fixunssfsi+0x26>
 2d6:	9f 57       	subi	r25, 0x7F	; 127
 2d8:	90 f0       	brcs	.+36     	; 0x2fe <__fixunssfsi+0x2c>
 2da:	b9 2f       	mov	r27, r25
 2dc:	99 27       	eor	r25, r25
 2de:	b7 51       	subi	r27, 0x17	; 23
 2e0:	a0 f0       	brcs	.+40     	; 0x30a <__fixunssfsi+0x38>
 2e2:	d1 f0       	breq	.+52     	; 0x318 <__fixunssfsi+0x46>
 2e4:	66 0f       	add	r22, r22
 2e6:	77 1f       	adc	r23, r23
 2e8:	88 1f       	adc	r24, r24
 2ea:	99 1f       	adc	r25, r25
 2ec:	1a f0       	brmi	.+6      	; 0x2f4 <__fixunssfsi+0x22>
 2ee:	ba 95       	dec	r27
 2f0:	c9 f7       	brne	.-14     	; 0x2e4 <__fixunssfsi+0x12>
 2f2:	12 c0       	rjmp	.+36     	; 0x318 <__fixunssfsi+0x46>
 2f4:	b1 30       	cpi	r27, 0x01	; 1
 2f6:	81 f0       	breq	.+32     	; 0x318 <__fixunssfsi+0x46>
 2f8:	5e d0       	rcall	.+188    	; 0x3b6 <__fp_zero>
 2fa:	b1 e0       	ldi	r27, 0x01	; 1
 2fc:	08 95       	ret
 2fe:	5b c0       	rjmp	.+182    	; 0x3b6 <__fp_zero>
 300:	67 2f       	mov	r22, r23
 302:	78 2f       	mov	r23, r24
 304:	88 27       	eor	r24, r24
 306:	b8 5f       	subi	r27, 0xF8	; 248
 308:	39 f0       	breq	.+14     	; 0x318 <__fixunssfsi+0x46>
 30a:	b9 3f       	cpi	r27, 0xF9	; 249
 30c:	cc f3       	brlt	.-14     	; 0x300 <__fixunssfsi+0x2e>
 30e:	86 95       	lsr	r24
 310:	77 95       	ror	r23
 312:	67 95       	ror	r22
 314:	b3 95       	inc	r27
 316:	d9 f7       	brne	.-10     	; 0x30e <__fixunssfsi+0x3c>
 318:	3e f4       	brtc	.+14     	; 0x328 <__fixunssfsi+0x56>
 31a:	90 95       	com	r25
 31c:	80 95       	com	r24
 31e:	70 95       	com	r23
 320:	61 95       	neg	r22
 322:	7f 4f       	sbci	r23, 0xFF	; 255
 324:	8f 4f       	sbci	r24, 0xFF	; 255
 326:	9f 4f       	sbci	r25, 0xFF	; 255
 328:	08 95       	ret

0000032a <__fp_cmp>:
 32a:	99 0f       	add	r25, r25
 32c:	00 08       	sbc	r0, r0
 32e:	55 0f       	add	r21, r21
 330:	aa 0b       	sbc	r26, r26
 332:	e0 e8       	ldi	r30, 0x80	; 128
 334:	fe ef       	ldi	r31, 0xFE	; 254
 336:	16 16       	cp	r1, r22
 338:	17 06       	cpc	r1, r23
 33a:	e8 07       	cpc	r30, r24
 33c:	f9 07       	cpc	r31, r25
 33e:	c0 f0       	brcs	.+48     	; 0x370 <__fp_cmp+0x46>
 340:	12 16       	cp	r1, r18
 342:	13 06       	cpc	r1, r19
 344:	e4 07       	cpc	r30, r20
 346:	f5 07       	cpc	r31, r21
 348:	98 f0       	brcs	.+38     	; 0x370 <__fp_cmp+0x46>
 34a:	62 1b       	sub	r22, r18
 34c:	73 0b       	sbc	r23, r19
 34e:	84 0b       	sbc	r24, r20
 350:	95 0b       	sbc	r25, r21
 352:	39 f4       	brne	.+14     	; 0x362 <__fp_cmp+0x38>
 354:	0a 26       	eor	r0, r26
 356:	61 f0       	breq	.+24     	; 0x370 <__fp_cmp+0x46>
 358:	23 2b       	or	r18, r19
 35a:	24 2b       	or	r18, r20
 35c:	25 2b       	or	r18, r21
 35e:	21 f4       	brne	.+8      	; 0x368 <__fp_cmp+0x3e>
 360:	08 95       	ret
 362:	0a 26       	eor	r0, r26
 364:	09 f4       	brne	.+2      	; 0x368 <__fp_cmp+0x3e>
 366:	a1 40       	sbci	r26, 0x01	; 1
 368:	a6 95       	lsr	r26
 36a:	8f ef       	ldi	r24, 0xFF	; 255
 36c:	81 1d       	adc	r24, r1
 36e:	81 1d       	adc	r24, r1
 370:	08 95       	ret

00000372 <__fp_split3>:
 372:	57 fd       	sbrc	r21, 7
 374:	90 58       	subi	r25, 0x80	; 128
 376:	44 0f       	add	r20, r20
 378:	55 1f       	adc	r21, r21
 37a:	59 f0       	breq	.+22     	; 0x392 <__fp_splitA+0x10>
 37c:	5f 3f       	cpi	r21, 0xFF	; 255
 37e:	71 f0       	breq	.+28     	; 0x39c <__fp_splitA+0x1a>
 380:	47 95       	ror	r20

00000382 <__fp_splitA>:
 382:	88 0f       	add	r24, r24
 384:	97 fb       	bst	r25, 7
 386:	99 1f       	adc	r25, r25
 388:	61 f0       	breq	.+24     	; 0x3a2 <__fp_splitA+0x20>
 38a:	9f 3f       	cpi	r25, 0xFF	; 255
 38c:	79 f0       	breq	.+30     	; 0x3ac <__fp_splitA+0x2a>
 38e:	87 95       	ror	r24
 390:	08 95       	ret
 392:	12 16       	cp	r1, r18
 394:	13 06       	cpc	r1, r19
 396:	14 06       	cpc	r1, r20
 398:	55 1f       	adc	r21, r21
 39a:	f2 cf       	rjmp	.-28     	; 0x380 <__fp_split3+0xe>
 39c:	46 95       	lsr	r20
 39e:	f1 df       	rcall	.-30     	; 0x382 <__fp_splitA>
 3a0:	08 c0       	rjmp	.+16     	; 0x3b2 <__fp_splitA+0x30>
 3a2:	16 16       	cp	r1, r22
 3a4:	17 06       	cpc	r1, r23
 3a6:	18 06       	cpc	r1, r24
 3a8:	99 1f       	adc	r25, r25
 3aa:	f1 cf       	rjmp	.-30     	; 0x38e <__fp_splitA+0xc>
 3ac:	86 95       	lsr	r24
 3ae:	71 05       	cpc	r23, r1
 3b0:	61 05       	cpc	r22, r1
 3b2:	08 94       	sec
 3b4:	08 95       	ret

000003b6 <__fp_zero>:
 3b6:	e8 94       	clt

000003b8 <__fp_szero>:
 3b8:	bb 27       	eor	r27, r27
 3ba:	66 27       	eor	r22, r22
 3bc:	77 27       	eor	r23, r23
 3be:	cb 01       	movw	r24, r22
 3c0:	97 f9       	bld	r25, 7
 3c2:	08 95       	ret

000003c4 <__gesf2>:
 3c4:	b2 df       	rcall	.-156    	; 0x32a <__fp_cmp>
 3c6:	08 f4       	brcc	.+2      	; 0x3ca <__gesf2+0x6>
 3c8:	8f ef       	ldi	r24, 0xFF	; 255
 3ca:	08 95       	ret

000003cc <__mulsf3>:
 3cc:	0b d0       	rcall	.+22     	; 0x3e4 <__mulsf3x>
 3ce:	78 c0       	rjmp	.+240    	; 0x4c0 <__fp_round>
 3d0:	69 d0       	rcall	.+210    	; 0x4a4 <__fp_pscA>
 3d2:	28 f0       	brcs	.+10     	; 0x3de <__mulsf3+0x12>
 3d4:	6e d0       	rcall	.+220    	; 0x4b2 <__fp_pscB>
 3d6:	18 f0       	brcs	.+6      	; 0x3de <__mulsf3+0x12>
 3d8:	95 23       	and	r25, r21
 3da:	09 f0       	breq	.+2      	; 0x3de <__mulsf3+0x12>
 3dc:	5a c0       	rjmp	.+180    	; 0x492 <__fp_inf>
 3de:	5f c0       	rjmp	.+190    	; 0x49e <__fp_nan>
 3e0:	11 24       	eor	r1, r1
 3e2:	ea cf       	rjmp	.-44     	; 0x3b8 <__fp_szero>

000003e4 <__mulsf3x>:
 3e4:	c6 df       	rcall	.-116    	; 0x372 <__fp_split3>
 3e6:	a0 f3       	brcs	.-24     	; 0x3d0 <__mulsf3+0x4>

000003e8 <__mulsf3_pse>:
 3e8:	95 9f       	mul	r25, r21
 3ea:	d1 f3       	breq	.-12     	; 0x3e0 <__mulsf3+0x14>
 3ec:	95 0f       	add	r25, r21
 3ee:	50 e0       	ldi	r21, 0x00	; 0
 3f0:	55 1f       	adc	r21, r21
 3f2:	62 9f       	mul	r22, r18
 3f4:	f0 01       	movw	r30, r0
 3f6:	72 9f       	mul	r23, r18
 3f8:	bb 27       	eor	r27, r27
 3fa:	f0 0d       	add	r31, r0
 3fc:	b1 1d       	adc	r27, r1
 3fe:	63 9f       	mul	r22, r19
 400:	aa 27       	eor	r26, r26
 402:	f0 0d       	add	r31, r0
 404:	b1 1d       	adc	r27, r1
 406:	aa 1f       	adc	r26, r26
 408:	64 9f       	mul	r22, r20
 40a:	66 27       	eor	r22, r22
 40c:	b0 0d       	add	r27, r0
 40e:	a1 1d       	adc	r26, r1
 410:	66 1f       	adc	r22, r22
 412:	82 9f       	mul	r24, r18
 414:	22 27       	eor	r18, r18
 416:	b0 0d       	add	r27, r0
 418:	a1 1d       	adc	r26, r1
 41a:	62 1f       	adc	r22, r18
 41c:	73 9f       	mul	r23, r19
 41e:	b0 0d       	add	r27, r0
 420:	a1 1d       	adc	r26, r1
 422:	62 1f       	adc	r22, r18
 424:	83 9f       	mul	r24, r19
 426:	a0 0d       	add	r26, r0
 428:	61 1d       	adc	r22, r1
 42a:	22 1f       	adc	r18, r18
 42c:	74 9f       	mul	r23, r20
 42e:	33 27       	eor	r19, r19
 430:	a0 0d       	add	r26, r0
 432:	61 1d       	adc	r22, r1
 434:	23 1f       	adc	r18, r19
 436:	84 9f       	mul	r24, r20
 438:	60 0d       	add	r22, r0
 43a:	21 1d       	adc	r18, r1
 43c:	82 2f       	mov	r24, r18
 43e:	76 2f       	mov	r23, r22
 440:	6a 2f       	mov	r22, r26
 442:	11 24       	eor	r1, r1
 444:	9f 57       	subi	r25, 0x7F	; 127
 446:	50 40       	sbci	r21, 0x00	; 0
 448:	8a f0       	brmi	.+34     	; 0x46c <__mulsf3_pse+0x84>
 44a:	e1 f0       	breq	.+56     	; 0x484 <__mulsf3_pse+0x9c>
 44c:	88 23       	and	r24, r24
 44e:	4a f0       	brmi	.+18     	; 0x462 <__mulsf3_pse+0x7a>
 450:	ee 0f       	add	r30, r30
 452:	ff 1f       	adc	r31, r31
 454:	bb 1f       	adc	r27, r27
 456:	66 1f       	adc	r22, r22
 458:	77 1f       	adc	r23, r23
 45a:	88 1f       	adc	r24, r24
 45c:	91 50       	subi	r25, 0x01	; 1
 45e:	50 40       	sbci	r21, 0x00	; 0
 460:	a9 f7       	brne	.-22     	; 0x44c <__mulsf3_pse+0x64>
 462:	9e 3f       	cpi	r25, 0xFE	; 254
 464:	51 05       	cpc	r21, r1
 466:	70 f0       	brcs	.+28     	; 0x484 <__mulsf3_pse+0x9c>
 468:	14 c0       	rjmp	.+40     	; 0x492 <__fp_inf>
 46a:	a6 cf       	rjmp	.-180    	; 0x3b8 <__fp_szero>
 46c:	5f 3f       	cpi	r21, 0xFF	; 255
 46e:	ec f3       	brlt	.-6      	; 0x46a <__mulsf3_pse+0x82>
 470:	98 3e       	cpi	r25, 0xE8	; 232
 472:	dc f3       	brlt	.-10     	; 0x46a <__mulsf3_pse+0x82>
 474:	86 95       	lsr	r24
 476:	77 95       	ror	r23
 478:	67 95       	ror	r22
 47a:	b7 95       	ror	r27
 47c:	f7 95       	ror	r31
 47e:	e7 95       	ror	r30
 480:	9f 5f       	subi	r25, 0xFF	; 255
 482:	c1 f7       	brne	.-16     	; 0x474 <__mulsf3_pse+0x8c>
 484:	fe 2b       	or	r31, r30
 486:	88 0f       	add	r24, r24
 488:	91 1d       	adc	r25, r1
 48a:	96 95       	lsr	r25
 48c:	87 95       	ror	r24
 48e:	97 f9       	bld	r25, 7
 490:	08 95       	ret

00000492 <__fp_inf>:
 492:	97 f9       	bld	r25, 7
 494:	9f 67       	ori	r25, 0x7F	; 127
 496:	80 e8       	ldi	r24, 0x80	; 128
 498:	70 e0       	ldi	r23, 0x00	; 0
 49a:	60 e0       	ldi	r22, 0x00	; 0
 49c:	08 95       	ret

0000049e <__fp_nan>:
 49e:	9f ef       	ldi	r25, 0xFF	; 255
 4a0:	80 ec       	ldi	r24, 0xC0	; 192
 4a2:	08 95       	ret

000004a4 <__fp_pscA>:
 4a4:	00 24       	eor	r0, r0
 4a6:	0a 94       	dec	r0
 4a8:	16 16       	cp	r1, r22
 4aa:	17 06       	cpc	r1, r23
 4ac:	18 06       	cpc	r1, r24
 4ae:	09 06       	cpc	r0, r25
 4b0:	08 95       	ret

000004b2 <__fp_pscB>:
 4b2:	00 24       	eor	r0, r0
 4b4:	0a 94       	dec	r0
 4b6:	12 16       	cp	r1, r18
 4b8:	13 06       	cpc	r1, r19
 4ba:	14 06       	cpc	r1, r20
 4bc:	05 06       	cpc	r0, r21
 4be:	08 95       	ret

000004c0 <__fp_round>:
 4c0:	09 2e       	mov	r0, r25
 4c2:	03 94       	inc	r0
 4c4:	00 0c       	add	r0, r0
 4c6:	11 f4       	brne	.+4      	; 0x4cc <__fp_round+0xc>
 4c8:	88 23       	and	r24, r24
 4ca:	52 f0       	brmi	.+20     	; 0x4e0 <__fp_round+0x20>
 4cc:	bb 0f       	add	r27, r27
 4ce:	40 f4       	brcc	.+16     	; 0x4e0 <__fp_round+0x20>
 4d0:	bf 2b       	or	r27, r31
 4d2:	11 f4       	brne	.+4      	; 0x4d8 <__fp_round+0x18>
 4d4:	60 ff       	sbrs	r22, 0
 4d6:	04 c0       	rjmp	.+8      	; 0x4e0 <__fp_round+0x20>
 4d8:	6f 5f       	subi	r22, 0xFF	; 255
 4da:	7f 4f       	sbci	r23, 0xFF	; 255
 4dc:	8f 4f       	sbci	r24, 0xFF	; 255
 4de:	9f 4f       	sbci	r25, 0xFF	; 255
 4e0:	08 95       	ret

000004e2 <_exit>:
 4e2:	f8 94       	cli

000004e4 <__stop_program>:
 4e4:	ff cf       	rjmp	.-2      	; 0x4e4 <__stop_program>
