
my_idea.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000814  00000888  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000814  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000768  00000000  00000000  00000894  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000074b  00000000  00000000  00000ffc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e1       	ldi	r30, 0x14	; 20
  a0:	f8 e0       	ldi	r31, 0x08	; 8
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  b6:	0c 94 08 04 	jmp	0x810	; 0x810 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <main>:

#include <avr/io.h>
#include <util/delay.h>
#define INDEX_SIZE 9

int main(void) {
  be:	df 93       	push	r29
  c0:	cf 93       	push	r28
  c2:	cd b7       	in	r28, 0x3d	; 61
  c4:	de b7       	in	r29, 0x3e	; 62
  c6:	cf 54       	subi	r28, 0x4F	; 79
  c8:	d0 40       	sbci	r29, 0x00	; 0
  ca:	0f b6       	in	r0, 0x3f	; 63
  cc:	f8 94       	cli
  ce:	de bf       	out	0x3e, r29	; 62
  d0:	0f be       	out	0x3f, r0	; 63
  d2:	cd bf       	out	0x3d, r28	; 61
    DDRC = 0xFF;
  d4:	e4 e3       	ldi	r30, 0x34	; 52
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	8f ef       	ldi	r24, 0xFF	; 255
  da:	80 83       	st	Z, r24
    PORTC = 0X00;
  dc:	e5 e3       	ldi	r30, 0x35	; 53
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	10 82       	st	Z, r1
    char indexArray[INDEX_SIZE] = {  0b11111111, 0b11111110, 0b11111100, // 0xFF, 0xFE, 0xFC
                                     0b11111000, 0b11110000, 0b11100000, // 0xF8, 0xF0, 0xE0
                                     0b11000000, 0b10000000, 0b00000000  // 0xC0, 0x80, 0x00
                                  };
  e2:	ce 01       	movw	r24, r28
  e4:	8e 5b       	subi	r24, 0xBE	; 190
  e6:	9f 4f       	sbci	r25, 0xFF	; 255
  e8:	2d 96       	adiw	r28, 0x0d	; 13
  ea:	9f af       	std	Y+63, r25	; 0x3f
  ec:	8e af       	std	Y+62, r24	; 0x3e
  ee:	2d 97       	sbiw	r28, 0x0d	; 13
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	91 e0       	ldi	r25, 0x01	; 1
  f4:	2f 96       	adiw	r28, 0x0f	; 15
  f6:	9f af       	std	Y+63, r25	; 0x3f
  f8:	8e af       	std	Y+62, r24	; 0x3e
  fa:	2f 97       	sbiw	r28, 0x0f	; 15
  fc:	99 e0       	ldi	r25, 0x09	; 9
  fe:	60 96       	adiw	r28, 0x10	; 16
 100:	9f af       	std	Y+63, r25	; 0x3f
 102:	60 97       	sbiw	r28, 0x10	; 16
 104:	2f 96       	adiw	r28, 0x0f	; 15
 106:	ee ad       	ldd	r30, Y+62	; 0x3e
 108:	ff ad       	ldd	r31, Y+63	; 0x3f
 10a:	2f 97       	sbiw	r28, 0x0f	; 15
 10c:	00 80       	ld	r0, Z
 10e:	2f 96       	adiw	r28, 0x0f	; 15
 110:	8e ad       	ldd	r24, Y+62	; 0x3e
 112:	9f ad       	ldd	r25, Y+63	; 0x3f
 114:	2f 97       	sbiw	r28, 0x0f	; 15
 116:	01 96       	adiw	r24, 0x01	; 1
 118:	2f 96       	adiw	r28, 0x0f	; 15
 11a:	9f af       	std	Y+63, r25	; 0x3f
 11c:	8e af       	std	Y+62, r24	; 0x3e
 11e:	2f 97       	sbiw	r28, 0x0f	; 15
 120:	2d 96       	adiw	r28, 0x0d	; 13
 122:	ee ad       	ldd	r30, Y+62	; 0x3e
 124:	ff ad       	ldd	r31, Y+63	; 0x3f
 126:	2d 97       	sbiw	r28, 0x0d	; 13
 128:	00 82       	st	Z, r0
 12a:	2d 96       	adiw	r28, 0x0d	; 13
 12c:	8e ad       	ldd	r24, Y+62	; 0x3e
 12e:	9f ad       	ldd	r25, Y+63	; 0x3f
 130:	2d 97       	sbiw	r28, 0x0d	; 13
 132:	01 96       	adiw	r24, 0x01	; 1
 134:	2d 96       	adiw	r28, 0x0d	; 13
 136:	9f af       	std	Y+63, r25	; 0x3f
 138:	8e af       	std	Y+62, r24	; 0x3e
 13a:	2d 97       	sbiw	r28, 0x0d	; 13
 13c:	60 96       	adiw	r28, 0x10	; 16
 13e:	9f ad       	ldd	r25, Y+63	; 0x3f
 140:	60 97       	sbiw	r28, 0x10	; 16
 142:	91 50       	subi	r25, 0x01	; 1
 144:	60 96       	adiw	r28, 0x10	; 16
 146:	9f af       	std	Y+63, r25	; 0x3f
 148:	60 97       	sbiw	r28, 0x10	; 16
 14a:	60 96       	adiw	r28, 0x10	; 16
 14c:	ef ad       	ldd	r30, Y+63	; 0x3f
 14e:	60 97       	sbiw	r28, 0x10	; 16
 150:	ee 23       	and	r30, r30
 152:	c1 f6       	brne	.-80     	; 0x104 <main+0x46>
    char index = 0xFF;
 154:	fe 01       	movw	r30, r28
 156:	ef 5b       	subi	r30, 0xBF	; 191
 158:	ff 4f       	sbci	r31, 0xFF	; 255
 15a:	8f ef       	ldi	r24, 0xFF	; 255
 15c:	80 83       	st	Z, r24

    while(1) {
        /* Use bit-shift operator */ 
        {
            for(int i = 0; i < INDEX_SIZE; i++) {
 15e:	fe 01       	movw	r30, r28
 160:	ff 96       	adiw	r30, 0x3f	; 63
 162:	11 82       	std	Z+1, r1	; 0x01
 164:	10 82       	st	Z, r1
 166:	8b c0       	rjmp	.+278    	; 0x27e <main+0x1c0>
                PORTC = index;
 168:	a5 e3       	ldi	r26, 0x35	; 53
 16a:	b0 e0       	ldi	r27, 0x00	; 0
 16c:	fe 01       	movw	r30, r28
 16e:	ef 5b       	subi	r30, 0xBF	; 191
 170:	ff 4f       	sbci	r31, 0xFF	; 255
 172:	80 81       	ld	r24, Z
 174:	8c 93       	st	X, r24
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	a8 ec       	ldi	r26, 0xC8	; 200
 17c:	b2 e4       	ldi	r27, 0x42	; 66
 17e:	8d ab       	std	Y+53, r24	; 0x35
 180:	9e ab       	std	Y+54, r25	; 0x36
 182:	af ab       	std	Y+55, r26	; 0x37
 184:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 186:	6d a9       	ldd	r22, Y+53	; 0x35
 188:	7e a9       	ldd	r23, Y+54	; 0x36
 18a:	8f a9       	ldd	r24, Y+55	; 0x37
 18c:	98 ad       	ldd	r25, Y+56	; 0x38
 18e:	20 e0       	ldi	r18, 0x00	; 0
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	4a e7       	ldi	r20, 0x7A	; 122
 194:	53 e4       	ldi	r21, 0x43	; 67
 196:	0e 94 7d 03 	call	0x6fa	; 0x6fa <__mulsf3>
 19a:	dc 01       	movw	r26, r24
 19c:	cb 01       	movw	r24, r22
 19e:	89 ab       	std	Y+49, r24	; 0x31
 1a0:	9a ab       	std	Y+50, r25	; 0x32
 1a2:	ab ab       	std	Y+51, r26	; 0x33
 1a4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
 1a6:	69 a9       	ldd	r22, Y+49	; 0x31
 1a8:	7a a9       	ldd	r23, Y+50	; 0x32
 1aa:	8b a9       	ldd	r24, Y+51	; 0x33
 1ac:	9c a9       	ldd	r25, Y+52	; 0x34
 1ae:	20 e0       	ldi	r18, 0x00	; 0
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	40 e8       	ldi	r20, 0x80	; 128
 1b4:	5f e3       	ldi	r21, 0x3F	; 63
 1b6:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <__cmpsf2>
 1ba:	88 23       	and	r24, r24
 1bc:	2c f4       	brge	.+10     	; 0x1c8 <main+0x10a>
		__ticks = 1;
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	98 ab       	std	Y+48, r25	; 0x30
 1c4:	8f a7       	std	Y+47, r24	; 0x2f
 1c6:	3f c0       	rjmp	.+126    	; 0x246 <main+0x188>
	else if (__tmp > 65535)
 1c8:	69 a9       	ldd	r22, Y+49	; 0x31
 1ca:	7a a9       	ldd	r23, Y+50	; 0x32
 1cc:	8b a9       	ldd	r24, Y+51	; 0x33
 1ce:	9c a9       	ldd	r25, Y+52	; 0x34
 1d0:	20 e0       	ldi	r18, 0x00	; 0
 1d2:	3f ef       	ldi	r19, 0xFF	; 255
 1d4:	4f e7       	ldi	r20, 0x7F	; 127
 1d6:	57 e4       	ldi	r21, 0x47	; 71
 1d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__gesf2>
 1dc:	18 16       	cp	r1, r24
 1de:	4c f5       	brge	.+82     	; 0x232 <main+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1e0:	6d a9       	ldd	r22, Y+53	; 0x35
 1e2:	7e a9       	ldd	r23, Y+54	; 0x36
 1e4:	8f a9       	ldd	r24, Y+55	; 0x37
 1e6:	98 ad       	ldd	r25, Y+56	; 0x38
 1e8:	20 e0       	ldi	r18, 0x00	; 0
 1ea:	30 e0       	ldi	r19, 0x00	; 0
 1ec:	40 e2       	ldi	r20, 0x20	; 32
 1ee:	51 e4       	ldi	r21, 0x41	; 65
 1f0:	0e 94 7d 03 	call	0x6fa	; 0x6fa <__mulsf3>
 1f4:	dc 01       	movw	r26, r24
 1f6:	cb 01       	movw	r24, r22
 1f8:	bc 01       	movw	r22, r24
 1fa:	cd 01       	movw	r24, r26
 1fc:	0e 94 00 03 	call	0x600	; 0x600 <__fixunssfsi>
 200:	dc 01       	movw	r26, r24
 202:	cb 01       	movw	r24, r22
 204:	98 ab       	std	Y+48, r25	; 0x30
 206:	8f a7       	std	Y+47, r24	; 0x2f
 208:	0f c0       	rjmp	.+30     	; 0x228 <main+0x16a>
 20a:	89 e1       	ldi	r24, 0x19	; 25
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	9e a7       	std	Y+46, r25	; 0x2e
 210:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 212:	8d a5       	ldd	r24, Y+45	; 0x2d
 214:	9e a5       	ldd	r25, Y+46	; 0x2e
 216:	01 97       	sbiw	r24, 0x01	; 1
 218:	f1 f7       	brne	.-4      	; 0x216 <main+0x158>
 21a:	9e a7       	std	Y+46, r25	; 0x2e
 21c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 21e:	8f a5       	ldd	r24, Y+47	; 0x2f
 220:	98 a9       	ldd	r25, Y+48	; 0x30
 222:	01 97       	sbiw	r24, 0x01	; 1
 224:	98 ab       	std	Y+48, r25	; 0x30
 226:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 228:	8f a5       	ldd	r24, Y+47	; 0x2f
 22a:	98 a9       	ldd	r25, Y+48	; 0x30
 22c:	00 97       	sbiw	r24, 0x00	; 0
 22e:	69 f7       	brne	.-38     	; 0x20a <main+0x14c>
 230:	14 c0       	rjmp	.+40     	; 0x25a <main+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 232:	69 a9       	ldd	r22, Y+49	; 0x31
 234:	7a a9       	ldd	r23, Y+50	; 0x32
 236:	8b a9       	ldd	r24, Y+51	; 0x33
 238:	9c a9       	ldd	r25, Y+52	; 0x34
 23a:	0e 94 00 03 	call	0x600	; 0x600 <__fixunssfsi>
 23e:	dc 01       	movw	r26, r24
 240:	cb 01       	movw	r24, r22
 242:	98 ab       	std	Y+48, r25	; 0x30
 244:	8f a7       	std	Y+47, r24	; 0x2f
 246:	8f a5       	ldd	r24, Y+47	; 0x2f
 248:	98 a9       	ldd	r25, Y+48	; 0x30
 24a:	9c a7       	std	Y+44, r25	; 0x2c
 24c:	8b a7       	std	Y+43, r24	; 0x2b
 24e:	8b a5       	ldd	r24, Y+43	; 0x2b
 250:	9c a5       	ldd	r25, Y+44	; 0x2c
 252:	01 97       	sbiw	r24, 0x01	; 1
 254:	f1 f7       	brne	.-4      	; 0x252 <main+0x194>
 256:	9c a7       	std	Y+44, r25	; 0x2c
 258:	8b a7       	std	Y+43, r24	; 0x2b
                _delay_ms(100);
                index <<= 1;
 25a:	de 01       	movw	r26, r28
 25c:	af 5b       	subi	r26, 0xBF	; 191
 25e:	bf 4f       	sbci	r27, 0xFF	; 255
 260:	fe 01       	movw	r30, r28
 262:	ef 5b       	subi	r30, 0xBF	; 191
 264:	ff 4f       	sbci	r31, 0xFF	; 255
 266:	80 81       	ld	r24, Z
 268:	88 0f       	add	r24, r24
 26a:	8c 93       	st	X, r24
    char index = 0xFF;

    while(1) {
        /* Use bit-shift operator */ 
        {
            for(int i = 0; i < INDEX_SIZE; i++) {
 26c:	fe 01       	movw	r30, r28
 26e:	ff 96       	adiw	r30, 0x3f	; 63
 270:	80 81       	ld	r24, Z
 272:	91 81       	ldd	r25, Z+1	; 0x01
 274:	01 96       	adiw	r24, 0x01	; 1
 276:	fe 01       	movw	r30, r28
 278:	ff 96       	adiw	r30, 0x3f	; 63
 27a:	91 83       	std	Z+1, r25	; 0x01
 27c:	80 83       	st	Z, r24
 27e:	fe 01       	movw	r30, r28
 280:	ff 96       	adiw	r30, 0x3f	; 63
 282:	80 81       	ld	r24, Z
 284:	91 81       	ldd	r25, Z+1	; 0x01
 286:	89 30       	cpi	r24, 0x09	; 9
 288:	91 05       	cpc	r25, r1
 28a:	0c f4       	brge	.+2      	; 0x28e <main+0x1d0>
 28c:	6d cf       	rjmp	.-294    	; 0x168 <main+0xaa>
                PORTC = index;
                _delay_ms(100);
                index <<= 1;
            }
            index = 0xFF;
 28e:	fe 01       	movw	r30, r28
 290:	ef 5b       	subi	r30, 0xBF	; 191
 292:	ff 4f       	sbci	r31, 0xFF	; 255
 294:	8f ef       	ldi	r24, 0xFF	; 255
 296:	80 83       	st	Z, r24
            for(int i = 0; i < INDEX_SIZE; i++) {
 298:	1e ae       	std	Y+62, r1	; 0x3e
 29a:	1d ae       	std	Y+61, r1	; 0x3d
 29c:	88 c0       	rjmp	.+272    	; 0x3ae <main+0x2f0>
                PORTC = ~index;
 29e:	a5 e3       	ldi	r26, 0x35	; 53
 2a0:	b0 e0       	ldi	r27, 0x00	; 0
 2a2:	fe 01       	movw	r30, r28
 2a4:	ef 5b       	subi	r30, 0xBF	; 191
 2a6:	ff 4f       	sbci	r31, 0xFF	; 255
 2a8:	80 81       	ld	r24, Z
 2aa:	80 95       	com	r24
 2ac:	8c 93       	st	X, r24
 2ae:	80 e0       	ldi	r24, 0x00	; 0
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	a8 ec       	ldi	r26, 0xC8	; 200
 2b4:	b2 e4       	ldi	r27, 0x42	; 66
 2b6:	8f a3       	std	Y+39, r24	; 0x27
 2b8:	98 a7       	std	Y+40, r25	; 0x28
 2ba:	a9 a7       	std	Y+41, r26	; 0x29
 2bc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 2be:	6f a1       	ldd	r22, Y+39	; 0x27
 2c0:	78 a5       	ldd	r23, Y+40	; 0x28
 2c2:	89 a5       	ldd	r24, Y+41	; 0x29
 2c4:	9a a5       	ldd	r25, Y+42	; 0x2a
 2c6:	20 e0       	ldi	r18, 0x00	; 0
 2c8:	30 e0       	ldi	r19, 0x00	; 0
 2ca:	4a e7       	ldi	r20, 0x7A	; 122
 2cc:	53 e4       	ldi	r21, 0x43	; 67
 2ce:	0e 94 7d 03 	call	0x6fa	; 0x6fa <__mulsf3>
 2d2:	dc 01       	movw	r26, r24
 2d4:	cb 01       	movw	r24, r22
 2d6:	8b a3       	std	Y+35, r24	; 0x23
 2d8:	9c a3       	std	Y+36, r25	; 0x24
 2da:	ad a3       	std	Y+37, r26	; 0x25
 2dc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
 2de:	6b a1       	ldd	r22, Y+35	; 0x23
 2e0:	7c a1       	ldd	r23, Y+36	; 0x24
 2e2:	8d a1       	ldd	r24, Y+37	; 0x25
 2e4:	9e a1       	ldd	r25, Y+38	; 0x26
 2e6:	20 e0       	ldi	r18, 0x00	; 0
 2e8:	30 e0       	ldi	r19, 0x00	; 0
 2ea:	40 e8       	ldi	r20, 0x80	; 128
 2ec:	5f e3       	ldi	r21, 0x3F	; 63
 2ee:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <__cmpsf2>
 2f2:	88 23       	and	r24, r24
 2f4:	2c f4       	brge	.+10     	; 0x300 <main+0x242>
		__ticks = 1;
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	9a a3       	std	Y+34, r25	; 0x22
 2fc:	89 a3       	std	Y+33, r24	; 0x21
 2fe:	3f c0       	rjmp	.+126    	; 0x37e <main+0x2c0>
	else if (__tmp > 65535)
 300:	6b a1       	ldd	r22, Y+35	; 0x23
 302:	7c a1       	ldd	r23, Y+36	; 0x24
 304:	8d a1       	ldd	r24, Y+37	; 0x25
 306:	9e a1       	ldd	r25, Y+38	; 0x26
 308:	20 e0       	ldi	r18, 0x00	; 0
 30a:	3f ef       	ldi	r19, 0xFF	; 255
 30c:	4f e7       	ldi	r20, 0x7F	; 127
 30e:	57 e4       	ldi	r21, 0x47	; 71
 310:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__gesf2>
 314:	18 16       	cp	r1, r24
 316:	4c f5       	brge	.+82     	; 0x36a <main+0x2ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 318:	6f a1       	ldd	r22, Y+39	; 0x27
 31a:	78 a5       	ldd	r23, Y+40	; 0x28
 31c:	89 a5       	ldd	r24, Y+41	; 0x29
 31e:	9a a5       	ldd	r25, Y+42	; 0x2a
 320:	20 e0       	ldi	r18, 0x00	; 0
 322:	30 e0       	ldi	r19, 0x00	; 0
 324:	40 e2       	ldi	r20, 0x20	; 32
 326:	51 e4       	ldi	r21, 0x41	; 65
 328:	0e 94 7d 03 	call	0x6fa	; 0x6fa <__mulsf3>
 32c:	dc 01       	movw	r26, r24
 32e:	cb 01       	movw	r24, r22
 330:	bc 01       	movw	r22, r24
 332:	cd 01       	movw	r24, r26
 334:	0e 94 00 03 	call	0x600	; 0x600 <__fixunssfsi>
 338:	dc 01       	movw	r26, r24
 33a:	cb 01       	movw	r24, r22
 33c:	9a a3       	std	Y+34, r25	; 0x22
 33e:	89 a3       	std	Y+33, r24	; 0x21
 340:	0f c0       	rjmp	.+30     	; 0x360 <main+0x2a2>
 342:	89 e1       	ldi	r24, 0x19	; 25
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	98 a3       	std	Y+32, r25	; 0x20
 348:	8f 8f       	std	Y+31, r24	; 0x1f
 34a:	8f 8d       	ldd	r24, Y+31	; 0x1f
 34c:	98 a1       	ldd	r25, Y+32	; 0x20
 34e:	01 97       	sbiw	r24, 0x01	; 1
 350:	f1 f7       	brne	.-4      	; 0x34e <main+0x290>
 352:	98 a3       	std	Y+32, r25	; 0x20
 354:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 356:	89 a1       	ldd	r24, Y+33	; 0x21
 358:	9a a1       	ldd	r25, Y+34	; 0x22
 35a:	01 97       	sbiw	r24, 0x01	; 1
 35c:	9a a3       	std	Y+34, r25	; 0x22
 35e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 360:	89 a1       	ldd	r24, Y+33	; 0x21
 362:	9a a1       	ldd	r25, Y+34	; 0x22
 364:	00 97       	sbiw	r24, 0x00	; 0
 366:	69 f7       	brne	.-38     	; 0x342 <main+0x284>
 368:	14 c0       	rjmp	.+40     	; 0x392 <main+0x2d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 36a:	6b a1       	ldd	r22, Y+35	; 0x23
 36c:	7c a1       	ldd	r23, Y+36	; 0x24
 36e:	8d a1       	ldd	r24, Y+37	; 0x25
 370:	9e a1       	ldd	r25, Y+38	; 0x26
 372:	0e 94 00 03 	call	0x600	; 0x600 <__fixunssfsi>
 376:	dc 01       	movw	r26, r24
 378:	cb 01       	movw	r24, r22
 37a:	9a a3       	std	Y+34, r25	; 0x22
 37c:	89 a3       	std	Y+33, r24	; 0x21
 37e:	89 a1       	ldd	r24, Y+33	; 0x21
 380:	9a a1       	ldd	r25, Y+34	; 0x22
 382:	9e 8f       	std	Y+30, r25	; 0x1e
 384:	8d 8f       	std	Y+29, r24	; 0x1d
 386:	8d 8d       	ldd	r24, Y+29	; 0x1d
 388:	9e 8d       	ldd	r25, Y+30	; 0x1e
 38a:	01 97       	sbiw	r24, 0x01	; 1
 38c:	f1 f7       	brne	.-4      	; 0x38a <main+0x2cc>
 38e:	9e 8f       	std	Y+30, r25	; 0x1e
 390:	8d 8f       	std	Y+29, r24	; 0x1d
                _delay_ms(100);
                index >>= 1;
 392:	de 01       	movw	r26, r28
 394:	af 5b       	subi	r26, 0xBF	; 191
 396:	bf 4f       	sbci	r27, 0xFF	; 255
 398:	fe 01       	movw	r30, r28
 39a:	ef 5b       	subi	r30, 0xBF	; 191
 39c:	ff 4f       	sbci	r31, 0xFF	; 255
 39e:	80 81       	ld	r24, Z
 3a0:	86 95       	lsr	r24
 3a2:	8c 93       	st	X, r24
                PORTC = index;
                _delay_ms(100);
                index <<= 1;
            }
            index = 0xFF;
            for(int i = 0; i < INDEX_SIZE; i++) {
 3a4:	8d ad       	ldd	r24, Y+61	; 0x3d
 3a6:	9e ad       	ldd	r25, Y+62	; 0x3e
 3a8:	01 96       	adiw	r24, 0x01	; 1
 3aa:	9e af       	std	Y+62, r25	; 0x3e
 3ac:	8d af       	std	Y+61, r24	; 0x3d
 3ae:	8d ad       	ldd	r24, Y+61	; 0x3d
 3b0:	9e ad       	ldd	r25, Y+62	; 0x3e
 3b2:	89 30       	cpi	r24, 0x09	; 9
 3b4:	91 05       	cpc	r25, r1
 3b6:	0c f4       	brge	.+2      	; 0x3ba <main+0x2fc>
 3b8:	72 cf       	rjmp	.-284    	; 0x29e <main+0x1e0>
                PORTC = ~index;
                _delay_ms(100);
                index >>= 1;
            }
            index = 0xFF;
 3ba:	fe 01       	movw	r30, r28
 3bc:	ef 5b       	subi	r30, 0xBF	; 191
 3be:	ff 4f       	sbci	r31, 0xFF	; 255
 3c0:	8f ef       	ldi	r24, 0xFF	; 255
 3c2:	80 83       	st	Z, r24
        }

        /* Use for-loop and array */ 
        {
            for(int i = 0; i < INDEX_SIZE; i++) {
 3c4:	1c ae       	std	Y+60, r1	; 0x3c
 3c6:	1b ae       	std	Y+59, r1	; 0x3b
 3c8:	83 c0       	rjmp	.+262    	; 0x4d0 <main+0x412>
                PORTC = indexArray[i];
 3ca:	a5 e3       	ldi	r26, 0x35	; 53
 3cc:	b0 e0       	ldi	r27, 0x00	; 0
 3ce:	2b ad       	ldd	r18, Y+59	; 0x3b
 3d0:	3c ad       	ldd	r19, Y+60	; 0x3c
 3d2:	ce 01       	movw	r24, r28
 3d4:	8e 5b       	subi	r24, 0xBE	; 190
 3d6:	9f 4f       	sbci	r25, 0xFF	; 255
 3d8:	fc 01       	movw	r30, r24
 3da:	e2 0f       	add	r30, r18
 3dc:	f3 1f       	adc	r31, r19
 3de:	80 81       	ld	r24, Z
 3e0:	8c 93       	st	X, r24
 3e2:	80 e0       	ldi	r24, 0x00	; 0
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	a8 ec       	ldi	r26, 0xC8	; 200
 3e8:	b2 e4       	ldi	r27, 0x42	; 66
 3ea:	89 8f       	std	Y+25, r24	; 0x19
 3ec:	9a 8f       	std	Y+26, r25	; 0x1a
 3ee:	ab 8f       	std	Y+27, r26	; 0x1b
 3f0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 3f2:	69 8d       	ldd	r22, Y+25	; 0x19
 3f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
 3f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
 3f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
 3fa:	20 e0       	ldi	r18, 0x00	; 0
 3fc:	30 e0       	ldi	r19, 0x00	; 0
 3fe:	4a e7       	ldi	r20, 0x7A	; 122
 400:	53 e4       	ldi	r21, 0x43	; 67
 402:	0e 94 7d 03 	call	0x6fa	; 0x6fa <__mulsf3>
 406:	dc 01       	movw	r26, r24
 408:	cb 01       	movw	r24, r22
 40a:	8d 8b       	std	Y+21, r24	; 0x15
 40c:	9e 8b       	std	Y+22, r25	; 0x16
 40e:	af 8b       	std	Y+23, r26	; 0x17
 410:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
 412:	6d 89       	ldd	r22, Y+21	; 0x15
 414:	7e 89       	ldd	r23, Y+22	; 0x16
 416:	8f 89       	ldd	r24, Y+23	; 0x17
 418:	98 8d       	ldd	r25, Y+24	; 0x18
 41a:	20 e0       	ldi	r18, 0x00	; 0
 41c:	30 e0       	ldi	r19, 0x00	; 0
 41e:	40 e8       	ldi	r20, 0x80	; 128
 420:	5f e3       	ldi	r21, 0x3F	; 63
 422:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <__cmpsf2>
 426:	88 23       	and	r24, r24
 428:	2c f4       	brge	.+10     	; 0x434 <main+0x376>
		__ticks = 1;
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	9c 8b       	std	Y+20, r25	; 0x14
 430:	8b 8b       	std	Y+19, r24	; 0x13
 432:	3f c0       	rjmp	.+126    	; 0x4b2 <main+0x3f4>
	else if (__tmp > 65535)
 434:	6d 89       	ldd	r22, Y+21	; 0x15
 436:	7e 89       	ldd	r23, Y+22	; 0x16
 438:	8f 89       	ldd	r24, Y+23	; 0x17
 43a:	98 8d       	ldd	r25, Y+24	; 0x18
 43c:	20 e0       	ldi	r18, 0x00	; 0
 43e:	3f ef       	ldi	r19, 0xFF	; 255
 440:	4f e7       	ldi	r20, 0x7F	; 127
 442:	57 e4       	ldi	r21, 0x47	; 71
 444:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__gesf2>
 448:	18 16       	cp	r1, r24
 44a:	4c f5       	brge	.+82     	; 0x49e <main+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 44c:	69 8d       	ldd	r22, Y+25	; 0x19
 44e:	7a 8d       	ldd	r23, Y+26	; 0x1a
 450:	8b 8d       	ldd	r24, Y+27	; 0x1b
 452:	9c 8d       	ldd	r25, Y+28	; 0x1c
 454:	20 e0       	ldi	r18, 0x00	; 0
 456:	30 e0       	ldi	r19, 0x00	; 0
 458:	40 e2       	ldi	r20, 0x20	; 32
 45a:	51 e4       	ldi	r21, 0x41	; 65
 45c:	0e 94 7d 03 	call	0x6fa	; 0x6fa <__mulsf3>
 460:	dc 01       	movw	r26, r24
 462:	cb 01       	movw	r24, r22
 464:	bc 01       	movw	r22, r24
 466:	cd 01       	movw	r24, r26
 468:	0e 94 00 03 	call	0x600	; 0x600 <__fixunssfsi>
 46c:	dc 01       	movw	r26, r24
 46e:	cb 01       	movw	r24, r22
 470:	9c 8b       	std	Y+20, r25	; 0x14
 472:	8b 8b       	std	Y+19, r24	; 0x13
 474:	0f c0       	rjmp	.+30     	; 0x494 <main+0x3d6>
 476:	89 e1       	ldi	r24, 0x19	; 25
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	9a 8b       	std	Y+18, r25	; 0x12
 47c:	89 8b       	std	Y+17, r24	; 0x11
 47e:	89 89       	ldd	r24, Y+17	; 0x11
 480:	9a 89       	ldd	r25, Y+18	; 0x12
 482:	01 97       	sbiw	r24, 0x01	; 1
 484:	f1 f7       	brne	.-4      	; 0x482 <main+0x3c4>
 486:	9a 8b       	std	Y+18, r25	; 0x12
 488:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 48a:	8b 89       	ldd	r24, Y+19	; 0x13
 48c:	9c 89       	ldd	r25, Y+20	; 0x14
 48e:	01 97       	sbiw	r24, 0x01	; 1
 490:	9c 8b       	std	Y+20, r25	; 0x14
 492:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 494:	8b 89       	ldd	r24, Y+19	; 0x13
 496:	9c 89       	ldd	r25, Y+20	; 0x14
 498:	00 97       	sbiw	r24, 0x00	; 0
 49a:	69 f7       	brne	.-38     	; 0x476 <main+0x3b8>
 49c:	14 c0       	rjmp	.+40     	; 0x4c6 <main+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 49e:	6d 89       	ldd	r22, Y+21	; 0x15
 4a0:	7e 89       	ldd	r23, Y+22	; 0x16
 4a2:	8f 89       	ldd	r24, Y+23	; 0x17
 4a4:	98 8d       	ldd	r25, Y+24	; 0x18
 4a6:	0e 94 00 03 	call	0x600	; 0x600 <__fixunssfsi>
 4aa:	dc 01       	movw	r26, r24
 4ac:	cb 01       	movw	r24, r22
 4ae:	9c 8b       	std	Y+20, r25	; 0x14
 4b0:	8b 8b       	std	Y+19, r24	; 0x13
 4b2:	8b 89       	ldd	r24, Y+19	; 0x13
 4b4:	9c 89       	ldd	r25, Y+20	; 0x14
 4b6:	98 8b       	std	Y+16, r25	; 0x10
 4b8:	8f 87       	std	Y+15, r24	; 0x0f
 4ba:	8f 85       	ldd	r24, Y+15	; 0x0f
 4bc:	98 89       	ldd	r25, Y+16	; 0x10
 4be:	01 97       	sbiw	r24, 0x01	; 1
 4c0:	f1 f7       	brne	.-4      	; 0x4be <main+0x400>
 4c2:	98 8b       	std	Y+16, r25	; 0x10
 4c4:	8f 87       	std	Y+15, r24	; 0x0f
            index = 0xFF;
        }

        /* Use for-loop and array */ 
        {
            for(int i = 0; i < INDEX_SIZE; i++) {
 4c6:	8b ad       	ldd	r24, Y+59	; 0x3b
 4c8:	9c ad       	ldd	r25, Y+60	; 0x3c
 4ca:	01 96       	adiw	r24, 0x01	; 1
 4cc:	9c af       	std	Y+60, r25	; 0x3c
 4ce:	8b af       	std	Y+59, r24	; 0x3b
 4d0:	8b ad       	ldd	r24, Y+59	; 0x3b
 4d2:	9c ad       	ldd	r25, Y+60	; 0x3c
 4d4:	89 30       	cpi	r24, 0x09	; 9
 4d6:	91 05       	cpc	r25, r1
 4d8:	0c f4       	brge	.+2      	; 0x4dc <main+0x41e>
 4da:	77 cf       	rjmp	.-274    	; 0x3ca <main+0x30c>
                PORTC = indexArray[i];
                _delay_ms(100);
            }
            for(int i = INDEX_SIZE - 1; i >= 0; i--) {
 4dc:	88 e0       	ldi	r24, 0x08	; 8
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	9a af       	std	Y+58, r25	; 0x3a
 4e2:	89 af       	std	Y+57, r24	; 0x39
 4e4:	83 c0       	rjmp	.+262    	; 0x5ec <main+0x52e>
                PORTC = indexArray[i];
 4e6:	a5 e3       	ldi	r26, 0x35	; 53
 4e8:	b0 e0       	ldi	r27, 0x00	; 0
 4ea:	29 ad       	ldd	r18, Y+57	; 0x39
 4ec:	3a ad       	ldd	r19, Y+58	; 0x3a
 4ee:	ce 01       	movw	r24, r28
 4f0:	8e 5b       	subi	r24, 0xBE	; 190
 4f2:	9f 4f       	sbci	r25, 0xFF	; 255
 4f4:	fc 01       	movw	r30, r24
 4f6:	e2 0f       	add	r30, r18
 4f8:	f3 1f       	adc	r31, r19
 4fa:	80 81       	ld	r24, Z
 4fc:	8c 93       	st	X, r24
 4fe:	80 e0       	ldi	r24, 0x00	; 0
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	a8 ec       	ldi	r26, 0xC8	; 200
 504:	b2 e4       	ldi	r27, 0x42	; 66
 506:	8b 87       	std	Y+11, r24	; 0x0b
 508:	9c 87       	std	Y+12, r25	; 0x0c
 50a:	ad 87       	std	Y+13, r26	; 0x0d
 50c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 50e:	6b 85       	ldd	r22, Y+11	; 0x0b
 510:	7c 85       	ldd	r23, Y+12	; 0x0c
 512:	8d 85       	ldd	r24, Y+13	; 0x0d
 514:	9e 85       	ldd	r25, Y+14	; 0x0e
 516:	20 e0       	ldi	r18, 0x00	; 0
 518:	30 e0       	ldi	r19, 0x00	; 0
 51a:	4a e7       	ldi	r20, 0x7A	; 122
 51c:	53 e4       	ldi	r21, 0x43	; 67
 51e:	0e 94 7d 03 	call	0x6fa	; 0x6fa <__mulsf3>
 522:	dc 01       	movw	r26, r24
 524:	cb 01       	movw	r24, r22
 526:	8f 83       	std	Y+7, r24	; 0x07
 528:	98 87       	std	Y+8, r25	; 0x08
 52a:	a9 87       	std	Y+9, r26	; 0x09
 52c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
 52e:	6f 81       	ldd	r22, Y+7	; 0x07
 530:	78 85       	ldd	r23, Y+8	; 0x08
 532:	89 85       	ldd	r24, Y+9	; 0x09
 534:	9a 85       	ldd	r25, Y+10	; 0x0a
 536:	20 e0       	ldi	r18, 0x00	; 0
 538:	30 e0       	ldi	r19, 0x00	; 0
 53a:	40 e8       	ldi	r20, 0x80	; 128
 53c:	5f e3       	ldi	r21, 0x3F	; 63
 53e:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <__cmpsf2>
 542:	88 23       	and	r24, r24
 544:	2c f4       	brge	.+10     	; 0x550 <main+0x492>
		__ticks = 1;
 546:	81 e0       	ldi	r24, 0x01	; 1
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	9e 83       	std	Y+6, r25	; 0x06
 54c:	8d 83       	std	Y+5, r24	; 0x05
 54e:	3f c0       	rjmp	.+126    	; 0x5ce <main+0x510>
	else if (__tmp > 65535)
 550:	6f 81       	ldd	r22, Y+7	; 0x07
 552:	78 85       	ldd	r23, Y+8	; 0x08
 554:	89 85       	ldd	r24, Y+9	; 0x09
 556:	9a 85       	ldd	r25, Y+10	; 0x0a
 558:	20 e0       	ldi	r18, 0x00	; 0
 55a:	3f ef       	ldi	r19, 0xFF	; 255
 55c:	4f e7       	ldi	r20, 0x7F	; 127
 55e:	57 e4       	ldi	r21, 0x47	; 71
 560:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__gesf2>
 564:	18 16       	cp	r1, r24
 566:	4c f5       	brge	.+82     	; 0x5ba <main+0x4fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 568:	6b 85       	ldd	r22, Y+11	; 0x0b
 56a:	7c 85       	ldd	r23, Y+12	; 0x0c
 56c:	8d 85       	ldd	r24, Y+13	; 0x0d
 56e:	9e 85       	ldd	r25, Y+14	; 0x0e
 570:	20 e0       	ldi	r18, 0x00	; 0
 572:	30 e0       	ldi	r19, 0x00	; 0
 574:	40 e2       	ldi	r20, 0x20	; 32
 576:	51 e4       	ldi	r21, 0x41	; 65
 578:	0e 94 7d 03 	call	0x6fa	; 0x6fa <__mulsf3>
 57c:	dc 01       	movw	r26, r24
 57e:	cb 01       	movw	r24, r22
 580:	bc 01       	movw	r22, r24
 582:	cd 01       	movw	r24, r26
 584:	0e 94 00 03 	call	0x600	; 0x600 <__fixunssfsi>
 588:	dc 01       	movw	r26, r24
 58a:	cb 01       	movw	r24, r22
 58c:	9e 83       	std	Y+6, r25	; 0x06
 58e:	8d 83       	std	Y+5, r24	; 0x05
 590:	0f c0       	rjmp	.+30     	; 0x5b0 <main+0x4f2>
 592:	89 e1       	ldi	r24, 0x19	; 25
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	9c 83       	std	Y+4, r25	; 0x04
 598:	8b 83       	std	Y+3, r24	; 0x03
 59a:	8b 81       	ldd	r24, Y+3	; 0x03
 59c:	9c 81       	ldd	r25, Y+4	; 0x04
 59e:	01 97       	sbiw	r24, 0x01	; 1
 5a0:	f1 f7       	brne	.-4      	; 0x59e <main+0x4e0>
 5a2:	9c 83       	std	Y+4, r25	; 0x04
 5a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 5a6:	8d 81       	ldd	r24, Y+5	; 0x05
 5a8:	9e 81       	ldd	r25, Y+6	; 0x06
 5aa:	01 97       	sbiw	r24, 0x01	; 1
 5ac:	9e 83       	std	Y+6, r25	; 0x06
 5ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 5b0:	8d 81       	ldd	r24, Y+5	; 0x05
 5b2:	9e 81       	ldd	r25, Y+6	; 0x06
 5b4:	00 97       	sbiw	r24, 0x00	; 0
 5b6:	69 f7       	brne	.-38     	; 0x592 <main+0x4d4>
 5b8:	14 c0       	rjmp	.+40     	; 0x5e2 <main+0x524>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 5ba:	6f 81       	ldd	r22, Y+7	; 0x07
 5bc:	78 85       	ldd	r23, Y+8	; 0x08
 5be:	89 85       	ldd	r24, Y+9	; 0x09
 5c0:	9a 85       	ldd	r25, Y+10	; 0x0a
 5c2:	0e 94 00 03 	call	0x600	; 0x600 <__fixunssfsi>
 5c6:	dc 01       	movw	r26, r24
 5c8:	cb 01       	movw	r24, r22
 5ca:	9e 83       	std	Y+6, r25	; 0x06
 5cc:	8d 83       	std	Y+5, r24	; 0x05
 5ce:	8d 81       	ldd	r24, Y+5	; 0x05
 5d0:	9e 81       	ldd	r25, Y+6	; 0x06
 5d2:	9a 83       	std	Y+2, r25	; 0x02
 5d4:	89 83       	std	Y+1, r24	; 0x01
 5d6:	89 81       	ldd	r24, Y+1	; 0x01
 5d8:	9a 81       	ldd	r25, Y+2	; 0x02
 5da:	01 97       	sbiw	r24, 0x01	; 1
 5dc:	f1 f7       	brne	.-4      	; 0x5da <main+0x51c>
 5de:	9a 83       	std	Y+2, r25	; 0x02
 5e0:	89 83       	std	Y+1, r24	; 0x01
        {
            for(int i = 0; i < INDEX_SIZE; i++) {
                PORTC = indexArray[i];
                _delay_ms(100);
            }
            for(int i = INDEX_SIZE - 1; i >= 0; i--) {
 5e2:	89 ad       	ldd	r24, Y+57	; 0x39
 5e4:	9a ad       	ldd	r25, Y+58	; 0x3a
 5e6:	01 97       	sbiw	r24, 0x01	; 1
 5e8:	9a af       	std	Y+58, r25	; 0x3a
 5ea:	89 af       	std	Y+57, r24	; 0x39
 5ec:	89 ad       	ldd	r24, Y+57	; 0x39
 5ee:	9a ad       	ldd	r25, Y+58	; 0x3a
 5f0:	99 23       	and	r25, r25
 5f2:	0c f0       	brlt	.+2      	; 0x5f6 <main+0x538>
 5f4:	78 cf       	rjmp	.-272    	; 0x4e6 <main+0x428>
 5f6:	b3 cd       	rjmp	.-1178   	; 0x15e <main+0xa0>

000005f8 <__cmpsf2>:
 5f8:	2f d0       	rcall	.+94     	; 0x658 <__fp_cmp>
 5fa:	08 f4       	brcc	.+2      	; 0x5fe <__cmpsf2+0x6>
 5fc:	81 e0       	ldi	r24, 0x01	; 1
 5fe:	08 95       	ret

00000600 <__fixunssfsi>:
 600:	57 d0       	rcall	.+174    	; 0x6b0 <__fp_splitA>
 602:	88 f0       	brcs	.+34     	; 0x626 <__fixunssfsi+0x26>
 604:	9f 57       	subi	r25, 0x7F	; 127
 606:	90 f0       	brcs	.+36     	; 0x62c <__fixunssfsi+0x2c>
 608:	b9 2f       	mov	r27, r25
 60a:	99 27       	eor	r25, r25
 60c:	b7 51       	subi	r27, 0x17	; 23
 60e:	a0 f0       	brcs	.+40     	; 0x638 <__fixunssfsi+0x38>
 610:	d1 f0       	breq	.+52     	; 0x646 <__fixunssfsi+0x46>
 612:	66 0f       	add	r22, r22
 614:	77 1f       	adc	r23, r23
 616:	88 1f       	adc	r24, r24
 618:	99 1f       	adc	r25, r25
 61a:	1a f0       	brmi	.+6      	; 0x622 <__fixunssfsi+0x22>
 61c:	ba 95       	dec	r27
 61e:	c9 f7       	brne	.-14     	; 0x612 <__fixunssfsi+0x12>
 620:	12 c0       	rjmp	.+36     	; 0x646 <__fixunssfsi+0x46>
 622:	b1 30       	cpi	r27, 0x01	; 1
 624:	81 f0       	breq	.+32     	; 0x646 <__fixunssfsi+0x46>
 626:	5e d0       	rcall	.+188    	; 0x6e4 <__fp_zero>
 628:	b1 e0       	ldi	r27, 0x01	; 1
 62a:	08 95       	ret
 62c:	5b c0       	rjmp	.+182    	; 0x6e4 <__fp_zero>
 62e:	67 2f       	mov	r22, r23
 630:	78 2f       	mov	r23, r24
 632:	88 27       	eor	r24, r24
 634:	b8 5f       	subi	r27, 0xF8	; 248
 636:	39 f0       	breq	.+14     	; 0x646 <__fixunssfsi+0x46>
 638:	b9 3f       	cpi	r27, 0xF9	; 249
 63a:	cc f3       	brlt	.-14     	; 0x62e <__fixunssfsi+0x2e>
 63c:	86 95       	lsr	r24
 63e:	77 95       	ror	r23
 640:	67 95       	ror	r22
 642:	b3 95       	inc	r27
 644:	d9 f7       	brne	.-10     	; 0x63c <__fixunssfsi+0x3c>
 646:	3e f4       	brtc	.+14     	; 0x656 <__fixunssfsi+0x56>
 648:	90 95       	com	r25
 64a:	80 95       	com	r24
 64c:	70 95       	com	r23
 64e:	61 95       	neg	r22
 650:	7f 4f       	sbci	r23, 0xFF	; 255
 652:	8f 4f       	sbci	r24, 0xFF	; 255
 654:	9f 4f       	sbci	r25, 0xFF	; 255
 656:	08 95       	ret

00000658 <__fp_cmp>:
 658:	99 0f       	add	r25, r25
 65a:	00 08       	sbc	r0, r0
 65c:	55 0f       	add	r21, r21
 65e:	aa 0b       	sbc	r26, r26
 660:	e0 e8       	ldi	r30, 0x80	; 128
 662:	fe ef       	ldi	r31, 0xFE	; 254
 664:	16 16       	cp	r1, r22
 666:	17 06       	cpc	r1, r23
 668:	e8 07       	cpc	r30, r24
 66a:	f9 07       	cpc	r31, r25
 66c:	c0 f0       	brcs	.+48     	; 0x69e <__fp_cmp+0x46>
 66e:	12 16       	cp	r1, r18
 670:	13 06       	cpc	r1, r19
 672:	e4 07       	cpc	r30, r20
 674:	f5 07       	cpc	r31, r21
 676:	98 f0       	brcs	.+38     	; 0x69e <__fp_cmp+0x46>
 678:	62 1b       	sub	r22, r18
 67a:	73 0b       	sbc	r23, r19
 67c:	84 0b       	sbc	r24, r20
 67e:	95 0b       	sbc	r25, r21
 680:	39 f4       	brne	.+14     	; 0x690 <__fp_cmp+0x38>
 682:	0a 26       	eor	r0, r26
 684:	61 f0       	breq	.+24     	; 0x69e <__fp_cmp+0x46>
 686:	23 2b       	or	r18, r19
 688:	24 2b       	or	r18, r20
 68a:	25 2b       	or	r18, r21
 68c:	21 f4       	brne	.+8      	; 0x696 <__fp_cmp+0x3e>
 68e:	08 95       	ret
 690:	0a 26       	eor	r0, r26
 692:	09 f4       	brne	.+2      	; 0x696 <__fp_cmp+0x3e>
 694:	a1 40       	sbci	r26, 0x01	; 1
 696:	a6 95       	lsr	r26
 698:	8f ef       	ldi	r24, 0xFF	; 255
 69a:	81 1d       	adc	r24, r1
 69c:	81 1d       	adc	r24, r1
 69e:	08 95       	ret

000006a0 <__fp_split3>:
 6a0:	57 fd       	sbrc	r21, 7
 6a2:	90 58       	subi	r25, 0x80	; 128
 6a4:	44 0f       	add	r20, r20
 6a6:	55 1f       	adc	r21, r21
 6a8:	59 f0       	breq	.+22     	; 0x6c0 <__fp_splitA+0x10>
 6aa:	5f 3f       	cpi	r21, 0xFF	; 255
 6ac:	71 f0       	breq	.+28     	; 0x6ca <__fp_splitA+0x1a>
 6ae:	47 95       	ror	r20

000006b0 <__fp_splitA>:
 6b0:	88 0f       	add	r24, r24
 6b2:	97 fb       	bst	r25, 7
 6b4:	99 1f       	adc	r25, r25
 6b6:	61 f0       	breq	.+24     	; 0x6d0 <__fp_splitA+0x20>
 6b8:	9f 3f       	cpi	r25, 0xFF	; 255
 6ba:	79 f0       	breq	.+30     	; 0x6da <__fp_splitA+0x2a>
 6bc:	87 95       	ror	r24
 6be:	08 95       	ret
 6c0:	12 16       	cp	r1, r18
 6c2:	13 06       	cpc	r1, r19
 6c4:	14 06       	cpc	r1, r20
 6c6:	55 1f       	adc	r21, r21
 6c8:	f2 cf       	rjmp	.-28     	; 0x6ae <__fp_split3+0xe>
 6ca:	46 95       	lsr	r20
 6cc:	f1 df       	rcall	.-30     	; 0x6b0 <__fp_splitA>
 6ce:	08 c0       	rjmp	.+16     	; 0x6e0 <__fp_splitA+0x30>
 6d0:	16 16       	cp	r1, r22
 6d2:	17 06       	cpc	r1, r23
 6d4:	18 06       	cpc	r1, r24
 6d6:	99 1f       	adc	r25, r25
 6d8:	f1 cf       	rjmp	.-30     	; 0x6bc <__fp_splitA+0xc>
 6da:	86 95       	lsr	r24
 6dc:	71 05       	cpc	r23, r1
 6de:	61 05       	cpc	r22, r1
 6e0:	08 94       	sec
 6e2:	08 95       	ret

000006e4 <__fp_zero>:
 6e4:	e8 94       	clt

000006e6 <__fp_szero>:
 6e6:	bb 27       	eor	r27, r27
 6e8:	66 27       	eor	r22, r22
 6ea:	77 27       	eor	r23, r23
 6ec:	cb 01       	movw	r24, r22
 6ee:	97 f9       	bld	r25, 7
 6f0:	08 95       	ret

000006f2 <__gesf2>:
 6f2:	b2 df       	rcall	.-156    	; 0x658 <__fp_cmp>
 6f4:	08 f4       	brcc	.+2      	; 0x6f8 <__gesf2+0x6>
 6f6:	8f ef       	ldi	r24, 0xFF	; 255
 6f8:	08 95       	ret

000006fa <__mulsf3>:
 6fa:	0b d0       	rcall	.+22     	; 0x712 <__mulsf3x>
 6fc:	78 c0       	rjmp	.+240    	; 0x7ee <__fp_round>
 6fe:	69 d0       	rcall	.+210    	; 0x7d2 <__fp_pscA>
 700:	28 f0       	brcs	.+10     	; 0x70c <__mulsf3+0x12>
 702:	6e d0       	rcall	.+220    	; 0x7e0 <__fp_pscB>
 704:	18 f0       	brcs	.+6      	; 0x70c <__mulsf3+0x12>
 706:	95 23       	and	r25, r21
 708:	09 f0       	breq	.+2      	; 0x70c <__mulsf3+0x12>
 70a:	5a c0       	rjmp	.+180    	; 0x7c0 <__fp_inf>
 70c:	5f c0       	rjmp	.+190    	; 0x7cc <__fp_nan>
 70e:	11 24       	eor	r1, r1
 710:	ea cf       	rjmp	.-44     	; 0x6e6 <__fp_szero>

00000712 <__mulsf3x>:
 712:	c6 df       	rcall	.-116    	; 0x6a0 <__fp_split3>
 714:	a0 f3       	brcs	.-24     	; 0x6fe <__mulsf3+0x4>

00000716 <__mulsf3_pse>:
 716:	95 9f       	mul	r25, r21
 718:	d1 f3       	breq	.-12     	; 0x70e <__mulsf3+0x14>
 71a:	95 0f       	add	r25, r21
 71c:	50 e0       	ldi	r21, 0x00	; 0
 71e:	55 1f       	adc	r21, r21
 720:	62 9f       	mul	r22, r18
 722:	f0 01       	movw	r30, r0
 724:	72 9f       	mul	r23, r18
 726:	bb 27       	eor	r27, r27
 728:	f0 0d       	add	r31, r0
 72a:	b1 1d       	adc	r27, r1
 72c:	63 9f       	mul	r22, r19
 72e:	aa 27       	eor	r26, r26
 730:	f0 0d       	add	r31, r0
 732:	b1 1d       	adc	r27, r1
 734:	aa 1f       	adc	r26, r26
 736:	64 9f       	mul	r22, r20
 738:	66 27       	eor	r22, r22
 73a:	b0 0d       	add	r27, r0
 73c:	a1 1d       	adc	r26, r1
 73e:	66 1f       	adc	r22, r22
 740:	82 9f       	mul	r24, r18
 742:	22 27       	eor	r18, r18
 744:	b0 0d       	add	r27, r0
 746:	a1 1d       	adc	r26, r1
 748:	62 1f       	adc	r22, r18
 74a:	73 9f       	mul	r23, r19
 74c:	b0 0d       	add	r27, r0
 74e:	a1 1d       	adc	r26, r1
 750:	62 1f       	adc	r22, r18
 752:	83 9f       	mul	r24, r19
 754:	a0 0d       	add	r26, r0
 756:	61 1d       	adc	r22, r1
 758:	22 1f       	adc	r18, r18
 75a:	74 9f       	mul	r23, r20
 75c:	33 27       	eor	r19, r19
 75e:	a0 0d       	add	r26, r0
 760:	61 1d       	adc	r22, r1
 762:	23 1f       	adc	r18, r19
 764:	84 9f       	mul	r24, r20
 766:	60 0d       	add	r22, r0
 768:	21 1d       	adc	r18, r1
 76a:	82 2f       	mov	r24, r18
 76c:	76 2f       	mov	r23, r22
 76e:	6a 2f       	mov	r22, r26
 770:	11 24       	eor	r1, r1
 772:	9f 57       	subi	r25, 0x7F	; 127
 774:	50 40       	sbci	r21, 0x00	; 0
 776:	8a f0       	brmi	.+34     	; 0x79a <__mulsf3_pse+0x84>
 778:	e1 f0       	breq	.+56     	; 0x7b2 <__mulsf3_pse+0x9c>
 77a:	88 23       	and	r24, r24
 77c:	4a f0       	brmi	.+18     	; 0x790 <__mulsf3_pse+0x7a>
 77e:	ee 0f       	add	r30, r30
 780:	ff 1f       	adc	r31, r31
 782:	bb 1f       	adc	r27, r27
 784:	66 1f       	adc	r22, r22
 786:	77 1f       	adc	r23, r23
 788:	88 1f       	adc	r24, r24
 78a:	91 50       	subi	r25, 0x01	; 1
 78c:	50 40       	sbci	r21, 0x00	; 0
 78e:	a9 f7       	brne	.-22     	; 0x77a <__mulsf3_pse+0x64>
 790:	9e 3f       	cpi	r25, 0xFE	; 254
 792:	51 05       	cpc	r21, r1
 794:	70 f0       	brcs	.+28     	; 0x7b2 <__mulsf3_pse+0x9c>
 796:	14 c0       	rjmp	.+40     	; 0x7c0 <__fp_inf>
 798:	a6 cf       	rjmp	.-180    	; 0x6e6 <__fp_szero>
 79a:	5f 3f       	cpi	r21, 0xFF	; 255
 79c:	ec f3       	brlt	.-6      	; 0x798 <__mulsf3_pse+0x82>
 79e:	98 3e       	cpi	r25, 0xE8	; 232
 7a0:	dc f3       	brlt	.-10     	; 0x798 <__mulsf3_pse+0x82>
 7a2:	86 95       	lsr	r24
 7a4:	77 95       	ror	r23
 7a6:	67 95       	ror	r22
 7a8:	b7 95       	ror	r27
 7aa:	f7 95       	ror	r31
 7ac:	e7 95       	ror	r30
 7ae:	9f 5f       	subi	r25, 0xFF	; 255
 7b0:	c1 f7       	brne	.-16     	; 0x7a2 <__mulsf3_pse+0x8c>
 7b2:	fe 2b       	or	r31, r30
 7b4:	88 0f       	add	r24, r24
 7b6:	91 1d       	adc	r25, r1
 7b8:	96 95       	lsr	r25
 7ba:	87 95       	ror	r24
 7bc:	97 f9       	bld	r25, 7
 7be:	08 95       	ret

000007c0 <__fp_inf>:
 7c0:	97 f9       	bld	r25, 7
 7c2:	9f 67       	ori	r25, 0x7F	; 127
 7c4:	80 e8       	ldi	r24, 0x80	; 128
 7c6:	70 e0       	ldi	r23, 0x00	; 0
 7c8:	60 e0       	ldi	r22, 0x00	; 0
 7ca:	08 95       	ret

000007cc <__fp_nan>:
 7cc:	9f ef       	ldi	r25, 0xFF	; 255
 7ce:	80 ec       	ldi	r24, 0xC0	; 192
 7d0:	08 95       	ret

000007d2 <__fp_pscA>:
 7d2:	00 24       	eor	r0, r0
 7d4:	0a 94       	dec	r0
 7d6:	16 16       	cp	r1, r22
 7d8:	17 06       	cpc	r1, r23
 7da:	18 06       	cpc	r1, r24
 7dc:	09 06       	cpc	r0, r25
 7de:	08 95       	ret

000007e0 <__fp_pscB>:
 7e0:	00 24       	eor	r0, r0
 7e2:	0a 94       	dec	r0
 7e4:	12 16       	cp	r1, r18
 7e6:	13 06       	cpc	r1, r19
 7e8:	14 06       	cpc	r1, r20
 7ea:	05 06       	cpc	r0, r21
 7ec:	08 95       	ret

000007ee <__fp_round>:
 7ee:	09 2e       	mov	r0, r25
 7f0:	03 94       	inc	r0
 7f2:	00 0c       	add	r0, r0
 7f4:	11 f4       	brne	.+4      	; 0x7fa <__fp_round+0xc>
 7f6:	88 23       	and	r24, r24
 7f8:	52 f0       	brmi	.+20     	; 0x80e <__fp_round+0x20>
 7fa:	bb 0f       	add	r27, r27
 7fc:	40 f4       	brcc	.+16     	; 0x80e <__fp_round+0x20>
 7fe:	bf 2b       	or	r27, r31
 800:	11 f4       	brne	.+4      	; 0x806 <__fp_round+0x18>
 802:	60 ff       	sbrs	r22, 0
 804:	04 c0       	rjmp	.+8      	; 0x80e <__fp_round+0x20>
 806:	6f 5f       	subi	r22, 0xFF	; 255
 808:	7f 4f       	sbci	r23, 0xFF	; 255
 80a:	8f 4f       	sbci	r24, 0xFF	; 255
 80c:	9f 4f       	sbci	r25, 0xFF	; 255
 80e:	08 95       	ret

00000810 <_exit>:
 810:	f8 94       	cli

00000812 <__stop_program>:
 812:	ff cf       	rjmp	.-2      	; 0x812 <__stop_program>
