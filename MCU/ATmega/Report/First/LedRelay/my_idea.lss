
my_idea.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000056c  000005e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000056c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000528  00000000  00000000  000005ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000073a  00000000  00000000  00000b14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e6       	ldi	r30, 0x6C	; 108
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  b6:	0c 94 b4 02 	jmp	0x568	; 0x568 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <main>:
// ***********************************************************

#include <avr/io.h>              // Most basic include files
#include <util/delay.h>

int main(void) {
  be:	df 93       	push	r29
  c0:	cf 93       	push	r28
  c2:	cd b7       	in	r28, 0x3d	; 61
  c4:	de b7       	in	r29, 0x3e	; 62
  c6:	ae 97       	sbiw	r28, 0x2e	; 46
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	f8 94       	cli
  cc:	de bf       	out	0x3e, r29	; 62
  ce:	0f be       	out	0x3f, r0	; 63
  d0:	cd bf       	out	0x3d, r28	; 61
    DDRC = 0xFF;
  d2:	e4 e3       	ldi	r30, 0x34	; 52
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	8f ef       	ldi	r24, 0xFF	; 255
  d8:	80 83       	st	Z, r24
    PORTC = 0X00;
  da:	e5 e3       	ldi	r30, 0x35	; 53
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	10 82       	st	Z, r1
    char index[9] = {0b11111111, 0b01111111, 0b00111111, 
                     0b00011111, 0b00001111, 0b00000111, 
                     0b00000011, 0b00000001, 0b00000000
                    };
  e0:	ce 01       	movw	r24, r28
  e2:	81 96       	adiw	r24, 0x21	; 33
  e4:	9b a7       	std	Y+43, r25	; 0x2b
  e6:	8a a7       	std	Y+42, r24	; 0x2a
  e8:	e0 e0       	ldi	r30, 0x00	; 0
  ea:	f1 e0       	ldi	r31, 0x01	; 1
  ec:	fd a7       	std	Y+45, r31	; 0x2d
  ee:	ec a7       	std	Y+44, r30	; 0x2c
  f0:	f9 e0       	ldi	r31, 0x09	; 9
  f2:	fe a7       	std	Y+46, r31	; 0x2e
  f4:	ec a5       	ldd	r30, Y+44	; 0x2c
  f6:	fd a5       	ldd	r31, Y+45	; 0x2d
  f8:	00 80       	ld	r0, Z
  fa:	8c a5       	ldd	r24, Y+44	; 0x2c
  fc:	9d a5       	ldd	r25, Y+45	; 0x2d
  fe:	01 96       	adiw	r24, 0x01	; 1
 100:	9d a7       	std	Y+45, r25	; 0x2d
 102:	8c a7       	std	Y+44, r24	; 0x2c
 104:	ea a5       	ldd	r30, Y+42	; 0x2a
 106:	fb a5       	ldd	r31, Y+43	; 0x2b
 108:	00 82       	st	Z, r0
 10a:	8a a5       	ldd	r24, Y+42	; 0x2a
 10c:	9b a5       	ldd	r25, Y+43	; 0x2b
 10e:	01 96       	adiw	r24, 0x01	; 1
 110:	9b a7       	std	Y+43, r25	; 0x2b
 112:	8a a7       	std	Y+42, r24	; 0x2a
 114:	9e a5       	ldd	r25, Y+46	; 0x2e
 116:	91 50       	subi	r25, 0x01	; 1
 118:	9e a7       	std	Y+46, r25	; 0x2e
 11a:	ee a5       	ldd	r30, Y+46	; 0x2e
 11c:	ee 23       	and	r30, r30
 11e:	51 f7       	brne	.-44     	; 0xf4 <main+0x36>
    while(1) {             // Infinite loop; define here the
        for(int i = 0; i < 9; i++) {
 120:	18 a2       	std	Y+32, r1	; 0x20
 122:	1f 8e       	std	Y+31, r1	; 0x1f
 124:	82 c0       	rjmp	.+260    	; 0x22a <main+0x16c>
            PORTC = index[i];
 126:	a5 e3       	ldi	r26, 0x35	; 53
 128:	b0 e0       	ldi	r27, 0x00	; 0
 12a:	2f 8d       	ldd	r18, Y+31	; 0x1f
 12c:	38 a1       	ldd	r19, Y+32	; 0x20
 12e:	ce 01       	movw	r24, r28
 130:	81 96       	adiw	r24, 0x21	; 33
 132:	fc 01       	movw	r30, r24
 134:	e2 0f       	add	r30, r18
 136:	f3 1f       	adc	r31, r19
 138:	80 81       	ld	r24, Z
 13a:	8c 93       	st	X, r24
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	a8 e4       	ldi	r26, 0x48	; 72
 142:	b3 e4       	ldi	r27, 0x43	; 67
 144:	89 8f       	std	Y+25, r24	; 0x19
 146:	9a 8f       	std	Y+26, r25	; 0x1a
 148:	ab 8f       	std	Y+27, r26	; 0x1b
 14a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 14c:	69 8d       	ldd	r22, Y+25	; 0x19
 14e:	7a 8d       	ldd	r23, Y+26	; 0x1a
 150:	8b 8d       	ldd	r24, Y+27	; 0x1b
 152:	9c 8d       	ldd	r25, Y+28	; 0x1c
 154:	20 e0       	ldi	r18, 0x00	; 0
 156:	30 e0       	ldi	r19, 0x00	; 0
 158:	4a e7       	ldi	r20, 0x7A	; 122
 15a:	53 e4       	ldi	r21, 0x43	; 67
 15c:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
 160:	dc 01       	movw	r26, r24
 162:	cb 01       	movw	r24, r22
 164:	8d 8b       	std	Y+21, r24	; 0x15
 166:	9e 8b       	std	Y+22, r25	; 0x16
 168:	af 8b       	std	Y+23, r26	; 0x17
 16a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
 16c:	6d 89       	ldd	r22, Y+21	; 0x15
 16e:	7e 89       	ldd	r23, Y+22	; 0x16
 170:	8f 89       	ldd	r24, Y+23	; 0x17
 172:	98 8d       	ldd	r25, Y+24	; 0x18
 174:	20 e0       	ldi	r18, 0x00	; 0
 176:	30 e0       	ldi	r19, 0x00	; 0
 178:	40 e8       	ldi	r20, 0x80	; 128
 17a:	5f e3       	ldi	r21, 0x3F	; 63
 17c:	0e 94 a8 01 	call	0x350	; 0x350 <__cmpsf2>
 180:	88 23       	and	r24, r24
 182:	2c f4       	brge	.+10     	; 0x18e <main+0xd0>
		__ticks = 1;
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	9c 8b       	std	Y+20, r25	; 0x14
 18a:	8b 8b       	std	Y+19, r24	; 0x13
 18c:	3f c0       	rjmp	.+126    	; 0x20c <main+0x14e>
	else if (__tmp > 65535)
 18e:	6d 89       	ldd	r22, Y+21	; 0x15
 190:	7e 89       	ldd	r23, Y+22	; 0x16
 192:	8f 89       	ldd	r24, Y+23	; 0x17
 194:	98 8d       	ldd	r25, Y+24	; 0x18
 196:	20 e0       	ldi	r18, 0x00	; 0
 198:	3f ef       	ldi	r19, 0xFF	; 255
 19a:	4f e7       	ldi	r20, 0x7F	; 127
 19c:	57 e4       	ldi	r21, 0x47	; 71
 19e:	0e 94 25 02 	call	0x44a	; 0x44a <__gesf2>
 1a2:	18 16       	cp	r1, r24
 1a4:	4c f5       	brge	.+82     	; 0x1f8 <main+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1a6:	69 8d       	ldd	r22, Y+25	; 0x19
 1a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
 1aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
 1ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
 1ae:	20 e0       	ldi	r18, 0x00	; 0
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	40 e2       	ldi	r20, 0x20	; 32
 1b4:	51 e4       	ldi	r21, 0x41	; 65
 1b6:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
 1ba:	dc 01       	movw	r26, r24
 1bc:	cb 01       	movw	r24, r22
 1be:	bc 01       	movw	r22, r24
 1c0:	cd 01       	movw	r24, r26
 1c2:	0e 94 ac 01 	call	0x358	; 0x358 <__fixunssfsi>
 1c6:	dc 01       	movw	r26, r24
 1c8:	cb 01       	movw	r24, r22
 1ca:	9c 8b       	std	Y+20, r25	; 0x14
 1cc:	8b 8b       	std	Y+19, r24	; 0x13
 1ce:	0f c0       	rjmp	.+30     	; 0x1ee <main+0x130>
 1d0:	89 e1       	ldi	r24, 0x19	; 25
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	9a 8b       	std	Y+18, r25	; 0x12
 1d6:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1d8:	89 89       	ldd	r24, Y+17	; 0x11
 1da:	9a 89       	ldd	r25, Y+18	; 0x12
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <main+0x11e>
 1e0:	9a 8b       	std	Y+18, r25	; 0x12
 1e2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1e4:	8b 89       	ldd	r24, Y+19	; 0x13
 1e6:	9c 89       	ldd	r25, Y+20	; 0x14
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	9c 8b       	std	Y+20, r25	; 0x14
 1ec:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1ee:	8b 89       	ldd	r24, Y+19	; 0x13
 1f0:	9c 89       	ldd	r25, Y+20	; 0x14
 1f2:	00 97       	sbiw	r24, 0x00	; 0
 1f4:	69 f7       	brne	.-38     	; 0x1d0 <main+0x112>
 1f6:	14 c0       	rjmp	.+40     	; 0x220 <main+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 1f8:	6d 89       	ldd	r22, Y+21	; 0x15
 1fa:	7e 89       	ldd	r23, Y+22	; 0x16
 1fc:	8f 89       	ldd	r24, Y+23	; 0x17
 1fe:	98 8d       	ldd	r25, Y+24	; 0x18
 200:	0e 94 ac 01 	call	0x358	; 0x358 <__fixunssfsi>
 204:	dc 01       	movw	r26, r24
 206:	cb 01       	movw	r24, r22
 208:	9c 8b       	std	Y+20, r25	; 0x14
 20a:	8b 8b       	std	Y+19, r24	; 0x13
 20c:	8b 89       	ldd	r24, Y+19	; 0x13
 20e:	9c 89       	ldd	r25, Y+20	; 0x14
 210:	98 8b       	std	Y+16, r25	; 0x10
 212:	8f 87       	std	Y+15, r24	; 0x0f
 214:	8f 85       	ldd	r24, Y+15	; 0x0f
 216:	98 89       	ldd	r25, Y+16	; 0x10
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <main+0x15a>
 21c:	98 8b       	std	Y+16, r25	; 0x10
 21e:	8f 87       	std	Y+15, r24	; 0x0f
    char index[9] = {0b11111111, 0b01111111, 0b00111111, 
                     0b00011111, 0b00001111, 0b00000111, 
                     0b00000011, 0b00000001, 0b00000000
                    };
    while(1) {             // Infinite loop; define here the
        for(int i = 0; i < 9; i++) {
 220:	8f 8d       	ldd	r24, Y+31	; 0x1f
 222:	98 a1       	ldd	r25, Y+32	; 0x20
 224:	01 96       	adiw	r24, 0x01	; 1
 226:	98 a3       	std	Y+32, r25	; 0x20
 228:	8f 8f       	std	Y+31, r24	; 0x1f
 22a:	8f 8d       	ldd	r24, Y+31	; 0x1f
 22c:	98 a1       	ldd	r25, Y+32	; 0x20
 22e:	89 30       	cpi	r24, 0x09	; 9
 230:	91 05       	cpc	r25, r1
 232:	0c f4       	brge	.+2      	; 0x236 <main+0x178>
 234:	78 cf       	rjmp	.-272    	; 0x126 <main+0x68>
            PORTC = index[i];
            _delay_ms(200);
        }
        for(int i = 8; i >= 0; i--) {
 236:	88 e0       	ldi	r24, 0x08	; 8
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	9e 8f       	std	Y+30, r25	; 0x1e
 23c:	8d 8f       	std	Y+29, r24	; 0x1d
 23e:	82 c0       	rjmp	.+260    	; 0x344 <main+0x286>
            PORTC = index[i];
 240:	a5 e3       	ldi	r26, 0x35	; 53
 242:	b0 e0       	ldi	r27, 0x00	; 0
 244:	2d 8d       	ldd	r18, Y+29	; 0x1d
 246:	3e 8d       	ldd	r19, Y+30	; 0x1e
 248:	ce 01       	movw	r24, r28
 24a:	81 96       	adiw	r24, 0x21	; 33
 24c:	fc 01       	movw	r30, r24
 24e:	e2 0f       	add	r30, r18
 250:	f3 1f       	adc	r31, r19
 252:	80 81       	ld	r24, Z
 254:	8c 93       	st	X, r24
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	a8 e4       	ldi	r26, 0x48	; 72
 25c:	b3 e4       	ldi	r27, 0x43	; 67
 25e:	8b 87       	std	Y+11, r24	; 0x0b
 260:	9c 87       	std	Y+12, r25	; 0x0c
 262:	ad 87       	std	Y+13, r26	; 0x0d
 264:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 266:	6b 85       	ldd	r22, Y+11	; 0x0b
 268:	7c 85       	ldd	r23, Y+12	; 0x0c
 26a:	8d 85       	ldd	r24, Y+13	; 0x0d
 26c:	9e 85       	ldd	r25, Y+14	; 0x0e
 26e:	20 e0       	ldi	r18, 0x00	; 0
 270:	30 e0       	ldi	r19, 0x00	; 0
 272:	4a e7       	ldi	r20, 0x7A	; 122
 274:	53 e4       	ldi	r21, 0x43	; 67
 276:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
 27a:	dc 01       	movw	r26, r24
 27c:	cb 01       	movw	r24, r22
 27e:	8f 83       	std	Y+7, r24	; 0x07
 280:	98 87       	std	Y+8, r25	; 0x08
 282:	a9 87       	std	Y+9, r26	; 0x09
 284:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
 286:	6f 81       	ldd	r22, Y+7	; 0x07
 288:	78 85       	ldd	r23, Y+8	; 0x08
 28a:	89 85       	ldd	r24, Y+9	; 0x09
 28c:	9a 85       	ldd	r25, Y+10	; 0x0a
 28e:	20 e0       	ldi	r18, 0x00	; 0
 290:	30 e0       	ldi	r19, 0x00	; 0
 292:	40 e8       	ldi	r20, 0x80	; 128
 294:	5f e3       	ldi	r21, 0x3F	; 63
 296:	0e 94 a8 01 	call	0x350	; 0x350 <__cmpsf2>
 29a:	88 23       	and	r24, r24
 29c:	2c f4       	brge	.+10     	; 0x2a8 <main+0x1ea>
		__ticks = 1;
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	9e 83       	std	Y+6, r25	; 0x06
 2a4:	8d 83       	std	Y+5, r24	; 0x05
 2a6:	3f c0       	rjmp	.+126    	; 0x326 <main+0x268>
	else if (__tmp > 65535)
 2a8:	6f 81       	ldd	r22, Y+7	; 0x07
 2aa:	78 85       	ldd	r23, Y+8	; 0x08
 2ac:	89 85       	ldd	r24, Y+9	; 0x09
 2ae:	9a 85       	ldd	r25, Y+10	; 0x0a
 2b0:	20 e0       	ldi	r18, 0x00	; 0
 2b2:	3f ef       	ldi	r19, 0xFF	; 255
 2b4:	4f e7       	ldi	r20, 0x7F	; 127
 2b6:	57 e4       	ldi	r21, 0x47	; 71
 2b8:	0e 94 25 02 	call	0x44a	; 0x44a <__gesf2>
 2bc:	18 16       	cp	r1, r24
 2be:	4c f5       	brge	.+82     	; 0x312 <main+0x254>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 2c0:	6b 85       	ldd	r22, Y+11	; 0x0b
 2c2:	7c 85       	ldd	r23, Y+12	; 0x0c
 2c4:	8d 85       	ldd	r24, Y+13	; 0x0d
 2c6:	9e 85       	ldd	r25, Y+14	; 0x0e
 2c8:	20 e0       	ldi	r18, 0x00	; 0
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	40 e2       	ldi	r20, 0x20	; 32
 2ce:	51 e4       	ldi	r21, 0x41	; 65
 2d0:	0e 94 29 02 	call	0x452	; 0x452 <__mulsf3>
 2d4:	dc 01       	movw	r26, r24
 2d6:	cb 01       	movw	r24, r22
 2d8:	bc 01       	movw	r22, r24
 2da:	cd 01       	movw	r24, r26
 2dc:	0e 94 ac 01 	call	0x358	; 0x358 <__fixunssfsi>
 2e0:	dc 01       	movw	r26, r24
 2e2:	cb 01       	movw	r24, r22
 2e4:	9e 83       	std	Y+6, r25	; 0x06
 2e6:	8d 83       	std	Y+5, r24	; 0x05
 2e8:	0f c0       	rjmp	.+30     	; 0x308 <main+0x24a>
 2ea:	89 e1       	ldi	r24, 0x19	; 25
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	9c 83       	std	Y+4, r25	; 0x04
 2f0:	8b 83       	std	Y+3, r24	; 0x03
 2f2:	8b 81       	ldd	r24, Y+3	; 0x03
 2f4:	9c 81       	ldd	r25, Y+4	; 0x04
 2f6:	01 97       	sbiw	r24, 0x01	; 1
 2f8:	f1 f7       	brne	.-4      	; 0x2f6 <main+0x238>
 2fa:	9c 83       	std	Y+4, r25	; 0x04
 2fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2fe:	8d 81       	ldd	r24, Y+5	; 0x05
 300:	9e 81       	ldd	r25, Y+6	; 0x06
 302:	01 97       	sbiw	r24, 0x01	; 1
 304:	9e 83       	std	Y+6, r25	; 0x06
 306:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 308:	8d 81       	ldd	r24, Y+5	; 0x05
 30a:	9e 81       	ldd	r25, Y+6	; 0x06
 30c:	00 97       	sbiw	r24, 0x00	; 0
 30e:	69 f7       	brne	.-38     	; 0x2ea <main+0x22c>
 310:	14 c0       	rjmp	.+40     	; 0x33a <main+0x27c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 312:	6f 81       	ldd	r22, Y+7	; 0x07
 314:	78 85       	ldd	r23, Y+8	; 0x08
 316:	89 85       	ldd	r24, Y+9	; 0x09
 318:	9a 85       	ldd	r25, Y+10	; 0x0a
 31a:	0e 94 ac 01 	call	0x358	; 0x358 <__fixunssfsi>
 31e:	dc 01       	movw	r26, r24
 320:	cb 01       	movw	r24, r22
 322:	9e 83       	std	Y+6, r25	; 0x06
 324:	8d 83       	std	Y+5, r24	; 0x05
 326:	8d 81       	ldd	r24, Y+5	; 0x05
 328:	9e 81       	ldd	r25, Y+6	; 0x06
 32a:	9a 83       	std	Y+2, r25	; 0x02
 32c:	89 83       	std	Y+1, r24	; 0x01
 32e:	89 81       	ldd	r24, Y+1	; 0x01
 330:	9a 81       	ldd	r25, Y+2	; 0x02
 332:	01 97       	sbiw	r24, 0x01	; 1
 334:	f1 f7       	brne	.-4      	; 0x332 <main+0x274>
 336:	9a 83       	std	Y+2, r25	; 0x02
 338:	89 83       	std	Y+1, r24	; 0x01
    while(1) {             // Infinite loop; define here the
        for(int i = 0; i < 9; i++) {
            PORTC = index[i];
            _delay_ms(200);
        }
        for(int i = 8; i >= 0; i--) {
 33a:	8d 8d       	ldd	r24, Y+29	; 0x1d
 33c:	9e 8d       	ldd	r25, Y+30	; 0x1e
 33e:	01 97       	sbiw	r24, 0x01	; 1
 340:	9e 8f       	std	Y+30, r25	; 0x1e
 342:	8d 8f       	std	Y+29, r24	; 0x1d
 344:	8d 8d       	ldd	r24, Y+29	; 0x1d
 346:	9e 8d       	ldd	r25, Y+30	; 0x1e
 348:	99 23       	and	r25, r25
 34a:	0c f0       	brlt	.+2      	; 0x34e <main+0x290>
 34c:	79 cf       	rjmp	.-270    	; 0x240 <main+0x182>
 34e:	e8 ce       	rjmp	.-560    	; 0x120 <main+0x62>

00000350 <__cmpsf2>:
 350:	2f d0       	rcall	.+94     	; 0x3b0 <__fp_cmp>
 352:	08 f4       	brcc	.+2      	; 0x356 <__cmpsf2+0x6>
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	08 95       	ret

00000358 <__fixunssfsi>:
 358:	57 d0       	rcall	.+174    	; 0x408 <__fp_splitA>
 35a:	88 f0       	brcs	.+34     	; 0x37e <__fixunssfsi+0x26>
 35c:	9f 57       	subi	r25, 0x7F	; 127
 35e:	90 f0       	brcs	.+36     	; 0x384 <__fixunssfsi+0x2c>
 360:	b9 2f       	mov	r27, r25
 362:	99 27       	eor	r25, r25
 364:	b7 51       	subi	r27, 0x17	; 23
 366:	a0 f0       	brcs	.+40     	; 0x390 <__fixunssfsi+0x38>
 368:	d1 f0       	breq	.+52     	; 0x39e <__fixunssfsi+0x46>
 36a:	66 0f       	add	r22, r22
 36c:	77 1f       	adc	r23, r23
 36e:	88 1f       	adc	r24, r24
 370:	99 1f       	adc	r25, r25
 372:	1a f0       	brmi	.+6      	; 0x37a <__fixunssfsi+0x22>
 374:	ba 95       	dec	r27
 376:	c9 f7       	brne	.-14     	; 0x36a <__fixunssfsi+0x12>
 378:	12 c0       	rjmp	.+36     	; 0x39e <__fixunssfsi+0x46>
 37a:	b1 30       	cpi	r27, 0x01	; 1
 37c:	81 f0       	breq	.+32     	; 0x39e <__fixunssfsi+0x46>
 37e:	5e d0       	rcall	.+188    	; 0x43c <__fp_zero>
 380:	b1 e0       	ldi	r27, 0x01	; 1
 382:	08 95       	ret
 384:	5b c0       	rjmp	.+182    	; 0x43c <__fp_zero>
 386:	67 2f       	mov	r22, r23
 388:	78 2f       	mov	r23, r24
 38a:	88 27       	eor	r24, r24
 38c:	b8 5f       	subi	r27, 0xF8	; 248
 38e:	39 f0       	breq	.+14     	; 0x39e <__fixunssfsi+0x46>
 390:	b9 3f       	cpi	r27, 0xF9	; 249
 392:	cc f3       	brlt	.-14     	; 0x386 <__fixunssfsi+0x2e>
 394:	86 95       	lsr	r24
 396:	77 95       	ror	r23
 398:	67 95       	ror	r22
 39a:	b3 95       	inc	r27
 39c:	d9 f7       	brne	.-10     	; 0x394 <__fixunssfsi+0x3c>
 39e:	3e f4       	brtc	.+14     	; 0x3ae <__fixunssfsi+0x56>
 3a0:	90 95       	com	r25
 3a2:	80 95       	com	r24
 3a4:	70 95       	com	r23
 3a6:	61 95       	neg	r22
 3a8:	7f 4f       	sbci	r23, 0xFF	; 255
 3aa:	8f 4f       	sbci	r24, 0xFF	; 255
 3ac:	9f 4f       	sbci	r25, 0xFF	; 255
 3ae:	08 95       	ret

000003b0 <__fp_cmp>:
 3b0:	99 0f       	add	r25, r25
 3b2:	00 08       	sbc	r0, r0
 3b4:	55 0f       	add	r21, r21
 3b6:	aa 0b       	sbc	r26, r26
 3b8:	e0 e8       	ldi	r30, 0x80	; 128
 3ba:	fe ef       	ldi	r31, 0xFE	; 254
 3bc:	16 16       	cp	r1, r22
 3be:	17 06       	cpc	r1, r23
 3c0:	e8 07       	cpc	r30, r24
 3c2:	f9 07       	cpc	r31, r25
 3c4:	c0 f0       	brcs	.+48     	; 0x3f6 <__fp_cmp+0x46>
 3c6:	12 16       	cp	r1, r18
 3c8:	13 06       	cpc	r1, r19
 3ca:	e4 07       	cpc	r30, r20
 3cc:	f5 07       	cpc	r31, r21
 3ce:	98 f0       	brcs	.+38     	; 0x3f6 <__fp_cmp+0x46>
 3d0:	62 1b       	sub	r22, r18
 3d2:	73 0b       	sbc	r23, r19
 3d4:	84 0b       	sbc	r24, r20
 3d6:	95 0b       	sbc	r25, r21
 3d8:	39 f4       	brne	.+14     	; 0x3e8 <__fp_cmp+0x38>
 3da:	0a 26       	eor	r0, r26
 3dc:	61 f0       	breq	.+24     	; 0x3f6 <__fp_cmp+0x46>
 3de:	23 2b       	or	r18, r19
 3e0:	24 2b       	or	r18, r20
 3e2:	25 2b       	or	r18, r21
 3e4:	21 f4       	brne	.+8      	; 0x3ee <__fp_cmp+0x3e>
 3e6:	08 95       	ret
 3e8:	0a 26       	eor	r0, r26
 3ea:	09 f4       	brne	.+2      	; 0x3ee <__fp_cmp+0x3e>
 3ec:	a1 40       	sbci	r26, 0x01	; 1
 3ee:	a6 95       	lsr	r26
 3f0:	8f ef       	ldi	r24, 0xFF	; 255
 3f2:	81 1d       	adc	r24, r1
 3f4:	81 1d       	adc	r24, r1
 3f6:	08 95       	ret

000003f8 <__fp_split3>:
 3f8:	57 fd       	sbrc	r21, 7
 3fa:	90 58       	subi	r25, 0x80	; 128
 3fc:	44 0f       	add	r20, r20
 3fe:	55 1f       	adc	r21, r21
 400:	59 f0       	breq	.+22     	; 0x418 <__fp_splitA+0x10>
 402:	5f 3f       	cpi	r21, 0xFF	; 255
 404:	71 f0       	breq	.+28     	; 0x422 <__fp_splitA+0x1a>
 406:	47 95       	ror	r20

00000408 <__fp_splitA>:
 408:	88 0f       	add	r24, r24
 40a:	97 fb       	bst	r25, 7
 40c:	99 1f       	adc	r25, r25
 40e:	61 f0       	breq	.+24     	; 0x428 <__fp_splitA+0x20>
 410:	9f 3f       	cpi	r25, 0xFF	; 255
 412:	79 f0       	breq	.+30     	; 0x432 <__fp_splitA+0x2a>
 414:	87 95       	ror	r24
 416:	08 95       	ret
 418:	12 16       	cp	r1, r18
 41a:	13 06       	cpc	r1, r19
 41c:	14 06       	cpc	r1, r20
 41e:	55 1f       	adc	r21, r21
 420:	f2 cf       	rjmp	.-28     	; 0x406 <__fp_split3+0xe>
 422:	46 95       	lsr	r20
 424:	f1 df       	rcall	.-30     	; 0x408 <__fp_splitA>
 426:	08 c0       	rjmp	.+16     	; 0x438 <__fp_splitA+0x30>
 428:	16 16       	cp	r1, r22
 42a:	17 06       	cpc	r1, r23
 42c:	18 06       	cpc	r1, r24
 42e:	99 1f       	adc	r25, r25
 430:	f1 cf       	rjmp	.-30     	; 0x414 <__fp_splitA+0xc>
 432:	86 95       	lsr	r24
 434:	71 05       	cpc	r23, r1
 436:	61 05       	cpc	r22, r1
 438:	08 94       	sec
 43a:	08 95       	ret

0000043c <__fp_zero>:
 43c:	e8 94       	clt

0000043e <__fp_szero>:
 43e:	bb 27       	eor	r27, r27
 440:	66 27       	eor	r22, r22
 442:	77 27       	eor	r23, r23
 444:	cb 01       	movw	r24, r22
 446:	97 f9       	bld	r25, 7
 448:	08 95       	ret

0000044a <__gesf2>:
 44a:	b2 df       	rcall	.-156    	; 0x3b0 <__fp_cmp>
 44c:	08 f4       	brcc	.+2      	; 0x450 <__gesf2+0x6>
 44e:	8f ef       	ldi	r24, 0xFF	; 255
 450:	08 95       	ret

00000452 <__mulsf3>:
 452:	0b d0       	rcall	.+22     	; 0x46a <__mulsf3x>
 454:	78 c0       	rjmp	.+240    	; 0x546 <__fp_round>
 456:	69 d0       	rcall	.+210    	; 0x52a <__fp_pscA>
 458:	28 f0       	brcs	.+10     	; 0x464 <__mulsf3+0x12>
 45a:	6e d0       	rcall	.+220    	; 0x538 <__fp_pscB>
 45c:	18 f0       	brcs	.+6      	; 0x464 <__mulsf3+0x12>
 45e:	95 23       	and	r25, r21
 460:	09 f0       	breq	.+2      	; 0x464 <__mulsf3+0x12>
 462:	5a c0       	rjmp	.+180    	; 0x518 <__fp_inf>
 464:	5f c0       	rjmp	.+190    	; 0x524 <__fp_nan>
 466:	11 24       	eor	r1, r1
 468:	ea cf       	rjmp	.-44     	; 0x43e <__fp_szero>

0000046a <__mulsf3x>:
 46a:	c6 df       	rcall	.-116    	; 0x3f8 <__fp_split3>
 46c:	a0 f3       	brcs	.-24     	; 0x456 <__mulsf3+0x4>

0000046e <__mulsf3_pse>:
 46e:	95 9f       	mul	r25, r21
 470:	d1 f3       	breq	.-12     	; 0x466 <__mulsf3+0x14>
 472:	95 0f       	add	r25, r21
 474:	50 e0       	ldi	r21, 0x00	; 0
 476:	55 1f       	adc	r21, r21
 478:	62 9f       	mul	r22, r18
 47a:	f0 01       	movw	r30, r0
 47c:	72 9f       	mul	r23, r18
 47e:	bb 27       	eor	r27, r27
 480:	f0 0d       	add	r31, r0
 482:	b1 1d       	adc	r27, r1
 484:	63 9f       	mul	r22, r19
 486:	aa 27       	eor	r26, r26
 488:	f0 0d       	add	r31, r0
 48a:	b1 1d       	adc	r27, r1
 48c:	aa 1f       	adc	r26, r26
 48e:	64 9f       	mul	r22, r20
 490:	66 27       	eor	r22, r22
 492:	b0 0d       	add	r27, r0
 494:	a1 1d       	adc	r26, r1
 496:	66 1f       	adc	r22, r22
 498:	82 9f       	mul	r24, r18
 49a:	22 27       	eor	r18, r18
 49c:	b0 0d       	add	r27, r0
 49e:	a1 1d       	adc	r26, r1
 4a0:	62 1f       	adc	r22, r18
 4a2:	73 9f       	mul	r23, r19
 4a4:	b0 0d       	add	r27, r0
 4a6:	a1 1d       	adc	r26, r1
 4a8:	62 1f       	adc	r22, r18
 4aa:	83 9f       	mul	r24, r19
 4ac:	a0 0d       	add	r26, r0
 4ae:	61 1d       	adc	r22, r1
 4b0:	22 1f       	adc	r18, r18
 4b2:	74 9f       	mul	r23, r20
 4b4:	33 27       	eor	r19, r19
 4b6:	a0 0d       	add	r26, r0
 4b8:	61 1d       	adc	r22, r1
 4ba:	23 1f       	adc	r18, r19
 4bc:	84 9f       	mul	r24, r20
 4be:	60 0d       	add	r22, r0
 4c0:	21 1d       	adc	r18, r1
 4c2:	82 2f       	mov	r24, r18
 4c4:	76 2f       	mov	r23, r22
 4c6:	6a 2f       	mov	r22, r26
 4c8:	11 24       	eor	r1, r1
 4ca:	9f 57       	subi	r25, 0x7F	; 127
 4cc:	50 40       	sbci	r21, 0x00	; 0
 4ce:	8a f0       	brmi	.+34     	; 0x4f2 <__mulsf3_pse+0x84>
 4d0:	e1 f0       	breq	.+56     	; 0x50a <__mulsf3_pse+0x9c>
 4d2:	88 23       	and	r24, r24
 4d4:	4a f0       	brmi	.+18     	; 0x4e8 <__mulsf3_pse+0x7a>
 4d6:	ee 0f       	add	r30, r30
 4d8:	ff 1f       	adc	r31, r31
 4da:	bb 1f       	adc	r27, r27
 4dc:	66 1f       	adc	r22, r22
 4de:	77 1f       	adc	r23, r23
 4e0:	88 1f       	adc	r24, r24
 4e2:	91 50       	subi	r25, 0x01	; 1
 4e4:	50 40       	sbci	r21, 0x00	; 0
 4e6:	a9 f7       	brne	.-22     	; 0x4d2 <__mulsf3_pse+0x64>
 4e8:	9e 3f       	cpi	r25, 0xFE	; 254
 4ea:	51 05       	cpc	r21, r1
 4ec:	70 f0       	brcs	.+28     	; 0x50a <__mulsf3_pse+0x9c>
 4ee:	14 c0       	rjmp	.+40     	; 0x518 <__fp_inf>
 4f0:	a6 cf       	rjmp	.-180    	; 0x43e <__fp_szero>
 4f2:	5f 3f       	cpi	r21, 0xFF	; 255
 4f4:	ec f3       	brlt	.-6      	; 0x4f0 <__mulsf3_pse+0x82>
 4f6:	98 3e       	cpi	r25, 0xE8	; 232
 4f8:	dc f3       	brlt	.-10     	; 0x4f0 <__mulsf3_pse+0x82>
 4fa:	86 95       	lsr	r24
 4fc:	77 95       	ror	r23
 4fe:	67 95       	ror	r22
 500:	b7 95       	ror	r27
 502:	f7 95       	ror	r31
 504:	e7 95       	ror	r30
 506:	9f 5f       	subi	r25, 0xFF	; 255
 508:	c1 f7       	brne	.-16     	; 0x4fa <__mulsf3_pse+0x8c>
 50a:	fe 2b       	or	r31, r30
 50c:	88 0f       	add	r24, r24
 50e:	91 1d       	adc	r25, r1
 510:	96 95       	lsr	r25
 512:	87 95       	ror	r24
 514:	97 f9       	bld	r25, 7
 516:	08 95       	ret

00000518 <__fp_inf>:
 518:	97 f9       	bld	r25, 7
 51a:	9f 67       	ori	r25, 0x7F	; 127
 51c:	80 e8       	ldi	r24, 0x80	; 128
 51e:	70 e0       	ldi	r23, 0x00	; 0
 520:	60 e0       	ldi	r22, 0x00	; 0
 522:	08 95       	ret

00000524 <__fp_nan>:
 524:	9f ef       	ldi	r25, 0xFF	; 255
 526:	80 ec       	ldi	r24, 0xC0	; 192
 528:	08 95       	ret

0000052a <__fp_pscA>:
 52a:	00 24       	eor	r0, r0
 52c:	0a 94       	dec	r0
 52e:	16 16       	cp	r1, r22
 530:	17 06       	cpc	r1, r23
 532:	18 06       	cpc	r1, r24
 534:	09 06       	cpc	r0, r25
 536:	08 95       	ret

00000538 <__fp_pscB>:
 538:	00 24       	eor	r0, r0
 53a:	0a 94       	dec	r0
 53c:	12 16       	cp	r1, r18
 53e:	13 06       	cpc	r1, r19
 540:	14 06       	cpc	r1, r20
 542:	05 06       	cpc	r0, r21
 544:	08 95       	ret

00000546 <__fp_round>:
 546:	09 2e       	mov	r0, r25
 548:	03 94       	inc	r0
 54a:	00 0c       	add	r0, r0
 54c:	11 f4       	brne	.+4      	; 0x552 <__fp_round+0xc>
 54e:	88 23       	and	r24, r24
 550:	52 f0       	brmi	.+20     	; 0x566 <__fp_round+0x20>
 552:	bb 0f       	add	r27, r27
 554:	40 f4       	brcc	.+16     	; 0x566 <__fp_round+0x20>
 556:	bf 2b       	or	r27, r31
 558:	11 f4       	brne	.+4      	; 0x55e <__fp_round+0x18>
 55a:	60 ff       	sbrs	r22, 0
 55c:	04 c0       	rjmp	.+8      	; 0x566 <__fp_round+0x20>
 55e:	6f 5f       	subi	r22, 0xFF	; 255
 560:	7f 4f       	sbci	r23, 0xFF	; 255
 562:	8f 4f       	sbci	r24, 0xFF	; 255
 564:	9f 4f       	sbci	r25, 0xFF	; 255
 566:	08 95       	ret

00000568 <_exit>:
 568:	f8 94       	cli

0000056a <__stop_program>:
 56a:	ff cf       	rjmp	.-2      	; 0x56a <__stop_program>
