
my_idea.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000812  00000886  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000812  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         0000075c  00000000  00000000  00000890  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000074b  00000000  00000000  00000fec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e1       	ldi	r30, 0x12	; 18
  a0:	f8 e0       	ldi	r31, 0x08	; 8
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  b6:	0c 94 07 04 	jmp	0x80e	; 0x80e <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <main>:

#include <avr/io.h>
#include <util/delay.h>
#define LED_CTRL_INDEX 9

int main(void) {
  be:	df 93       	push	r29
  c0:	cf 93       	push	r28
  c2:	cd b7       	in	r28, 0x3d	; 61
  c4:	de b7       	in	r29, 0x3e	; 62
  c6:	cf 54       	subi	r28, 0x4F	; 79
  c8:	d0 40       	sbci	r29, 0x00	; 0
  ca:	0f b6       	in	r0, 0x3f	; 63
  cc:	f8 94       	cli
  ce:	de bf       	out	0x3e, r29	; 62
  d0:	0f be       	out	0x3f, r0	; 63
  d2:	cd bf       	out	0x3d, r28	; 61
    /* Define ports and value */
    DDRC = 0xFF;
  d4:	e4 e3       	ldi	r30, 0x34	; 52
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	8f ef       	ldi	r24, 0xFF	; 255
  da:	80 83       	st	Z, r24
    char index;
    char indexArray[LED_CTRL_INDEX] = {  0b11111111, 0b11111110, 0b11111100, // 0xFF, 0xFE, 0xFC
                                         0b11111000, 0b11110000, 0b11100000, // 0xF8, 0xF0, 0xE0
                                         0b11000000, 0b10000000, 0b00000000  // 0xC0, 0x80, 0x00
                                      };
  dc:	ce 01       	movw	r24, r28
  de:	8e 5b       	subi	r24, 0xBE	; 190
  e0:	9f 4f       	sbci	r25, 0xFF	; 255
  e2:	2d 96       	adiw	r28, 0x0d	; 13
  e4:	9f af       	std	Y+63, r25	; 0x3f
  e6:	8e af       	std	Y+62, r24	; 0x3e
  e8:	2d 97       	sbiw	r28, 0x0d	; 13
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	91 e0       	ldi	r25, 0x01	; 1
  ee:	2f 96       	adiw	r28, 0x0f	; 15
  f0:	9f af       	std	Y+63, r25	; 0x3f
  f2:	8e af       	std	Y+62, r24	; 0x3e
  f4:	2f 97       	sbiw	r28, 0x0f	; 15
  f6:	99 e0       	ldi	r25, 0x09	; 9
  f8:	60 96       	adiw	r28, 0x10	; 16
  fa:	9f af       	std	Y+63, r25	; 0x3f
  fc:	60 97       	sbiw	r28, 0x10	; 16
  fe:	2f 96       	adiw	r28, 0x0f	; 15
 100:	ee ad       	ldd	r30, Y+62	; 0x3e
 102:	ff ad       	ldd	r31, Y+63	; 0x3f
 104:	2f 97       	sbiw	r28, 0x0f	; 15
 106:	00 80       	ld	r0, Z
 108:	2f 96       	adiw	r28, 0x0f	; 15
 10a:	8e ad       	ldd	r24, Y+62	; 0x3e
 10c:	9f ad       	ldd	r25, Y+63	; 0x3f
 10e:	2f 97       	sbiw	r28, 0x0f	; 15
 110:	01 96       	adiw	r24, 0x01	; 1
 112:	2f 96       	adiw	r28, 0x0f	; 15
 114:	9f af       	std	Y+63, r25	; 0x3f
 116:	8e af       	std	Y+62, r24	; 0x3e
 118:	2f 97       	sbiw	r28, 0x0f	; 15
 11a:	2d 96       	adiw	r28, 0x0d	; 13
 11c:	ee ad       	ldd	r30, Y+62	; 0x3e
 11e:	ff ad       	ldd	r31, Y+63	; 0x3f
 120:	2d 97       	sbiw	r28, 0x0d	; 13
 122:	00 82       	st	Z, r0
 124:	2d 96       	adiw	r28, 0x0d	; 13
 126:	8e ad       	ldd	r24, Y+62	; 0x3e
 128:	9f ad       	ldd	r25, Y+63	; 0x3f
 12a:	2d 97       	sbiw	r28, 0x0d	; 13
 12c:	01 96       	adiw	r24, 0x01	; 1
 12e:	2d 96       	adiw	r28, 0x0d	; 13
 130:	9f af       	std	Y+63, r25	; 0x3f
 132:	8e af       	std	Y+62, r24	; 0x3e
 134:	2d 97       	sbiw	r28, 0x0d	; 13
 136:	60 96       	adiw	r28, 0x10	; 16
 138:	9f ad       	ldd	r25, Y+63	; 0x3f
 13a:	60 97       	sbiw	r28, 0x10	; 16
 13c:	91 50       	subi	r25, 0x01	; 1
 13e:	60 96       	adiw	r28, 0x10	; 16
 140:	9f af       	std	Y+63, r25	; 0x3f
 142:	60 97       	sbiw	r28, 0x10	; 16
 144:	60 96       	adiw	r28, 0x10	; 16
 146:	ef ad       	ldd	r30, Y+63	; 0x3f
 148:	60 97       	sbiw	r28, 0x10	; 16
 14a:	ee 23       	and	r30, r30
 14c:	c1 f6       	brne	.-80     	; 0xfe <main+0x40>

    /* Initial setting (All LED off) */
    PORTC = 0XFF;
 14e:	e5 e3       	ldi	r30, 0x35	; 53
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	8f ef       	ldi	r24, 0xFF	; 255
 154:	80 83       	st	Z, r24

    while(1) {
        index = 0xFF;
 156:	fe 01       	movw	r30, r28
 158:	ef 5b       	subi	r30, 0xBF	; 191
 15a:	ff 4f       	sbci	r31, 0xFF	; 255
 15c:	8f ef       	ldi	r24, 0xFF	; 255
 15e:	80 83       	st	Z, r24
        /* Use bit-shift operator */ 
        for(int i = 0; i < LED_CTRL_INDEX; i++) {
 160:	fe 01       	movw	r30, r28
 162:	ff 96       	adiw	r30, 0x3f	; 63
 164:	11 82       	std	Z+1, r1	; 0x01
 166:	10 82       	st	Z, r1
 168:	8b c0       	rjmp	.+278    	; 0x280 <main+0x1c2>
            PORTC = index;
 16a:	a5 e3       	ldi	r26, 0x35	; 53
 16c:	b0 e0       	ldi	r27, 0x00	; 0
 16e:	fe 01       	movw	r30, r28
 170:	ef 5b       	subi	r30, 0xBF	; 191
 172:	ff 4f       	sbci	r31, 0xFF	; 255
 174:	80 81       	ld	r24, Z
 176:	8c 93       	st	X, r24
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	a8 ec       	ldi	r26, 0xC8	; 200
 17e:	b2 e4       	ldi	r27, 0x42	; 66
 180:	8d ab       	std	Y+53, r24	; 0x35
 182:	9e ab       	std	Y+54, r25	; 0x36
 184:	af ab       	std	Y+55, r26	; 0x37
 186:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 188:	6d a9       	ldd	r22, Y+53	; 0x35
 18a:	7e a9       	ldd	r23, Y+54	; 0x36
 18c:	8f a9       	ldd	r24, Y+55	; 0x37
 18e:	98 ad       	ldd	r25, Y+56	; 0x38
 190:	20 e0       	ldi	r18, 0x00	; 0
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	4a e7       	ldi	r20, 0x7A	; 122
 196:	53 e4       	ldi	r21, 0x43	; 67
 198:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <__mulsf3>
 19c:	dc 01       	movw	r26, r24
 19e:	cb 01       	movw	r24, r22
 1a0:	89 ab       	std	Y+49, r24	; 0x31
 1a2:	9a ab       	std	Y+50, r25	; 0x32
 1a4:	ab ab       	std	Y+51, r26	; 0x33
 1a6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
 1a8:	69 a9       	ldd	r22, Y+49	; 0x31
 1aa:	7a a9       	ldd	r23, Y+50	; 0x32
 1ac:	8b a9       	ldd	r24, Y+51	; 0x33
 1ae:	9c a9       	ldd	r25, Y+52	; 0x34
 1b0:	20 e0       	ldi	r18, 0x00	; 0
 1b2:	30 e0       	ldi	r19, 0x00	; 0
 1b4:	40 e8       	ldi	r20, 0x80	; 128
 1b6:	5f e3       	ldi	r21, 0x3F	; 63
 1b8:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__cmpsf2>
 1bc:	88 23       	and	r24, r24
 1be:	2c f4       	brge	.+10     	; 0x1ca <main+0x10c>
		__ticks = 1;
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	98 ab       	std	Y+48, r25	; 0x30
 1c6:	8f a7       	std	Y+47, r24	; 0x2f
 1c8:	3f c0       	rjmp	.+126    	; 0x248 <main+0x18a>
	else if (__tmp > 65535)
 1ca:	69 a9       	ldd	r22, Y+49	; 0x31
 1cc:	7a a9       	ldd	r23, Y+50	; 0x32
 1ce:	8b a9       	ldd	r24, Y+51	; 0x33
 1d0:	9c a9       	ldd	r25, Y+52	; 0x34
 1d2:	20 e0       	ldi	r18, 0x00	; 0
 1d4:	3f ef       	ldi	r19, 0xFF	; 255
 1d6:	4f e7       	ldi	r20, 0x7F	; 127
 1d8:	57 e4       	ldi	r21, 0x47	; 71
 1da:	0e 94 78 03 	call	0x6f0	; 0x6f0 <__gesf2>
 1de:	18 16       	cp	r1, r24
 1e0:	4c f5       	brge	.+82     	; 0x234 <main+0x176>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1e2:	6d a9       	ldd	r22, Y+53	; 0x35
 1e4:	7e a9       	ldd	r23, Y+54	; 0x36
 1e6:	8f a9       	ldd	r24, Y+55	; 0x37
 1e8:	98 ad       	ldd	r25, Y+56	; 0x38
 1ea:	20 e0       	ldi	r18, 0x00	; 0
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	40 e2       	ldi	r20, 0x20	; 32
 1f0:	51 e4       	ldi	r21, 0x41	; 65
 1f2:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <__mulsf3>
 1f6:	dc 01       	movw	r26, r24
 1f8:	cb 01       	movw	r24, r22
 1fa:	bc 01       	movw	r22, r24
 1fc:	cd 01       	movw	r24, r26
 1fe:	0e 94 ff 02 	call	0x5fe	; 0x5fe <__fixunssfsi>
 202:	dc 01       	movw	r26, r24
 204:	cb 01       	movw	r24, r22
 206:	98 ab       	std	Y+48, r25	; 0x30
 208:	8f a7       	std	Y+47, r24	; 0x2f
 20a:	0f c0       	rjmp	.+30     	; 0x22a <main+0x16c>
 20c:	89 e1       	ldi	r24, 0x19	; 25
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	9e a7       	std	Y+46, r25	; 0x2e
 212:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 214:	8d a5       	ldd	r24, Y+45	; 0x2d
 216:	9e a5       	ldd	r25, Y+46	; 0x2e
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <main+0x15a>
 21c:	9e a7       	std	Y+46, r25	; 0x2e
 21e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 220:	8f a5       	ldd	r24, Y+47	; 0x2f
 222:	98 a9       	ldd	r25, Y+48	; 0x30
 224:	01 97       	sbiw	r24, 0x01	; 1
 226:	98 ab       	std	Y+48, r25	; 0x30
 228:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 22a:	8f a5       	ldd	r24, Y+47	; 0x2f
 22c:	98 a9       	ldd	r25, Y+48	; 0x30
 22e:	00 97       	sbiw	r24, 0x00	; 0
 230:	69 f7       	brne	.-38     	; 0x20c <main+0x14e>
 232:	14 c0       	rjmp	.+40     	; 0x25c <main+0x19e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 234:	69 a9       	ldd	r22, Y+49	; 0x31
 236:	7a a9       	ldd	r23, Y+50	; 0x32
 238:	8b a9       	ldd	r24, Y+51	; 0x33
 23a:	9c a9       	ldd	r25, Y+52	; 0x34
 23c:	0e 94 ff 02 	call	0x5fe	; 0x5fe <__fixunssfsi>
 240:	dc 01       	movw	r26, r24
 242:	cb 01       	movw	r24, r22
 244:	98 ab       	std	Y+48, r25	; 0x30
 246:	8f a7       	std	Y+47, r24	; 0x2f
 248:	8f a5       	ldd	r24, Y+47	; 0x2f
 24a:	98 a9       	ldd	r25, Y+48	; 0x30
 24c:	9c a7       	std	Y+44, r25	; 0x2c
 24e:	8b a7       	std	Y+43, r24	; 0x2b
 250:	8b a5       	ldd	r24, Y+43	; 0x2b
 252:	9c a5       	ldd	r25, Y+44	; 0x2c
 254:	01 97       	sbiw	r24, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <main+0x196>
 258:	9c a7       	std	Y+44, r25	; 0x2c
 25a:	8b a7       	std	Y+43, r24	; 0x2b
            _delay_ms(100);
            index <<= 1;
 25c:	de 01       	movw	r26, r28
 25e:	af 5b       	subi	r26, 0xBF	; 191
 260:	bf 4f       	sbci	r27, 0xFF	; 255
 262:	fe 01       	movw	r30, r28
 264:	ef 5b       	subi	r30, 0xBF	; 191
 266:	ff 4f       	sbci	r31, 0xFF	; 255
 268:	80 81       	ld	r24, Z
 26a:	88 0f       	add	r24, r24
 26c:	8c 93       	st	X, r24
    PORTC = 0XFF;

    while(1) {
        index = 0xFF;
        /* Use bit-shift operator */ 
        for(int i = 0; i < LED_CTRL_INDEX; i++) {
 26e:	fe 01       	movw	r30, r28
 270:	ff 96       	adiw	r30, 0x3f	; 63
 272:	80 81       	ld	r24, Z
 274:	91 81       	ldd	r25, Z+1	; 0x01
 276:	01 96       	adiw	r24, 0x01	; 1
 278:	fe 01       	movw	r30, r28
 27a:	ff 96       	adiw	r30, 0x3f	; 63
 27c:	91 83       	std	Z+1, r25	; 0x01
 27e:	80 83       	st	Z, r24
 280:	fe 01       	movw	r30, r28
 282:	ff 96       	adiw	r30, 0x3f	; 63
 284:	80 81       	ld	r24, Z
 286:	91 81       	ldd	r25, Z+1	; 0x01
 288:	89 30       	cpi	r24, 0x09	; 9
 28a:	91 05       	cpc	r25, r1
 28c:	0c f4       	brge	.+2      	; 0x290 <main+0x1d2>
 28e:	6d cf       	rjmp	.-294    	; 0x16a <main+0xac>
            PORTC = index;
            _delay_ms(100);
            index <<= 1;
        }
        index = 0x7F;
 290:	fe 01       	movw	r30, r28
 292:	ef 5b       	subi	r30, 0xBF	; 191
 294:	ff 4f       	sbci	r31, 0xFF	; 255
 296:	8f e7       	ldi	r24, 0x7F	; 127
 298:	80 83       	st	Z, r24
        for(int i = 0; i < LED_CTRL_INDEX - 1; i++) {
 29a:	1e ae       	std	Y+62, r1	; 0x3e
 29c:	1d ae       	std	Y+61, r1	; 0x3d
 29e:	88 c0       	rjmp	.+272    	; 0x3b0 <main+0x2f2>
            PORTC = ~index;
 2a0:	a5 e3       	ldi	r26, 0x35	; 53
 2a2:	b0 e0       	ldi	r27, 0x00	; 0
 2a4:	fe 01       	movw	r30, r28
 2a6:	ef 5b       	subi	r30, 0xBF	; 191
 2a8:	ff 4f       	sbci	r31, 0xFF	; 255
 2aa:	80 81       	ld	r24, Z
 2ac:	80 95       	com	r24
 2ae:	8c 93       	st	X, r24
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	a8 ec       	ldi	r26, 0xC8	; 200
 2b6:	b2 e4       	ldi	r27, 0x42	; 66
 2b8:	8f a3       	std	Y+39, r24	; 0x27
 2ba:	98 a7       	std	Y+40, r25	; 0x28
 2bc:	a9 a7       	std	Y+41, r26	; 0x29
 2be:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 2c0:	6f a1       	ldd	r22, Y+39	; 0x27
 2c2:	78 a5       	ldd	r23, Y+40	; 0x28
 2c4:	89 a5       	ldd	r24, Y+41	; 0x29
 2c6:	9a a5       	ldd	r25, Y+42	; 0x2a
 2c8:	20 e0       	ldi	r18, 0x00	; 0
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	4a e7       	ldi	r20, 0x7A	; 122
 2ce:	53 e4       	ldi	r21, 0x43	; 67
 2d0:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <__mulsf3>
 2d4:	dc 01       	movw	r26, r24
 2d6:	cb 01       	movw	r24, r22
 2d8:	8b a3       	std	Y+35, r24	; 0x23
 2da:	9c a3       	std	Y+36, r25	; 0x24
 2dc:	ad a3       	std	Y+37, r26	; 0x25
 2de:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
 2e0:	6b a1       	ldd	r22, Y+35	; 0x23
 2e2:	7c a1       	ldd	r23, Y+36	; 0x24
 2e4:	8d a1       	ldd	r24, Y+37	; 0x25
 2e6:	9e a1       	ldd	r25, Y+38	; 0x26
 2e8:	20 e0       	ldi	r18, 0x00	; 0
 2ea:	30 e0       	ldi	r19, 0x00	; 0
 2ec:	40 e8       	ldi	r20, 0x80	; 128
 2ee:	5f e3       	ldi	r21, 0x3F	; 63
 2f0:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__cmpsf2>
 2f4:	88 23       	and	r24, r24
 2f6:	2c f4       	brge	.+10     	; 0x302 <main+0x244>
		__ticks = 1;
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	9a a3       	std	Y+34, r25	; 0x22
 2fe:	89 a3       	std	Y+33, r24	; 0x21
 300:	3f c0       	rjmp	.+126    	; 0x380 <main+0x2c2>
	else if (__tmp > 65535)
 302:	6b a1       	ldd	r22, Y+35	; 0x23
 304:	7c a1       	ldd	r23, Y+36	; 0x24
 306:	8d a1       	ldd	r24, Y+37	; 0x25
 308:	9e a1       	ldd	r25, Y+38	; 0x26
 30a:	20 e0       	ldi	r18, 0x00	; 0
 30c:	3f ef       	ldi	r19, 0xFF	; 255
 30e:	4f e7       	ldi	r20, 0x7F	; 127
 310:	57 e4       	ldi	r21, 0x47	; 71
 312:	0e 94 78 03 	call	0x6f0	; 0x6f0 <__gesf2>
 316:	18 16       	cp	r1, r24
 318:	4c f5       	brge	.+82     	; 0x36c <main+0x2ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 31a:	6f a1       	ldd	r22, Y+39	; 0x27
 31c:	78 a5       	ldd	r23, Y+40	; 0x28
 31e:	89 a5       	ldd	r24, Y+41	; 0x29
 320:	9a a5       	ldd	r25, Y+42	; 0x2a
 322:	20 e0       	ldi	r18, 0x00	; 0
 324:	30 e0       	ldi	r19, 0x00	; 0
 326:	40 e2       	ldi	r20, 0x20	; 32
 328:	51 e4       	ldi	r21, 0x41	; 65
 32a:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <__mulsf3>
 32e:	dc 01       	movw	r26, r24
 330:	cb 01       	movw	r24, r22
 332:	bc 01       	movw	r22, r24
 334:	cd 01       	movw	r24, r26
 336:	0e 94 ff 02 	call	0x5fe	; 0x5fe <__fixunssfsi>
 33a:	dc 01       	movw	r26, r24
 33c:	cb 01       	movw	r24, r22
 33e:	9a a3       	std	Y+34, r25	; 0x22
 340:	89 a3       	std	Y+33, r24	; 0x21
 342:	0f c0       	rjmp	.+30     	; 0x362 <main+0x2a4>
 344:	89 e1       	ldi	r24, 0x19	; 25
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	98 a3       	std	Y+32, r25	; 0x20
 34a:	8f 8f       	std	Y+31, r24	; 0x1f
 34c:	8f 8d       	ldd	r24, Y+31	; 0x1f
 34e:	98 a1       	ldd	r25, Y+32	; 0x20
 350:	01 97       	sbiw	r24, 0x01	; 1
 352:	f1 f7       	brne	.-4      	; 0x350 <main+0x292>
 354:	98 a3       	std	Y+32, r25	; 0x20
 356:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 358:	89 a1       	ldd	r24, Y+33	; 0x21
 35a:	9a a1       	ldd	r25, Y+34	; 0x22
 35c:	01 97       	sbiw	r24, 0x01	; 1
 35e:	9a a3       	std	Y+34, r25	; 0x22
 360:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 362:	89 a1       	ldd	r24, Y+33	; 0x21
 364:	9a a1       	ldd	r25, Y+34	; 0x22
 366:	00 97       	sbiw	r24, 0x00	; 0
 368:	69 f7       	brne	.-38     	; 0x344 <main+0x286>
 36a:	14 c0       	rjmp	.+40     	; 0x394 <main+0x2d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 36c:	6b a1       	ldd	r22, Y+35	; 0x23
 36e:	7c a1       	ldd	r23, Y+36	; 0x24
 370:	8d a1       	ldd	r24, Y+37	; 0x25
 372:	9e a1       	ldd	r25, Y+38	; 0x26
 374:	0e 94 ff 02 	call	0x5fe	; 0x5fe <__fixunssfsi>
 378:	dc 01       	movw	r26, r24
 37a:	cb 01       	movw	r24, r22
 37c:	9a a3       	std	Y+34, r25	; 0x22
 37e:	89 a3       	std	Y+33, r24	; 0x21
 380:	89 a1       	ldd	r24, Y+33	; 0x21
 382:	9a a1       	ldd	r25, Y+34	; 0x22
 384:	9e 8f       	std	Y+30, r25	; 0x1e
 386:	8d 8f       	std	Y+29, r24	; 0x1d
 388:	8d 8d       	ldd	r24, Y+29	; 0x1d
 38a:	9e 8d       	ldd	r25, Y+30	; 0x1e
 38c:	01 97       	sbiw	r24, 0x01	; 1
 38e:	f1 f7       	brne	.-4      	; 0x38c <main+0x2ce>
 390:	9e 8f       	std	Y+30, r25	; 0x1e
 392:	8d 8f       	std	Y+29, r24	; 0x1d
            _delay_ms(100);
            index >>= 1;
 394:	de 01       	movw	r26, r28
 396:	af 5b       	subi	r26, 0xBF	; 191
 398:	bf 4f       	sbci	r27, 0xFF	; 255
 39a:	fe 01       	movw	r30, r28
 39c:	ef 5b       	subi	r30, 0xBF	; 191
 39e:	ff 4f       	sbci	r31, 0xFF	; 255
 3a0:	80 81       	ld	r24, Z
 3a2:	86 95       	lsr	r24
 3a4:	8c 93       	st	X, r24
            PORTC = index;
            _delay_ms(100);
            index <<= 1;
        }
        index = 0x7F;
        for(int i = 0; i < LED_CTRL_INDEX - 1; i++) {
 3a6:	8d ad       	ldd	r24, Y+61	; 0x3d
 3a8:	9e ad       	ldd	r25, Y+62	; 0x3e
 3aa:	01 96       	adiw	r24, 0x01	; 1
 3ac:	9e af       	std	Y+62, r25	; 0x3e
 3ae:	8d af       	std	Y+61, r24	; 0x3d
 3b0:	8d ad       	ldd	r24, Y+61	; 0x3d
 3b2:	9e ad       	ldd	r25, Y+62	; 0x3e
 3b4:	88 30       	cpi	r24, 0x08	; 8
 3b6:	91 05       	cpc	r25, r1
 3b8:	0c f4       	brge	.+2      	; 0x3bc <main+0x2fe>
 3ba:	72 cf       	rjmp	.-284    	; 0x2a0 <main+0x1e2>
            _delay_ms(100);
            index >>= 1;
        }

        /* Use for-loop and array */
        for(int i = 1; i < LED_CTRL_INDEX; i++) {
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	9c af       	std	Y+60, r25	; 0x3c
 3c2:	8b af       	std	Y+59, r24	; 0x3b
 3c4:	83 c0       	rjmp	.+262    	; 0x4cc <main+0x40e>
            PORTC = indexArray[i];
 3c6:	a5 e3       	ldi	r26, 0x35	; 53
 3c8:	b0 e0       	ldi	r27, 0x00	; 0
 3ca:	2b ad       	ldd	r18, Y+59	; 0x3b
 3cc:	3c ad       	ldd	r19, Y+60	; 0x3c
 3ce:	ce 01       	movw	r24, r28
 3d0:	8e 5b       	subi	r24, 0xBE	; 190
 3d2:	9f 4f       	sbci	r25, 0xFF	; 255
 3d4:	fc 01       	movw	r30, r24
 3d6:	e2 0f       	add	r30, r18
 3d8:	f3 1f       	adc	r31, r19
 3da:	80 81       	ld	r24, Z
 3dc:	8c 93       	st	X, r24
 3de:	80 e0       	ldi	r24, 0x00	; 0
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	a8 ec       	ldi	r26, 0xC8	; 200
 3e4:	b2 e4       	ldi	r27, 0x42	; 66
 3e6:	89 8f       	std	Y+25, r24	; 0x19
 3e8:	9a 8f       	std	Y+26, r25	; 0x1a
 3ea:	ab 8f       	std	Y+27, r26	; 0x1b
 3ec:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 3ee:	69 8d       	ldd	r22, Y+25	; 0x19
 3f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
 3f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
 3f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
 3f6:	20 e0       	ldi	r18, 0x00	; 0
 3f8:	30 e0       	ldi	r19, 0x00	; 0
 3fa:	4a e7       	ldi	r20, 0x7A	; 122
 3fc:	53 e4       	ldi	r21, 0x43	; 67
 3fe:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <__mulsf3>
 402:	dc 01       	movw	r26, r24
 404:	cb 01       	movw	r24, r22
 406:	8d 8b       	std	Y+21, r24	; 0x15
 408:	9e 8b       	std	Y+22, r25	; 0x16
 40a:	af 8b       	std	Y+23, r26	; 0x17
 40c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
 40e:	6d 89       	ldd	r22, Y+21	; 0x15
 410:	7e 89       	ldd	r23, Y+22	; 0x16
 412:	8f 89       	ldd	r24, Y+23	; 0x17
 414:	98 8d       	ldd	r25, Y+24	; 0x18
 416:	20 e0       	ldi	r18, 0x00	; 0
 418:	30 e0       	ldi	r19, 0x00	; 0
 41a:	40 e8       	ldi	r20, 0x80	; 128
 41c:	5f e3       	ldi	r21, 0x3F	; 63
 41e:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__cmpsf2>
 422:	88 23       	and	r24, r24
 424:	2c f4       	brge	.+10     	; 0x430 <main+0x372>
		__ticks = 1;
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	9c 8b       	std	Y+20, r25	; 0x14
 42c:	8b 8b       	std	Y+19, r24	; 0x13
 42e:	3f c0       	rjmp	.+126    	; 0x4ae <main+0x3f0>
	else if (__tmp > 65535)
 430:	6d 89       	ldd	r22, Y+21	; 0x15
 432:	7e 89       	ldd	r23, Y+22	; 0x16
 434:	8f 89       	ldd	r24, Y+23	; 0x17
 436:	98 8d       	ldd	r25, Y+24	; 0x18
 438:	20 e0       	ldi	r18, 0x00	; 0
 43a:	3f ef       	ldi	r19, 0xFF	; 255
 43c:	4f e7       	ldi	r20, 0x7F	; 127
 43e:	57 e4       	ldi	r21, 0x47	; 71
 440:	0e 94 78 03 	call	0x6f0	; 0x6f0 <__gesf2>
 444:	18 16       	cp	r1, r24
 446:	4c f5       	brge	.+82     	; 0x49a <main+0x3dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 448:	69 8d       	ldd	r22, Y+25	; 0x19
 44a:	7a 8d       	ldd	r23, Y+26	; 0x1a
 44c:	8b 8d       	ldd	r24, Y+27	; 0x1b
 44e:	9c 8d       	ldd	r25, Y+28	; 0x1c
 450:	20 e0       	ldi	r18, 0x00	; 0
 452:	30 e0       	ldi	r19, 0x00	; 0
 454:	40 e2       	ldi	r20, 0x20	; 32
 456:	51 e4       	ldi	r21, 0x41	; 65
 458:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <__mulsf3>
 45c:	dc 01       	movw	r26, r24
 45e:	cb 01       	movw	r24, r22
 460:	bc 01       	movw	r22, r24
 462:	cd 01       	movw	r24, r26
 464:	0e 94 ff 02 	call	0x5fe	; 0x5fe <__fixunssfsi>
 468:	dc 01       	movw	r26, r24
 46a:	cb 01       	movw	r24, r22
 46c:	9c 8b       	std	Y+20, r25	; 0x14
 46e:	8b 8b       	std	Y+19, r24	; 0x13
 470:	0f c0       	rjmp	.+30     	; 0x490 <main+0x3d2>
 472:	89 e1       	ldi	r24, 0x19	; 25
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	9a 8b       	std	Y+18, r25	; 0x12
 478:	89 8b       	std	Y+17, r24	; 0x11
 47a:	89 89       	ldd	r24, Y+17	; 0x11
 47c:	9a 89       	ldd	r25, Y+18	; 0x12
 47e:	01 97       	sbiw	r24, 0x01	; 1
 480:	f1 f7       	brne	.-4      	; 0x47e <main+0x3c0>
 482:	9a 8b       	std	Y+18, r25	; 0x12
 484:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 486:	8b 89       	ldd	r24, Y+19	; 0x13
 488:	9c 89       	ldd	r25, Y+20	; 0x14
 48a:	01 97       	sbiw	r24, 0x01	; 1
 48c:	9c 8b       	std	Y+20, r25	; 0x14
 48e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 490:	8b 89       	ldd	r24, Y+19	; 0x13
 492:	9c 89       	ldd	r25, Y+20	; 0x14
 494:	00 97       	sbiw	r24, 0x00	; 0
 496:	69 f7       	brne	.-38     	; 0x472 <main+0x3b4>
 498:	14 c0       	rjmp	.+40     	; 0x4c2 <main+0x404>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 49a:	6d 89       	ldd	r22, Y+21	; 0x15
 49c:	7e 89       	ldd	r23, Y+22	; 0x16
 49e:	8f 89       	ldd	r24, Y+23	; 0x17
 4a0:	98 8d       	ldd	r25, Y+24	; 0x18
 4a2:	0e 94 ff 02 	call	0x5fe	; 0x5fe <__fixunssfsi>
 4a6:	dc 01       	movw	r26, r24
 4a8:	cb 01       	movw	r24, r22
 4aa:	9c 8b       	std	Y+20, r25	; 0x14
 4ac:	8b 8b       	std	Y+19, r24	; 0x13
 4ae:	8b 89       	ldd	r24, Y+19	; 0x13
 4b0:	9c 89       	ldd	r25, Y+20	; 0x14
 4b2:	98 8b       	std	Y+16, r25	; 0x10
 4b4:	8f 87       	std	Y+15, r24	; 0x0f
 4b6:	8f 85       	ldd	r24, Y+15	; 0x0f
 4b8:	98 89       	ldd	r25, Y+16	; 0x10
 4ba:	01 97       	sbiw	r24, 0x01	; 1
 4bc:	f1 f7       	brne	.-4      	; 0x4ba <main+0x3fc>
 4be:	98 8b       	std	Y+16, r25	; 0x10
 4c0:	8f 87       	std	Y+15, r24	; 0x0f
            _delay_ms(100);
            index >>= 1;
        }

        /* Use for-loop and array */
        for(int i = 1; i < LED_CTRL_INDEX; i++) {
 4c2:	8b ad       	ldd	r24, Y+59	; 0x3b
 4c4:	9c ad       	ldd	r25, Y+60	; 0x3c
 4c6:	01 96       	adiw	r24, 0x01	; 1
 4c8:	9c af       	std	Y+60, r25	; 0x3c
 4ca:	8b af       	std	Y+59, r24	; 0x3b
 4cc:	8b ad       	ldd	r24, Y+59	; 0x3b
 4ce:	9c ad       	ldd	r25, Y+60	; 0x3c
 4d0:	89 30       	cpi	r24, 0x09	; 9
 4d2:	91 05       	cpc	r25, r1
 4d4:	0c f4       	brge	.+2      	; 0x4d8 <main+0x41a>
 4d6:	77 cf       	rjmp	.-274    	; 0x3c6 <main+0x308>
            PORTC = indexArray[i];
            _delay_ms(100);
        }
        for(int i = LED_CTRL_INDEX - 2; i > 0; i--) {
 4d8:	87 e0       	ldi	r24, 0x07	; 7
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	9a af       	std	Y+58, r25	; 0x3a
 4de:	89 af       	std	Y+57, r24	; 0x39
 4e0:	83 c0       	rjmp	.+262    	; 0x5e8 <main+0x52a>
            PORTC = indexArray[i];
 4e2:	a5 e3       	ldi	r26, 0x35	; 53
 4e4:	b0 e0       	ldi	r27, 0x00	; 0
 4e6:	29 ad       	ldd	r18, Y+57	; 0x39
 4e8:	3a ad       	ldd	r19, Y+58	; 0x3a
 4ea:	ce 01       	movw	r24, r28
 4ec:	8e 5b       	subi	r24, 0xBE	; 190
 4ee:	9f 4f       	sbci	r25, 0xFF	; 255
 4f0:	fc 01       	movw	r30, r24
 4f2:	e2 0f       	add	r30, r18
 4f4:	f3 1f       	adc	r31, r19
 4f6:	80 81       	ld	r24, Z
 4f8:	8c 93       	st	X, r24
 4fa:	80 e0       	ldi	r24, 0x00	; 0
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	a8 ec       	ldi	r26, 0xC8	; 200
 500:	b2 e4       	ldi	r27, 0x42	; 66
 502:	8b 87       	std	Y+11, r24	; 0x0b
 504:	9c 87       	std	Y+12, r25	; 0x0c
 506:	ad 87       	std	Y+13, r26	; 0x0d
 508:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 50a:	6b 85       	ldd	r22, Y+11	; 0x0b
 50c:	7c 85       	ldd	r23, Y+12	; 0x0c
 50e:	8d 85       	ldd	r24, Y+13	; 0x0d
 510:	9e 85       	ldd	r25, Y+14	; 0x0e
 512:	20 e0       	ldi	r18, 0x00	; 0
 514:	30 e0       	ldi	r19, 0x00	; 0
 516:	4a e7       	ldi	r20, 0x7A	; 122
 518:	53 e4       	ldi	r21, 0x43	; 67
 51a:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <__mulsf3>
 51e:	dc 01       	movw	r26, r24
 520:	cb 01       	movw	r24, r22
 522:	8f 83       	std	Y+7, r24	; 0x07
 524:	98 87       	std	Y+8, r25	; 0x08
 526:	a9 87       	std	Y+9, r26	; 0x09
 528:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
 52a:	6f 81       	ldd	r22, Y+7	; 0x07
 52c:	78 85       	ldd	r23, Y+8	; 0x08
 52e:	89 85       	ldd	r24, Y+9	; 0x09
 530:	9a 85       	ldd	r25, Y+10	; 0x0a
 532:	20 e0       	ldi	r18, 0x00	; 0
 534:	30 e0       	ldi	r19, 0x00	; 0
 536:	40 e8       	ldi	r20, 0x80	; 128
 538:	5f e3       	ldi	r21, 0x3F	; 63
 53a:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__cmpsf2>
 53e:	88 23       	and	r24, r24
 540:	2c f4       	brge	.+10     	; 0x54c <main+0x48e>
		__ticks = 1;
 542:	81 e0       	ldi	r24, 0x01	; 1
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	9e 83       	std	Y+6, r25	; 0x06
 548:	8d 83       	std	Y+5, r24	; 0x05
 54a:	3f c0       	rjmp	.+126    	; 0x5ca <main+0x50c>
	else if (__tmp > 65535)
 54c:	6f 81       	ldd	r22, Y+7	; 0x07
 54e:	78 85       	ldd	r23, Y+8	; 0x08
 550:	89 85       	ldd	r24, Y+9	; 0x09
 552:	9a 85       	ldd	r25, Y+10	; 0x0a
 554:	20 e0       	ldi	r18, 0x00	; 0
 556:	3f ef       	ldi	r19, 0xFF	; 255
 558:	4f e7       	ldi	r20, 0x7F	; 127
 55a:	57 e4       	ldi	r21, 0x47	; 71
 55c:	0e 94 78 03 	call	0x6f0	; 0x6f0 <__gesf2>
 560:	18 16       	cp	r1, r24
 562:	4c f5       	brge	.+82     	; 0x5b6 <main+0x4f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 564:	6b 85       	ldd	r22, Y+11	; 0x0b
 566:	7c 85       	ldd	r23, Y+12	; 0x0c
 568:	8d 85       	ldd	r24, Y+13	; 0x0d
 56a:	9e 85       	ldd	r25, Y+14	; 0x0e
 56c:	20 e0       	ldi	r18, 0x00	; 0
 56e:	30 e0       	ldi	r19, 0x00	; 0
 570:	40 e2       	ldi	r20, 0x20	; 32
 572:	51 e4       	ldi	r21, 0x41	; 65
 574:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <__mulsf3>
 578:	dc 01       	movw	r26, r24
 57a:	cb 01       	movw	r24, r22
 57c:	bc 01       	movw	r22, r24
 57e:	cd 01       	movw	r24, r26
 580:	0e 94 ff 02 	call	0x5fe	; 0x5fe <__fixunssfsi>
 584:	dc 01       	movw	r26, r24
 586:	cb 01       	movw	r24, r22
 588:	9e 83       	std	Y+6, r25	; 0x06
 58a:	8d 83       	std	Y+5, r24	; 0x05
 58c:	0f c0       	rjmp	.+30     	; 0x5ac <main+0x4ee>
 58e:	89 e1       	ldi	r24, 0x19	; 25
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	9c 83       	std	Y+4, r25	; 0x04
 594:	8b 83       	std	Y+3, r24	; 0x03
 596:	8b 81       	ldd	r24, Y+3	; 0x03
 598:	9c 81       	ldd	r25, Y+4	; 0x04
 59a:	01 97       	sbiw	r24, 0x01	; 1
 59c:	f1 f7       	brne	.-4      	; 0x59a <main+0x4dc>
 59e:	9c 83       	std	Y+4, r25	; 0x04
 5a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 5a2:	8d 81       	ldd	r24, Y+5	; 0x05
 5a4:	9e 81       	ldd	r25, Y+6	; 0x06
 5a6:	01 97       	sbiw	r24, 0x01	; 1
 5a8:	9e 83       	std	Y+6, r25	; 0x06
 5aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 5ac:	8d 81       	ldd	r24, Y+5	; 0x05
 5ae:	9e 81       	ldd	r25, Y+6	; 0x06
 5b0:	00 97       	sbiw	r24, 0x00	; 0
 5b2:	69 f7       	brne	.-38     	; 0x58e <main+0x4d0>
 5b4:	14 c0       	rjmp	.+40     	; 0x5de <main+0x520>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 5b6:	6f 81       	ldd	r22, Y+7	; 0x07
 5b8:	78 85       	ldd	r23, Y+8	; 0x08
 5ba:	89 85       	ldd	r24, Y+9	; 0x09
 5bc:	9a 85       	ldd	r25, Y+10	; 0x0a
 5be:	0e 94 ff 02 	call	0x5fe	; 0x5fe <__fixunssfsi>
 5c2:	dc 01       	movw	r26, r24
 5c4:	cb 01       	movw	r24, r22
 5c6:	9e 83       	std	Y+6, r25	; 0x06
 5c8:	8d 83       	std	Y+5, r24	; 0x05
 5ca:	8d 81       	ldd	r24, Y+5	; 0x05
 5cc:	9e 81       	ldd	r25, Y+6	; 0x06
 5ce:	9a 83       	std	Y+2, r25	; 0x02
 5d0:	89 83       	std	Y+1, r24	; 0x01
 5d2:	89 81       	ldd	r24, Y+1	; 0x01
 5d4:	9a 81       	ldd	r25, Y+2	; 0x02
 5d6:	01 97       	sbiw	r24, 0x01	; 1
 5d8:	f1 f7       	brne	.-4      	; 0x5d6 <main+0x518>
 5da:	9a 83       	std	Y+2, r25	; 0x02
 5dc:	89 83       	std	Y+1, r24	; 0x01
        /* Use for-loop and array */
        for(int i = 1; i < LED_CTRL_INDEX; i++) {
            PORTC = indexArray[i];
            _delay_ms(100);
        }
        for(int i = LED_CTRL_INDEX - 2; i > 0; i--) {
 5de:	89 ad       	ldd	r24, Y+57	; 0x39
 5e0:	9a ad       	ldd	r25, Y+58	; 0x3a
 5e2:	01 97       	sbiw	r24, 0x01	; 1
 5e4:	9a af       	std	Y+58, r25	; 0x3a
 5e6:	89 af       	std	Y+57, r24	; 0x39
 5e8:	89 ad       	ldd	r24, Y+57	; 0x39
 5ea:	9a ad       	ldd	r25, Y+58	; 0x3a
 5ec:	18 16       	cp	r1, r24
 5ee:	19 06       	cpc	r1, r25
 5f0:	0c f4       	brge	.+2      	; 0x5f4 <main+0x536>
 5f2:	77 cf       	rjmp	.-274    	; 0x4e2 <main+0x424>
 5f4:	b0 cd       	rjmp	.-1184   	; 0x156 <main+0x98>

000005f6 <__cmpsf2>:
 5f6:	2f d0       	rcall	.+94     	; 0x656 <__fp_cmp>
 5f8:	08 f4       	brcc	.+2      	; 0x5fc <__cmpsf2+0x6>
 5fa:	81 e0       	ldi	r24, 0x01	; 1
 5fc:	08 95       	ret

000005fe <__fixunssfsi>:
 5fe:	57 d0       	rcall	.+174    	; 0x6ae <__fp_splitA>
 600:	88 f0       	brcs	.+34     	; 0x624 <__fixunssfsi+0x26>
 602:	9f 57       	subi	r25, 0x7F	; 127
 604:	90 f0       	brcs	.+36     	; 0x62a <__fixunssfsi+0x2c>
 606:	b9 2f       	mov	r27, r25
 608:	99 27       	eor	r25, r25
 60a:	b7 51       	subi	r27, 0x17	; 23
 60c:	a0 f0       	brcs	.+40     	; 0x636 <__fixunssfsi+0x38>
 60e:	d1 f0       	breq	.+52     	; 0x644 <__fixunssfsi+0x46>
 610:	66 0f       	add	r22, r22
 612:	77 1f       	adc	r23, r23
 614:	88 1f       	adc	r24, r24
 616:	99 1f       	adc	r25, r25
 618:	1a f0       	brmi	.+6      	; 0x620 <__fixunssfsi+0x22>
 61a:	ba 95       	dec	r27
 61c:	c9 f7       	brne	.-14     	; 0x610 <__fixunssfsi+0x12>
 61e:	12 c0       	rjmp	.+36     	; 0x644 <__fixunssfsi+0x46>
 620:	b1 30       	cpi	r27, 0x01	; 1
 622:	81 f0       	breq	.+32     	; 0x644 <__fixunssfsi+0x46>
 624:	5e d0       	rcall	.+188    	; 0x6e2 <__fp_zero>
 626:	b1 e0       	ldi	r27, 0x01	; 1
 628:	08 95       	ret
 62a:	5b c0       	rjmp	.+182    	; 0x6e2 <__fp_zero>
 62c:	67 2f       	mov	r22, r23
 62e:	78 2f       	mov	r23, r24
 630:	88 27       	eor	r24, r24
 632:	b8 5f       	subi	r27, 0xF8	; 248
 634:	39 f0       	breq	.+14     	; 0x644 <__fixunssfsi+0x46>
 636:	b9 3f       	cpi	r27, 0xF9	; 249
 638:	cc f3       	brlt	.-14     	; 0x62c <__fixunssfsi+0x2e>
 63a:	86 95       	lsr	r24
 63c:	77 95       	ror	r23
 63e:	67 95       	ror	r22
 640:	b3 95       	inc	r27
 642:	d9 f7       	brne	.-10     	; 0x63a <__fixunssfsi+0x3c>
 644:	3e f4       	brtc	.+14     	; 0x654 <__fixunssfsi+0x56>
 646:	90 95       	com	r25
 648:	80 95       	com	r24
 64a:	70 95       	com	r23
 64c:	61 95       	neg	r22
 64e:	7f 4f       	sbci	r23, 0xFF	; 255
 650:	8f 4f       	sbci	r24, 0xFF	; 255
 652:	9f 4f       	sbci	r25, 0xFF	; 255
 654:	08 95       	ret

00000656 <__fp_cmp>:
 656:	99 0f       	add	r25, r25
 658:	00 08       	sbc	r0, r0
 65a:	55 0f       	add	r21, r21
 65c:	aa 0b       	sbc	r26, r26
 65e:	e0 e8       	ldi	r30, 0x80	; 128
 660:	fe ef       	ldi	r31, 0xFE	; 254
 662:	16 16       	cp	r1, r22
 664:	17 06       	cpc	r1, r23
 666:	e8 07       	cpc	r30, r24
 668:	f9 07       	cpc	r31, r25
 66a:	c0 f0       	brcs	.+48     	; 0x69c <__fp_cmp+0x46>
 66c:	12 16       	cp	r1, r18
 66e:	13 06       	cpc	r1, r19
 670:	e4 07       	cpc	r30, r20
 672:	f5 07       	cpc	r31, r21
 674:	98 f0       	brcs	.+38     	; 0x69c <__fp_cmp+0x46>
 676:	62 1b       	sub	r22, r18
 678:	73 0b       	sbc	r23, r19
 67a:	84 0b       	sbc	r24, r20
 67c:	95 0b       	sbc	r25, r21
 67e:	39 f4       	brne	.+14     	; 0x68e <__fp_cmp+0x38>
 680:	0a 26       	eor	r0, r26
 682:	61 f0       	breq	.+24     	; 0x69c <__fp_cmp+0x46>
 684:	23 2b       	or	r18, r19
 686:	24 2b       	or	r18, r20
 688:	25 2b       	or	r18, r21
 68a:	21 f4       	brne	.+8      	; 0x694 <__fp_cmp+0x3e>
 68c:	08 95       	ret
 68e:	0a 26       	eor	r0, r26
 690:	09 f4       	brne	.+2      	; 0x694 <__fp_cmp+0x3e>
 692:	a1 40       	sbci	r26, 0x01	; 1
 694:	a6 95       	lsr	r26
 696:	8f ef       	ldi	r24, 0xFF	; 255
 698:	81 1d       	adc	r24, r1
 69a:	81 1d       	adc	r24, r1
 69c:	08 95       	ret

0000069e <__fp_split3>:
 69e:	57 fd       	sbrc	r21, 7
 6a0:	90 58       	subi	r25, 0x80	; 128
 6a2:	44 0f       	add	r20, r20
 6a4:	55 1f       	adc	r21, r21
 6a6:	59 f0       	breq	.+22     	; 0x6be <__fp_splitA+0x10>
 6a8:	5f 3f       	cpi	r21, 0xFF	; 255
 6aa:	71 f0       	breq	.+28     	; 0x6c8 <__fp_splitA+0x1a>
 6ac:	47 95       	ror	r20

000006ae <__fp_splitA>:
 6ae:	88 0f       	add	r24, r24
 6b0:	97 fb       	bst	r25, 7
 6b2:	99 1f       	adc	r25, r25
 6b4:	61 f0       	breq	.+24     	; 0x6ce <__fp_splitA+0x20>
 6b6:	9f 3f       	cpi	r25, 0xFF	; 255
 6b8:	79 f0       	breq	.+30     	; 0x6d8 <__fp_splitA+0x2a>
 6ba:	87 95       	ror	r24
 6bc:	08 95       	ret
 6be:	12 16       	cp	r1, r18
 6c0:	13 06       	cpc	r1, r19
 6c2:	14 06       	cpc	r1, r20
 6c4:	55 1f       	adc	r21, r21
 6c6:	f2 cf       	rjmp	.-28     	; 0x6ac <__fp_split3+0xe>
 6c8:	46 95       	lsr	r20
 6ca:	f1 df       	rcall	.-30     	; 0x6ae <__fp_splitA>
 6cc:	08 c0       	rjmp	.+16     	; 0x6de <__fp_splitA+0x30>
 6ce:	16 16       	cp	r1, r22
 6d0:	17 06       	cpc	r1, r23
 6d2:	18 06       	cpc	r1, r24
 6d4:	99 1f       	adc	r25, r25
 6d6:	f1 cf       	rjmp	.-30     	; 0x6ba <__fp_splitA+0xc>
 6d8:	86 95       	lsr	r24
 6da:	71 05       	cpc	r23, r1
 6dc:	61 05       	cpc	r22, r1
 6de:	08 94       	sec
 6e0:	08 95       	ret

000006e2 <__fp_zero>:
 6e2:	e8 94       	clt

000006e4 <__fp_szero>:
 6e4:	bb 27       	eor	r27, r27
 6e6:	66 27       	eor	r22, r22
 6e8:	77 27       	eor	r23, r23
 6ea:	cb 01       	movw	r24, r22
 6ec:	97 f9       	bld	r25, 7
 6ee:	08 95       	ret

000006f0 <__gesf2>:
 6f0:	b2 df       	rcall	.-156    	; 0x656 <__fp_cmp>
 6f2:	08 f4       	brcc	.+2      	; 0x6f6 <__gesf2+0x6>
 6f4:	8f ef       	ldi	r24, 0xFF	; 255
 6f6:	08 95       	ret

000006f8 <__mulsf3>:
 6f8:	0b d0       	rcall	.+22     	; 0x710 <__mulsf3x>
 6fa:	78 c0       	rjmp	.+240    	; 0x7ec <__fp_round>
 6fc:	69 d0       	rcall	.+210    	; 0x7d0 <__fp_pscA>
 6fe:	28 f0       	brcs	.+10     	; 0x70a <__mulsf3+0x12>
 700:	6e d0       	rcall	.+220    	; 0x7de <__fp_pscB>
 702:	18 f0       	brcs	.+6      	; 0x70a <__mulsf3+0x12>
 704:	95 23       	and	r25, r21
 706:	09 f0       	breq	.+2      	; 0x70a <__mulsf3+0x12>
 708:	5a c0       	rjmp	.+180    	; 0x7be <__fp_inf>
 70a:	5f c0       	rjmp	.+190    	; 0x7ca <__fp_nan>
 70c:	11 24       	eor	r1, r1
 70e:	ea cf       	rjmp	.-44     	; 0x6e4 <__fp_szero>

00000710 <__mulsf3x>:
 710:	c6 df       	rcall	.-116    	; 0x69e <__fp_split3>
 712:	a0 f3       	brcs	.-24     	; 0x6fc <__mulsf3+0x4>

00000714 <__mulsf3_pse>:
 714:	95 9f       	mul	r25, r21
 716:	d1 f3       	breq	.-12     	; 0x70c <__mulsf3+0x14>
 718:	95 0f       	add	r25, r21
 71a:	50 e0       	ldi	r21, 0x00	; 0
 71c:	55 1f       	adc	r21, r21
 71e:	62 9f       	mul	r22, r18
 720:	f0 01       	movw	r30, r0
 722:	72 9f       	mul	r23, r18
 724:	bb 27       	eor	r27, r27
 726:	f0 0d       	add	r31, r0
 728:	b1 1d       	adc	r27, r1
 72a:	63 9f       	mul	r22, r19
 72c:	aa 27       	eor	r26, r26
 72e:	f0 0d       	add	r31, r0
 730:	b1 1d       	adc	r27, r1
 732:	aa 1f       	adc	r26, r26
 734:	64 9f       	mul	r22, r20
 736:	66 27       	eor	r22, r22
 738:	b0 0d       	add	r27, r0
 73a:	a1 1d       	adc	r26, r1
 73c:	66 1f       	adc	r22, r22
 73e:	82 9f       	mul	r24, r18
 740:	22 27       	eor	r18, r18
 742:	b0 0d       	add	r27, r0
 744:	a1 1d       	adc	r26, r1
 746:	62 1f       	adc	r22, r18
 748:	73 9f       	mul	r23, r19
 74a:	b0 0d       	add	r27, r0
 74c:	a1 1d       	adc	r26, r1
 74e:	62 1f       	adc	r22, r18
 750:	83 9f       	mul	r24, r19
 752:	a0 0d       	add	r26, r0
 754:	61 1d       	adc	r22, r1
 756:	22 1f       	adc	r18, r18
 758:	74 9f       	mul	r23, r20
 75a:	33 27       	eor	r19, r19
 75c:	a0 0d       	add	r26, r0
 75e:	61 1d       	adc	r22, r1
 760:	23 1f       	adc	r18, r19
 762:	84 9f       	mul	r24, r20
 764:	60 0d       	add	r22, r0
 766:	21 1d       	adc	r18, r1
 768:	82 2f       	mov	r24, r18
 76a:	76 2f       	mov	r23, r22
 76c:	6a 2f       	mov	r22, r26
 76e:	11 24       	eor	r1, r1
 770:	9f 57       	subi	r25, 0x7F	; 127
 772:	50 40       	sbci	r21, 0x00	; 0
 774:	8a f0       	brmi	.+34     	; 0x798 <__mulsf3_pse+0x84>
 776:	e1 f0       	breq	.+56     	; 0x7b0 <__mulsf3_pse+0x9c>
 778:	88 23       	and	r24, r24
 77a:	4a f0       	brmi	.+18     	; 0x78e <__mulsf3_pse+0x7a>
 77c:	ee 0f       	add	r30, r30
 77e:	ff 1f       	adc	r31, r31
 780:	bb 1f       	adc	r27, r27
 782:	66 1f       	adc	r22, r22
 784:	77 1f       	adc	r23, r23
 786:	88 1f       	adc	r24, r24
 788:	91 50       	subi	r25, 0x01	; 1
 78a:	50 40       	sbci	r21, 0x00	; 0
 78c:	a9 f7       	brne	.-22     	; 0x778 <__mulsf3_pse+0x64>
 78e:	9e 3f       	cpi	r25, 0xFE	; 254
 790:	51 05       	cpc	r21, r1
 792:	70 f0       	brcs	.+28     	; 0x7b0 <__mulsf3_pse+0x9c>
 794:	14 c0       	rjmp	.+40     	; 0x7be <__fp_inf>
 796:	a6 cf       	rjmp	.-180    	; 0x6e4 <__fp_szero>
 798:	5f 3f       	cpi	r21, 0xFF	; 255
 79a:	ec f3       	brlt	.-6      	; 0x796 <__mulsf3_pse+0x82>
 79c:	98 3e       	cpi	r25, 0xE8	; 232
 79e:	dc f3       	brlt	.-10     	; 0x796 <__mulsf3_pse+0x82>
 7a0:	86 95       	lsr	r24
 7a2:	77 95       	ror	r23
 7a4:	67 95       	ror	r22
 7a6:	b7 95       	ror	r27
 7a8:	f7 95       	ror	r31
 7aa:	e7 95       	ror	r30
 7ac:	9f 5f       	subi	r25, 0xFF	; 255
 7ae:	c1 f7       	brne	.-16     	; 0x7a0 <__mulsf3_pse+0x8c>
 7b0:	fe 2b       	or	r31, r30
 7b2:	88 0f       	add	r24, r24
 7b4:	91 1d       	adc	r25, r1
 7b6:	96 95       	lsr	r25
 7b8:	87 95       	ror	r24
 7ba:	97 f9       	bld	r25, 7
 7bc:	08 95       	ret

000007be <__fp_inf>:
 7be:	97 f9       	bld	r25, 7
 7c0:	9f 67       	ori	r25, 0x7F	; 127
 7c2:	80 e8       	ldi	r24, 0x80	; 128
 7c4:	70 e0       	ldi	r23, 0x00	; 0
 7c6:	60 e0       	ldi	r22, 0x00	; 0
 7c8:	08 95       	ret

000007ca <__fp_nan>:
 7ca:	9f ef       	ldi	r25, 0xFF	; 255
 7cc:	80 ec       	ldi	r24, 0xC0	; 192
 7ce:	08 95       	ret

000007d0 <__fp_pscA>:
 7d0:	00 24       	eor	r0, r0
 7d2:	0a 94       	dec	r0
 7d4:	16 16       	cp	r1, r22
 7d6:	17 06       	cpc	r1, r23
 7d8:	18 06       	cpc	r1, r24
 7da:	09 06       	cpc	r0, r25
 7dc:	08 95       	ret

000007de <__fp_pscB>:
 7de:	00 24       	eor	r0, r0
 7e0:	0a 94       	dec	r0
 7e2:	12 16       	cp	r1, r18
 7e4:	13 06       	cpc	r1, r19
 7e6:	14 06       	cpc	r1, r20
 7e8:	05 06       	cpc	r0, r21
 7ea:	08 95       	ret

000007ec <__fp_round>:
 7ec:	09 2e       	mov	r0, r25
 7ee:	03 94       	inc	r0
 7f0:	00 0c       	add	r0, r0
 7f2:	11 f4       	brne	.+4      	; 0x7f8 <__fp_round+0xc>
 7f4:	88 23       	and	r24, r24
 7f6:	52 f0       	brmi	.+20     	; 0x80c <__fp_round+0x20>
 7f8:	bb 0f       	add	r27, r27
 7fa:	40 f4       	brcc	.+16     	; 0x80c <__fp_round+0x20>
 7fc:	bf 2b       	or	r27, r31
 7fe:	11 f4       	brne	.+4      	; 0x804 <__fp_round+0x18>
 800:	60 ff       	sbrs	r22, 0
 802:	04 c0       	rjmp	.+8      	; 0x80c <__fp_round+0x20>
 804:	6f 5f       	subi	r22, 0xFF	; 255
 806:	7f 4f       	sbci	r23, 0xFF	; 255
 808:	8f 4f       	sbci	r24, 0xFF	; 255
 80a:	9f 4f       	sbci	r25, 0xFF	; 255
 80c:	08 95       	ret

0000080e <_exit>:
 80e:	f8 94       	cli

00000810 <__stop_program>:
 810:	ff cf       	rjmp	.-2      	; 0x810 <__stop_program>
