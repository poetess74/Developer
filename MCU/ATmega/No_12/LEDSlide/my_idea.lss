
my_idea.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000626  000006ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000626  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800108  00800108  000006c2  2**0
                  ALLOC
  3 .stab         00000588  00000000  00000000  000006c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000766  00000000  00000000  00000c4c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_1>
   8:	0c 94 20 01 	jmp	0x240	; 0x240 <__vector_2>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e2       	ldi	r30, 0x26	; 38
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 30       	cpi	r26, 0x08	; 8
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a8 e0       	ldi	r26, 0x08	; 8
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a9 30       	cpi	r26, 0x09	; 9
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 da 01 	call	0x3b4	; 0x3b4 <main>
  c6:	0c 94 11 03 	jmp	0x622	; 0x622 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <__vector_1>:
#include <util/delay.h>

unsigned char index = 0;
unsigned char seg[8] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80};

ISR (INT0_vect) {
  ce:	1f 92       	push	r1
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	00 90 5b 00 	lds	r0, 0x005B
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
  de:	2f 93       	push	r18
  e0:	3f 93       	push	r19
  e2:	4f 93       	push	r20
  e4:	5f 93       	push	r21
  e6:	6f 93       	push	r22
  e8:	7f 93       	push	r23
  ea:	8f 93       	push	r24
  ec:	9f 93       	push	r25
  ee:	af 93       	push	r26
  f0:	bf 93       	push	r27
  f2:	ef 93       	push	r30
  f4:	ff 93       	push	r31
  f6:	df 93       	push	r29
  f8:	cf 93       	push	r28
  fa:	cd b7       	in	r28, 0x3d	; 61
  fc:	de b7       	in	r29, 0x3e	; 62
  fe:	2e 97       	sbiw	r28, 0x0e	; 14
 100:	de bf       	out	0x3e, r29	; 62
 102:	cd bf       	out	0x3d, r28	; 61
    EIMSK = 0x00;
 104:	e9 e5       	ldi	r30, 0x59	; 89
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	10 82       	st	Z, r1
    if (index >= 7) {
 10a:	80 91 08 01 	lds	r24, 0x0108
 10e:	87 30       	cpi	r24, 0x07	; 7
 110:	18 f0       	brcs	.+6      	; 0x118 <__vector_1+0x4a>
        index = 0;
 112:	10 92 08 01 	sts	0x0108, r1
 116:	05 c0       	rjmp	.+10     	; 0x122 <__vector_1+0x54>
    } else {
        index++;
 118:	80 91 08 01 	lds	r24, 0x0108
 11c:	8f 5f       	subi	r24, 0xFF	; 255
 11e:	80 93 08 01 	sts	0x0108, r24
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	a8 ec       	ldi	r26, 0xC8	; 200
 128:	b2 e4       	ldi	r27, 0x42	; 66
 12a:	8b 87       	std	Y+11, r24	; 0x0b
 12c:	9c 87       	std	Y+12, r25	; 0x0c
 12e:	ad 87       	std	Y+13, r26	; 0x0d
 130:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 132:	6b 85       	ldd	r22, Y+11	; 0x0b
 134:	7c 85       	ldd	r23, Y+12	; 0x0c
 136:	8d 85       	ldd	r24, Y+13	; 0x0d
 138:	9e 85       	ldd	r25, Y+14	; 0x0e
 13a:	20 e0       	ldi	r18, 0x00	; 0
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	4a e7       	ldi	r20, 0x7A	; 122
 140:	53 e4       	ldi	r21, 0x43	; 67
 142:	0e 94 86 02 	call	0x50c	; 0x50c <__mulsf3>
 146:	dc 01       	movw	r26, r24
 148:	cb 01       	movw	r24, r22
 14a:	8f 83       	std	Y+7, r24	; 0x07
 14c:	98 87       	std	Y+8, r25	; 0x08
 14e:	a9 87       	std	Y+9, r26	; 0x09
 150:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
 152:	6f 81       	ldd	r22, Y+7	; 0x07
 154:	78 85       	ldd	r23, Y+8	; 0x08
 156:	89 85       	ldd	r24, Y+9	; 0x09
 158:	9a 85       	ldd	r25, Y+10	; 0x0a
 15a:	20 e0       	ldi	r18, 0x00	; 0
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	40 e8       	ldi	r20, 0x80	; 128
 160:	5f e3       	ldi	r21, 0x3F	; 63
 162:	0e 94 05 02 	call	0x40a	; 0x40a <__cmpsf2>
 166:	88 23       	and	r24, r24
 168:	2c f4       	brge	.+10     	; 0x174 <__vector_1+0xa6>
		__ticks = 1;
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	9e 83       	std	Y+6, r25	; 0x06
 170:	8d 83       	std	Y+5, r24	; 0x05
 172:	3f c0       	rjmp	.+126    	; 0x1f2 <__vector_1+0x124>
	else if (__tmp > 65535)
 174:	6f 81       	ldd	r22, Y+7	; 0x07
 176:	78 85       	ldd	r23, Y+8	; 0x08
 178:	89 85       	ldd	r24, Y+9	; 0x09
 17a:	9a 85       	ldd	r25, Y+10	; 0x0a
 17c:	20 e0       	ldi	r18, 0x00	; 0
 17e:	3f ef       	ldi	r19, 0xFF	; 255
 180:	4f e7       	ldi	r20, 0x7F	; 127
 182:	57 e4       	ldi	r21, 0x47	; 71
 184:	0e 94 82 02 	call	0x504	; 0x504 <__gesf2>
 188:	18 16       	cp	r1, r24
 18a:	4c f5       	brge	.+82     	; 0x1de <__vector_1+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 18c:	6b 85       	ldd	r22, Y+11	; 0x0b
 18e:	7c 85       	ldd	r23, Y+12	; 0x0c
 190:	8d 85       	ldd	r24, Y+13	; 0x0d
 192:	9e 85       	ldd	r25, Y+14	; 0x0e
 194:	20 e0       	ldi	r18, 0x00	; 0
 196:	30 e0       	ldi	r19, 0x00	; 0
 198:	40 e2       	ldi	r20, 0x20	; 32
 19a:	51 e4       	ldi	r21, 0x41	; 65
 19c:	0e 94 86 02 	call	0x50c	; 0x50c <__mulsf3>
 1a0:	dc 01       	movw	r26, r24
 1a2:	cb 01       	movw	r24, r22
 1a4:	bc 01       	movw	r22, r24
 1a6:	cd 01       	movw	r24, r26
 1a8:	0e 94 09 02 	call	0x412	; 0x412 <__fixunssfsi>
 1ac:	dc 01       	movw	r26, r24
 1ae:	cb 01       	movw	r24, r22
 1b0:	9e 83       	std	Y+6, r25	; 0x06
 1b2:	8d 83       	std	Y+5, r24	; 0x05
 1b4:	0f c0       	rjmp	.+30     	; 0x1d4 <__vector_1+0x106>
 1b6:	89 e1       	ldi	r24, 0x19	; 25
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	9c 83       	std	Y+4, r25	; 0x04
 1bc:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1be:	8b 81       	ldd	r24, Y+3	; 0x03
 1c0:	9c 81       	ldd	r25, Y+4	; 0x04
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <__vector_1+0xf4>
 1c6:	9c 83       	std	Y+4, r25	; 0x04
 1c8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1ca:	8d 81       	ldd	r24, Y+5	; 0x05
 1cc:	9e 81       	ldd	r25, Y+6	; 0x06
 1ce:	01 97       	sbiw	r24, 0x01	; 1
 1d0:	9e 83       	std	Y+6, r25	; 0x06
 1d2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1d4:	8d 81       	ldd	r24, Y+5	; 0x05
 1d6:	9e 81       	ldd	r25, Y+6	; 0x06
 1d8:	00 97       	sbiw	r24, 0x00	; 0
 1da:	69 f7       	brne	.-38     	; 0x1b6 <__vector_1+0xe8>
 1dc:	14 c0       	rjmp	.+40     	; 0x206 <__vector_1+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 1de:	6f 81       	ldd	r22, Y+7	; 0x07
 1e0:	78 85       	ldd	r23, Y+8	; 0x08
 1e2:	89 85       	ldd	r24, Y+9	; 0x09
 1e4:	9a 85       	ldd	r25, Y+10	; 0x0a
 1e6:	0e 94 09 02 	call	0x412	; 0x412 <__fixunssfsi>
 1ea:	dc 01       	movw	r26, r24
 1ec:	cb 01       	movw	r24, r22
 1ee:	9e 83       	std	Y+6, r25	; 0x06
 1f0:	8d 83       	std	Y+5, r24	; 0x05
 1f2:	8d 81       	ldd	r24, Y+5	; 0x05
 1f4:	9e 81       	ldd	r25, Y+6	; 0x06
 1f6:	9a 83       	std	Y+2, r25	; 0x02
 1f8:	89 83       	std	Y+1, r24	; 0x01
 1fa:	89 81       	ldd	r24, Y+1	; 0x01
 1fc:	9a 81       	ldd	r25, Y+2	; 0x02
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <__vector_1+0x130>
 202:	9a 83       	std	Y+2, r25	; 0x02
 204:	89 83       	std	Y+1, r24	; 0x01
    }
    _delay_ms(100);
    EIMSK = 0x03;
 206:	e9 e5       	ldi	r30, 0x59	; 89
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	83 e0       	ldi	r24, 0x03	; 3
 20c:	80 83       	st	Z, r24
}
 20e:	2e 96       	adiw	r28, 0x0e	; 14
 210:	de bf       	out	0x3e, r29	; 62
 212:	cd bf       	out	0x3d, r28	; 61
 214:	cf 91       	pop	r28
 216:	df 91       	pop	r29
 218:	ff 91       	pop	r31
 21a:	ef 91       	pop	r30
 21c:	bf 91       	pop	r27
 21e:	af 91       	pop	r26
 220:	9f 91       	pop	r25
 222:	8f 91       	pop	r24
 224:	7f 91       	pop	r23
 226:	6f 91       	pop	r22
 228:	5f 91       	pop	r21
 22a:	4f 91       	pop	r20
 22c:	3f 91       	pop	r19
 22e:	2f 91       	pop	r18
 230:	0f 90       	pop	r0
 232:	00 92 5b 00 	sts	0x005B, r0
 236:	0f 90       	pop	r0
 238:	0f be       	out	0x3f, r0	; 63
 23a:	0f 90       	pop	r0
 23c:	1f 90       	pop	r1
 23e:	18 95       	reti

00000240 <__vector_2>:

ISR (INT1_vect) {
 240:	1f 92       	push	r1
 242:	0f 92       	push	r0
 244:	0f b6       	in	r0, 0x3f	; 63
 246:	0f 92       	push	r0
 248:	00 90 5b 00 	lds	r0, 0x005B
 24c:	0f 92       	push	r0
 24e:	11 24       	eor	r1, r1
 250:	2f 93       	push	r18
 252:	3f 93       	push	r19
 254:	4f 93       	push	r20
 256:	5f 93       	push	r21
 258:	6f 93       	push	r22
 25a:	7f 93       	push	r23
 25c:	8f 93       	push	r24
 25e:	9f 93       	push	r25
 260:	af 93       	push	r26
 262:	bf 93       	push	r27
 264:	ef 93       	push	r30
 266:	ff 93       	push	r31
 268:	df 93       	push	r29
 26a:	cf 93       	push	r28
 26c:	cd b7       	in	r28, 0x3d	; 61
 26e:	de b7       	in	r29, 0x3e	; 62
 270:	2e 97       	sbiw	r28, 0x0e	; 14
 272:	de bf       	out	0x3e, r29	; 62
 274:	cd bf       	out	0x3d, r28	; 61
    EIMSK = 0x00;
 276:	e9 e5       	ldi	r30, 0x59	; 89
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	10 82       	st	Z, r1
    if (index <= 0) {
 27c:	80 91 08 01 	lds	r24, 0x0108
 280:	88 23       	and	r24, r24
 282:	21 f4       	brne	.+8      	; 0x28c <__vector_2+0x4c>
        index = 7;
 284:	87 e0       	ldi	r24, 0x07	; 7
 286:	80 93 08 01 	sts	0x0108, r24
 28a:	05 c0       	rjmp	.+10     	; 0x296 <__vector_2+0x56>
    } else {
        index--;
 28c:	80 91 08 01 	lds	r24, 0x0108
 290:	81 50       	subi	r24, 0x01	; 1
 292:	80 93 08 01 	sts	0x0108, r24
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	a8 ec       	ldi	r26, 0xC8	; 200
 29c:	b2 e4       	ldi	r27, 0x42	; 66
 29e:	8b 87       	std	Y+11, r24	; 0x0b
 2a0:	9c 87       	std	Y+12, r25	; 0x0c
 2a2:	ad 87       	std	Y+13, r26	; 0x0d
 2a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 2a6:	6b 85       	ldd	r22, Y+11	; 0x0b
 2a8:	7c 85       	ldd	r23, Y+12	; 0x0c
 2aa:	8d 85       	ldd	r24, Y+13	; 0x0d
 2ac:	9e 85       	ldd	r25, Y+14	; 0x0e
 2ae:	20 e0       	ldi	r18, 0x00	; 0
 2b0:	30 e0       	ldi	r19, 0x00	; 0
 2b2:	4a e7       	ldi	r20, 0x7A	; 122
 2b4:	53 e4       	ldi	r21, 0x43	; 67
 2b6:	0e 94 86 02 	call	0x50c	; 0x50c <__mulsf3>
 2ba:	dc 01       	movw	r26, r24
 2bc:	cb 01       	movw	r24, r22
 2be:	8f 83       	std	Y+7, r24	; 0x07
 2c0:	98 87       	std	Y+8, r25	; 0x08
 2c2:	a9 87       	std	Y+9, r26	; 0x09
 2c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
 2c6:	6f 81       	ldd	r22, Y+7	; 0x07
 2c8:	78 85       	ldd	r23, Y+8	; 0x08
 2ca:	89 85       	ldd	r24, Y+9	; 0x09
 2cc:	9a 85       	ldd	r25, Y+10	; 0x0a
 2ce:	20 e0       	ldi	r18, 0x00	; 0
 2d0:	30 e0       	ldi	r19, 0x00	; 0
 2d2:	40 e8       	ldi	r20, 0x80	; 128
 2d4:	5f e3       	ldi	r21, 0x3F	; 63
 2d6:	0e 94 05 02 	call	0x40a	; 0x40a <__cmpsf2>
 2da:	88 23       	and	r24, r24
 2dc:	2c f4       	brge	.+10     	; 0x2e8 <__vector_2+0xa8>
		__ticks = 1;
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	9e 83       	std	Y+6, r25	; 0x06
 2e4:	8d 83       	std	Y+5, r24	; 0x05
 2e6:	3f c0       	rjmp	.+126    	; 0x366 <__vector_2+0x126>
	else if (__tmp > 65535)
 2e8:	6f 81       	ldd	r22, Y+7	; 0x07
 2ea:	78 85       	ldd	r23, Y+8	; 0x08
 2ec:	89 85       	ldd	r24, Y+9	; 0x09
 2ee:	9a 85       	ldd	r25, Y+10	; 0x0a
 2f0:	20 e0       	ldi	r18, 0x00	; 0
 2f2:	3f ef       	ldi	r19, 0xFF	; 255
 2f4:	4f e7       	ldi	r20, 0x7F	; 127
 2f6:	57 e4       	ldi	r21, 0x47	; 71
 2f8:	0e 94 82 02 	call	0x504	; 0x504 <__gesf2>
 2fc:	18 16       	cp	r1, r24
 2fe:	4c f5       	brge	.+82     	; 0x352 <__vector_2+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 300:	6b 85       	ldd	r22, Y+11	; 0x0b
 302:	7c 85       	ldd	r23, Y+12	; 0x0c
 304:	8d 85       	ldd	r24, Y+13	; 0x0d
 306:	9e 85       	ldd	r25, Y+14	; 0x0e
 308:	20 e0       	ldi	r18, 0x00	; 0
 30a:	30 e0       	ldi	r19, 0x00	; 0
 30c:	40 e2       	ldi	r20, 0x20	; 32
 30e:	51 e4       	ldi	r21, 0x41	; 65
 310:	0e 94 86 02 	call	0x50c	; 0x50c <__mulsf3>
 314:	dc 01       	movw	r26, r24
 316:	cb 01       	movw	r24, r22
 318:	bc 01       	movw	r22, r24
 31a:	cd 01       	movw	r24, r26
 31c:	0e 94 09 02 	call	0x412	; 0x412 <__fixunssfsi>
 320:	dc 01       	movw	r26, r24
 322:	cb 01       	movw	r24, r22
 324:	9e 83       	std	Y+6, r25	; 0x06
 326:	8d 83       	std	Y+5, r24	; 0x05
 328:	0f c0       	rjmp	.+30     	; 0x348 <__vector_2+0x108>
 32a:	89 e1       	ldi	r24, 0x19	; 25
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	9c 83       	std	Y+4, r25	; 0x04
 330:	8b 83       	std	Y+3, r24	; 0x03
 332:	8b 81       	ldd	r24, Y+3	; 0x03
 334:	9c 81       	ldd	r25, Y+4	; 0x04
 336:	01 97       	sbiw	r24, 0x01	; 1
 338:	f1 f7       	brne	.-4      	; 0x336 <__vector_2+0xf6>
 33a:	9c 83       	std	Y+4, r25	; 0x04
 33c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 33e:	8d 81       	ldd	r24, Y+5	; 0x05
 340:	9e 81       	ldd	r25, Y+6	; 0x06
 342:	01 97       	sbiw	r24, 0x01	; 1
 344:	9e 83       	std	Y+6, r25	; 0x06
 346:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 348:	8d 81       	ldd	r24, Y+5	; 0x05
 34a:	9e 81       	ldd	r25, Y+6	; 0x06
 34c:	00 97       	sbiw	r24, 0x00	; 0
 34e:	69 f7       	brne	.-38     	; 0x32a <__vector_2+0xea>
 350:	14 c0       	rjmp	.+40     	; 0x37a <__vector_2+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 352:	6f 81       	ldd	r22, Y+7	; 0x07
 354:	78 85       	ldd	r23, Y+8	; 0x08
 356:	89 85       	ldd	r24, Y+9	; 0x09
 358:	9a 85       	ldd	r25, Y+10	; 0x0a
 35a:	0e 94 09 02 	call	0x412	; 0x412 <__fixunssfsi>
 35e:	dc 01       	movw	r26, r24
 360:	cb 01       	movw	r24, r22
 362:	9e 83       	std	Y+6, r25	; 0x06
 364:	8d 83       	std	Y+5, r24	; 0x05
 366:	8d 81       	ldd	r24, Y+5	; 0x05
 368:	9e 81       	ldd	r25, Y+6	; 0x06
 36a:	9a 83       	std	Y+2, r25	; 0x02
 36c:	89 83       	std	Y+1, r24	; 0x01
 36e:	89 81       	ldd	r24, Y+1	; 0x01
 370:	9a 81       	ldd	r25, Y+2	; 0x02
 372:	01 97       	sbiw	r24, 0x01	; 1
 374:	f1 f7       	brne	.-4      	; 0x372 <__vector_2+0x132>
 376:	9a 83       	std	Y+2, r25	; 0x02
 378:	89 83       	std	Y+1, r24	; 0x01
    }
    _delay_ms(100);
    EIMSK = 0x03;
 37a:	e9 e5       	ldi	r30, 0x59	; 89
 37c:	f0 e0       	ldi	r31, 0x00	; 0
 37e:	83 e0       	ldi	r24, 0x03	; 3
 380:	80 83       	st	Z, r24
}
 382:	2e 96       	adiw	r28, 0x0e	; 14
 384:	de bf       	out	0x3e, r29	; 62
 386:	cd bf       	out	0x3d, r28	; 61
 388:	cf 91       	pop	r28
 38a:	df 91       	pop	r29
 38c:	ff 91       	pop	r31
 38e:	ef 91       	pop	r30
 390:	bf 91       	pop	r27
 392:	af 91       	pop	r26
 394:	9f 91       	pop	r25
 396:	8f 91       	pop	r24
 398:	7f 91       	pop	r23
 39a:	6f 91       	pop	r22
 39c:	5f 91       	pop	r21
 39e:	4f 91       	pop	r20
 3a0:	3f 91       	pop	r19
 3a2:	2f 91       	pop	r18
 3a4:	0f 90       	pop	r0
 3a6:	00 92 5b 00 	sts	0x005B, r0
 3aa:	0f 90       	pop	r0
 3ac:	0f be       	out	0x3f, r0	; 63
 3ae:	0f 90       	pop	r0
 3b0:	1f 90       	pop	r1
 3b2:	18 95       	reti

000003b4 <main>:

int main(void) {
 3b4:	df 93       	push	r29
 3b6:	cf 93       	push	r28
 3b8:	cd b7       	in	r28, 0x3d	; 61
 3ba:	de b7       	in	r29, 0x3e	; 62
    DDRC = 0xFF;
 3bc:	e4 e3       	ldi	r30, 0x34	; 52
 3be:	f0 e0       	ldi	r31, 0x00	; 0
 3c0:	8f ef       	ldi	r24, 0xFF	; 255
 3c2:	80 83       	st	Z, r24
    PORTC = 0xFF;
 3c4:	e5 e3       	ldi	r30, 0x35	; 53
 3c6:	f0 e0       	ldi	r31, 0x00	; 0
 3c8:	8f ef       	ldi	r24, 0xFF	; 255
 3ca:	80 83       	st	Z, r24
    DDRD = 0x00;
 3cc:	e1 e3       	ldi	r30, 0x31	; 49
 3ce:	f0 e0       	ldi	r31, 0x00	; 0
 3d0:	10 82       	st	Z, r1
    PORTD = 0xFF;
 3d2:	e2 e3       	ldi	r30, 0x32	; 50
 3d4:	f0 e0       	ldi	r31, 0x00	; 0
 3d6:	8f ef       	ldi	r24, 0xFF	; 255
 3d8:	80 83       	st	Z, r24

    EICRA = 0x00;
 3da:	ea e6       	ldi	r30, 0x6A	; 106
 3dc:	f0 e0       	ldi	r31, 0x00	; 0
 3de:	10 82       	st	Z, r1
    EIMSK = 0x03;
 3e0:	e9 e5       	ldi	r30, 0x59	; 89
 3e2:	f0 e0       	ldi	r31, 0x00	; 0
 3e4:	83 e0       	ldi	r24, 0x03	; 3
 3e6:	80 83       	st	Z, r24
    SREG = 0x80;
 3e8:	ef e5       	ldi	r30, 0x5F	; 95
 3ea:	f0 e0       	ldi	r31, 0x00	; 0
 3ec:	80 e8       	ldi	r24, 0x80	; 128
 3ee:	80 83       	st	Z, r24

    while(1) {
        PORTC = ~seg[index];
 3f0:	a5 e3       	ldi	r26, 0x35	; 53
 3f2:	b0 e0       	ldi	r27, 0x00	; 0
 3f4:	80 91 08 01 	lds	r24, 0x0108
 3f8:	88 2f       	mov	r24, r24
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	fc 01       	movw	r30, r24
 3fe:	e0 50       	subi	r30, 0x00	; 0
 400:	ff 4f       	sbci	r31, 0xFF	; 255
 402:	80 81       	ld	r24, Z
 404:	80 95       	com	r24
 406:	8c 93       	st	X, r24
 408:	f3 cf       	rjmp	.-26     	; 0x3f0 <main+0x3c>

0000040a <__cmpsf2>:
 40a:	2f d0       	rcall	.+94     	; 0x46a <__fp_cmp>
 40c:	08 f4       	brcc	.+2      	; 0x410 <__cmpsf2+0x6>
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	08 95       	ret

00000412 <__fixunssfsi>:
 412:	57 d0       	rcall	.+174    	; 0x4c2 <__fp_splitA>
 414:	88 f0       	brcs	.+34     	; 0x438 <__fixunssfsi+0x26>
 416:	9f 57       	subi	r25, 0x7F	; 127
 418:	90 f0       	brcs	.+36     	; 0x43e <__fixunssfsi+0x2c>
 41a:	b9 2f       	mov	r27, r25
 41c:	99 27       	eor	r25, r25
 41e:	b7 51       	subi	r27, 0x17	; 23
 420:	a0 f0       	brcs	.+40     	; 0x44a <__fixunssfsi+0x38>
 422:	d1 f0       	breq	.+52     	; 0x458 <__fixunssfsi+0x46>
 424:	66 0f       	add	r22, r22
 426:	77 1f       	adc	r23, r23
 428:	88 1f       	adc	r24, r24
 42a:	99 1f       	adc	r25, r25
 42c:	1a f0       	brmi	.+6      	; 0x434 <__fixunssfsi+0x22>
 42e:	ba 95       	dec	r27
 430:	c9 f7       	brne	.-14     	; 0x424 <__fixunssfsi+0x12>
 432:	12 c0       	rjmp	.+36     	; 0x458 <__fixunssfsi+0x46>
 434:	b1 30       	cpi	r27, 0x01	; 1
 436:	81 f0       	breq	.+32     	; 0x458 <__fixunssfsi+0x46>
 438:	5e d0       	rcall	.+188    	; 0x4f6 <__fp_zero>
 43a:	b1 e0       	ldi	r27, 0x01	; 1
 43c:	08 95       	ret
 43e:	5b c0       	rjmp	.+182    	; 0x4f6 <__fp_zero>
 440:	67 2f       	mov	r22, r23
 442:	78 2f       	mov	r23, r24
 444:	88 27       	eor	r24, r24
 446:	b8 5f       	subi	r27, 0xF8	; 248
 448:	39 f0       	breq	.+14     	; 0x458 <__fixunssfsi+0x46>
 44a:	b9 3f       	cpi	r27, 0xF9	; 249
 44c:	cc f3       	brlt	.-14     	; 0x440 <__fixunssfsi+0x2e>
 44e:	86 95       	lsr	r24
 450:	77 95       	ror	r23
 452:	67 95       	ror	r22
 454:	b3 95       	inc	r27
 456:	d9 f7       	brne	.-10     	; 0x44e <__fixunssfsi+0x3c>
 458:	3e f4       	brtc	.+14     	; 0x468 <__fixunssfsi+0x56>
 45a:	90 95       	com	r25
 45c:	80 95       	com	r24
 45e:	70 95       	com	r23
 460:	61 95       	neg	r22
 462:	7f 4f       	sbci	r23, 0xFF	; 255
 464:	8f 4f       	sbci	r24, 0xFF	; 255
 466:	9f 4f       	sbci	r25, 0xFF	; 255
 468:	08 95       	ret

0000046a <__fp_cmp>:
 46a:	99 0f       	add	r25, r25
 46c:	00 08       	sbc	r0, r0
 46e:	55 0f       	add	r21, r21
 470:	aa 0b       	sbc	r26, r26
 472:	e0 e8       	ldi	r30, 0x80	; 128
 474:	fe ef       	ldi	r31, 0xFE	; 254
 476:	16 16       	cp	r1, r22
 478:	17 06       	cpc	r1, r23
 47a:	e8 07       	cpc	r30, r24
 47c:	f9 07       	cpc	r31, r25
 47e:	c0 f0       	brcs	.+48     	; 0x4b0 <__fp_cmp+0x46>
 480:	12 16       	cp	r1, r18
 482:	13 06       	cpc	r1, r19
 484:	e4 07       	cpc	r30, r20
 486:	f5 07       	cpc	r31, r21
 488:	98 f0       	brcs	.+38     	; 0x4b0 <__fp_cmp+0x46>
 48a:	62 1b       	sub	r22, r18
 48c:	73 0b       	sbc	r23, r19
 48e:	84 0b       	sbc	r24, r20
 490:	95 0b       	sbc	r25, r21
 492:	39 f4       	brne	.+14     	; 0x4a2 <__fp_cmp+0x38>
 494:	0a 26       	eor	r0, r26
 496:	61 f0       	breq	.+24     	; 0x4b0 <__fp_cmp+0x46>
 498:	23 2b       	or	r18, r19
 49a:	24 2b       	or	r18, r20
 49c:	25 2b       	or	r18, r21
 49e:	21 f4       	brne	.+8      	; 0x4a8 <__fp_cmp+0x3e>
 4a0:	08 95       	ret
 4a2:	0a 26       	eor	r0, r26
 4a4:	09 f4       	brne	.+2      	; 0x4a8 <__fp_cmp+0x3e>
 4a6:	a1 40       	sbci	r26, 0x01	; 1
 4a8:	a6 95       	lsr	r26
 4aa:	8f ef       	ldi	r24, 0xFF	; 255
 4ac:	81 1d       	adc	r24, r1
 4ae:	81 1d       	adc	r24, r1
 4b0:	08 95       	ret

000004b2 <__fp_split3>:
 4b2:	57 fd       	sbrc	r21, 7
 4b4:	90 58       	subi	r25, 0x80	; 128
 4b6:	44 0f       	add	r20, r20
 4b8:	55 1f       	adc	r21, r21
 4ba:	59 f0       	breq	.+22     	; 0x4d2 <__fp_splitA+0x10>
 4bc:	5f 3f       	cpi	r21, 0xFF	; 255
 4be:	71 f0       	breq	.+28     	; 0x4dc <__fp_splitA+0x1a>
 4c0:	47 95       	ror	r20

000004c2 <__fp_splitA>:
 4c2:	88 0f       	add	r24, r24
 4c4:	97 fb       	bst	r25, 7
 4c6:	99 1f       	adc	r25, r25
 4c8:	61 f0       	breq	.+24     	; 0x4e2 <__fp_splitA+0x20>
 4ca:	9f 3f       	cpi	r25, 0xFF	; 255
 4cc:	79 f0       	breq	.+30     	; 0x4ec <__fp_splitA+0x2a>
 4ce:	87 95       	ror	r24
 4d0:	08 95       	ret
 4d2:	12 16       	cp	r1, r18
 4d4:	13 06       	cpc	r1, r19
 4d6:	14 06       	cpc	r1, r20
 4d8:	55 1f       	adc	r21, r21
 4da:	f2 cf       	rjmp	.-28     	; 0x4c0 <__fp_split3+0xe>
 4dc:	46 95       	lsr	r20
 4de:	f1 df       	rcall	.-30     	; 0x4c2 <__fp_splitA>
 4e0:	08 c0       	rjmp	.+16     	; 0x4f2 <__fp_splitA+0x30>
 4e2:	16 16       	cp	r1, r22
 4e4:	17 06       	cpc	r1, r23
 4e6:	18 06       	cpc	r1, r24
 4e8:	99 1f       	adc	r25, r25
 4ea:	f1 cf       	rjmp	.-30     	; 0x4ce <__fp_splitA+0xc>
 4ec:	86 95       	lsr	r24
 4ee:	71 05       	cpc	r23, r1
 4f0:	61 05       	cpc	r22, r1
 4f2:	08 94       	sec
 4f4:	08 95       	ret

000004f6 <__fp_zero>:
 4f6:	e8 94       	clt

000004f8 <__fp_szero>:
 4f8:	bb 27       	eor	r27, r27
 4fa:	66 27       	eor	r22, r22
 4fc:	77 27       	eor	r23, r23
 4fe:	cb 01       	movw	r24, r22
 500:	97 f9       	bld	r25, 7
 502:	08 95       	ret

00000504 <__gesf2>:
 504:	b2 df       	rcall	.-156    	; 0x46a <__fp_cmp>
 506:	08 f4       	brcc	.+2      	; 0x50a <__gesf2+0x6>
 508:	8f ef       	ldi	r24, 0xFF	; 255
 50a:	08 95       	ret

0000050c <__mulsf3>:
 50c:	0b d0       	rcall	.+22     	; 0x524 <__mulsf3x>
 50e:	78 c0       	rjmp	.+240    	; 0x600 <__fp_round>
 510:	69 d0       	rcall	.+210    	; 0x5e4 <__fp_pscA>
 512:	28 f0       	brcs	.+10     	; 0x51e <__mulsf3+0x12>
 514:	6e d0       	rcall	.+220    	; 0x5f2 <__fp_pscB>
 516:	18 f0       	brcs	.+6      	; 0x51e <__mulsf3+0x12>
 518:	95 23       	and	r25, r21
 51a:	09 f0       	breq	.+2      	; 0x51e <__mulsf3+0x12>
 51c:	5a c0       	rjmp	.+180    	; 0x5d2 <__fp_inf>
 51e:	5f c0       	rjmp	.+190    	; 0x5de <__fp_nan>
 520:	11 24       	eor	r1, r1
 522:	ea cf       	rjmp	.-44     	; 0x4f8 <__fp_szero>

00000524 <__mulsf3x>:
 524:	c6 df       	rcall	.-116    	; 0x4b2 <__fp_split3>
 526:	a0 f3       	brcs	.-24     	; 0x510 <__mulsf3+0x4>

00000528 <__mulsf3_pse>:
 528:	95 9f       	mul	r25, r21
 52a:	d1 f3       	breq	.-12     	; 0x520 <__mulsf3+0x14>
 52c:	95 0f       	add	r25, r21
 52e:	50 e0       	ldi	r21, 0x00	; 0
 530:	55 1f       	adc	r21, r21
 532:	62 9f       	mul	r22, r18
 534:	f0 01       	movw	r30, r0
 536:	72 9f       	mul	r23, r18
 538:	bb 27       	eor	r27, r27
 53a:	f0 0d       	add	r31, r0
 53c:	b1 1d       	adc	r27, r1
 53e:	63 9f       	mul	r22, r19
 540:	aa 27       	eor	r26, r26
 542:	f0 0d       	add	r31, r0
 544:	b1 1d       	adc	r27, r1
 546:	aa 1f       	adc	r26, r26
 548:	64 9f       	mul	r22, r20
 54a:	66 27       	eor	r22, r22
 54c:	b0 0d       	add	r27, r0
 54e:	a1 1d       	adc	r26, r1
 550:	66 1f       	adc	r22, r22
 552:	82 9f       	mul	r24, r18
 554:	22 27       	eor	r18, r18
 556:	b0 0d       	add	r27, r0
 558:	a1 1d       	adc	r26, r1
 55a:	62 1f       	adc	r22, r18
 55c:	73 9f       	mul	r23, r19
 55e:	b0 0d       	add	r27, r0
 560:	a1 1d       	adc	r26, r1
 562:	62 1f       	adc	r22, r18
 564:	83 9f       	mul	r24, r19
 566:	a0 0d       	add	r26, r0
 568:	61 1d       	adc	r22, r1
 56a:	22 1f       	adc	r18, r18
 56c:	74 9f       	mul	r23, r20
 56e:	33 27       	eor	r19, r19
 570:	a0 0d       	add	r26, r0
 572:	61 1d       	adc	r22, r1
 574:	23 1f       	adc	r18, r19
 576:	84 9f       	mul	r24, r20
 578:	60 0d       	add	r22, r0
 57a:	21 1d       	adc	r18, r1
 57c:	82 2f       	mov	r24, r18
 57e:	76 2f       	mov	r23, r22
 580:	6a 2f       	mov	r22, r26
 582:	11 24       	eor	r1, r1
 584:	9f 57       	subi	r25, 0x7F	; 127
 586:	50 40       	sbci	r21, 0x00	; 0
 588:	8a f0       	brmi	.+34     	; 0x5ac <__mulsf3_pse+0x84>
 58a:	e1 f0       	breq	.+56     	; 0x5c4 <__mulsf3_pse+0x9c>
 58c:	88 23       	and	r24, r24
 58e:	4a f0       	brmi	.+18     	; 0x5a2 <__mulsf3_pse+0x7a>
 590:	ee 0f       	add	r30, r30
 592:	ff 1f       	adc	r31, r31
 594:	bb 1f       	adc	r27, r27
 596:	66 1f       	adc	r22, r22
 598:	77 1f       	adc	r23, r23
 59a:	88 1f       	adc	r24, r24
 59c:	91 50       	subi	r25, 0x01	; 1
 59e:	50 40       	sbci	r21, 0x00	; 0
 5a0:	a9 f7       	brne	.-22     	; 0x58c <__mulsf3_pse+0x64>
 5a2:	9e 3f       	cpi	r25, 0xFE	; 254
 5a4:	51 05       	cpc	r21, r1
 5a6:	70 f0       	brcs	.+28     	; 0x5c4 <__mulsf3_pse+0x9c>
 5a8:	14 c0       	rjmp	.+40     	; 0x5d2 <__fp_inf>
 5aa:	a6 cf       	rjmp	.-180    	; 0x4f8 <__fp_szero>
 5ac:	5f 3f       	cpi	r21, 0xFF	; 255
 5ae:	ec f3       	brlt	.-6      	; 0x5aa <__mulsf3_pse+0x82>
 5b0:	98 3e       	cpi	r25, 0xE8	; 232
 5b2:	dc f3       	brlt	.-10     	; 0x5aa <__mulsf3_pse+0x82>
 5b4:	86 95       	lsr	r24
 5b6:	77 95       	ror	r23
 5b8:	67 95       	ror	r22
 5ba:	b7 95       	ror	r27
 5bc:	f7 95       	ror	r31
 5be:	e7 95       	ror	r30
 5c0:	9f 5f       	subi	r25, 0xFF	; 255
 5c2:	c1 f7       	brne	.-16     	; 0x5b4 <__mulsf3_pse+0x8c>
 5c4:	fe 2b       	or	r31, r30
 5c6:	88 0f       	add	r24, r24
 5c8:	91 1d       	adc	r25, r1
 5ca:	96 95       	lsr	r25
 5cc:	87 95       	ror	r24
 5ce:	97 f9       	bld	r25, 7
 5d0:	08 95       	ret

000005d2 <__fp_inf>:
 5d2:	97 f9       	bld	r25, 7
 5d4:	9f 67       	ori	r25, 0x7F	; 127
 5d6:	80 e8       	ldi	r24, 0x80	; 128
 5d8:	70 e0       	ldi	r23, 0x00	; 0
 5da:	60 e0       	ldi	r22, 0x00	; 0
 5dc:	08 95       	ret

000005de <__fp_nan>:
 5de:	9f ef       	ldi	r25, 0xFF	; 255
 5e0:	80 ec       	ldi	r24, 0xC0	; 192
 5e2:	08 95       	ret

000005e4 <__fp_pscA>:
 5e4:	00 24       	eor	r0, r0
 5e6:	0a 94       	dec	r0
 5e8:	16 16       	cp	r1, r22
 5ea:	17 06       	cpc	r1, r23
 5ec:	18 06       	cpc	r1, r24
 5ee:	09 06       	cpc	r0, r25
 5f0:	08 95       	ret

000005f2 <__fp_pscB>:
 5f2:	00 24       	eor	r0, r0
 5f4:	0a 94       	dec	r0
 5f6:	12 16       	cp	r1, r18
 5f8:	13 06       	cpc	r1, r19
 5fa:	14 06       	cpc	r1, r20
 5fc:	05 06       	cpc	r0, r21
 5fe:	08 95       	ret

00000600 <__fp_round>:
 600:	09 2e       	mov	r0, r25
 602:	03 94       	inc	r0
 604:	00 0c       	add	r0, r0
 606:	11 f4       	brne	.+4      	; 0x60c <__fp_round+0xc>
 608:	88 23       	and	r24, r24
 60a:	52 f0       	brmi	.+20     	; 0x620 <__fp_round+0x20>
 60c:	bb 0f       	add	r27, r27
 60e:	40 f4       	brcc	.+16     	; 0x620 <__fp_round+0x20>
 610:	bf 2b       	or	r27, r31
 612:	11 f4       	brne	.+4      	; 0x618 <__fp_round+0x18>
 614:	60 ff       	sbrs	r22, 0
 616:	04 c0       	rjmp	.+8      	; 0x620 <__fp_round+0x20>
 618:	6f 5f       	subi	r22, 0xFF	; 255
 61a:	7f 4f       	sbci	r23, 0xFF	; 255
 61c:	8f 4f       	sbci	r24, 0xFF	; 255
 61e:	9f 4f       	sbci	r25, 0xFF	; 255
 620:	08 95       	ret

00000622 <_exit>:
 622:	f8 94       	cli

00000624 <__stop_program>:
 624:	ff cf       	rjmp	.-2      	; 0x624 <__stop_program>
