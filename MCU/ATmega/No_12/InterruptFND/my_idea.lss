
my_idea.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000776  0000080a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000776  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800110  00800110  0000081a  2**0
                  ALLOC
  3 .stab         00000624  00000000  00000000  0000081c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000792  00000000  00000000  00000e40  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_1>
   8:	0c 94 42 01 	jmp	0x284	; 0x284 <__vector_2>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e7       	ldi	r30, 0x76	; 118
  a0:	f7 e0       	ldi	r31, 0x07	; 7
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a0 e1       	ldi	r26, 0x10	; 16
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 31       	cpi	r26, 0x18	; 24
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 1d 02 	call	0x43a	; 0x43a <main>
  c6:	0c 94 b9 03 	jmp	0x772	; 0x772 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <__vector_1>:
char digit[16] = {
    0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 
    0x80, 0x90, 0x88, 0x83, 0xC6, 0xA1, 0x86, 0x8E
};

ISR (INT0_vect) {
  ce:	1f 92       	push	r1
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	00 90 5b 00 	lds	r0, 0x005B
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
  de:	2f 93       	push	r18
  e0:	3f 93       	push	r19
  e2:	4f 93       	push	r20
  e4:	5f 93       	push	r21
  e6:	6f 93       	push	r22
  e8:	7f 93       	push	r23
  ea:	8f 93       	push	r24
  ec:	9f 93       	push	r25
  ee:	af 93       	push	r26
  f0:	bf 93       	push	r27
  f2:	ef 93       	push	r30
  f4:	ff 93       	push	r31
  f6:	df 93       	push	r29
  f8:	cf 93       	push	r28
  fa:	cd b7       	in	r28, 0x3d	; 61
  fc:	de b7       	in	r29, 0x3e	; 62
  fe:	60 97       	sbiw	r28, 0x10	; 16
 100:	de bf       	out	0x3e, r29	; 62
 102:	cd bf       	out	0x3d, r28	; 61
    EIMSK = 0x00;
 104:	e9 e5       	ldi	r30, 0x59	; 89
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	10 82       	st	Z, r1
    if (indexB >= 15) {
 10a:	80 91 12 01 	lds	r24, 0x0112
 10e:	90 91 13 01 	lds	r25, 0x0113
 112:	8f 30       	cpi	r24, 0x0F	; 15
 114:	91 05       	cpc	r25, r1
 116:	f4 f0       	brlt	.+60     	; 0x154 <__vector_1+0x86>
        indexB = 0;
 118:	10 92 13 01 	sts	0x0113, r1
 11c:	10 92 12 01 	sts	0x0112, r1
        indexA = indexA >= 15 ? 0 : indexA + 1;
 120:	80 91 10 01 	lds	r24, 0x0110
 124:	90 91 11 01 	lds	r25, 0x0111
 128:	8f 30       	cpi	r24, 0x0F	; 15
 12a:	91 05       	cpc	r25, r1
 12c:	54 f4       	brge	.+20     	; 0x142 <__vector_1+0x74>
 12e:	80 91 10 01 	lds	r24, 0x0110
 132:	90 91 11 01 	lds	r25, 0x0111
 136:	9c 01       	movw	r18, r24
 138:	2f 5f       	subi	r18, 0xFF	; 255
 13a:	3f 4f       	sbci	r19, 0xFF	; 255
 13c:	38 8b       	std	Y+16, r19	; 0x10
 13e:	2f 87       	std	Y+15, r18	; 0x0f
 140:	02 c0       	rjmp	.+4      	; 0x146 <__vector_1+0x78>
 142:	18 8a       	std	Y+16, r1	; 0x10
 144:	1f 86       	std	Y+15, r1	; 0x0f
 146:	8f 85       	ldd	r24, Y+15	; 0x0f
 148:	98 89       	ldd	r25, Y+16	; 0x10
 14a:	90 93 11 01 	sts	0x0111, r25
 14e:	80 93 10 01 	sts	0x0110, r24
 152:	09 c0       	rjmp	.+18     	; 0x166 <__vector_1+0x98>
    } else {
        indexB++;
 154:	80 91 12 01 	lds	r24, 0x0112
 158:	90 91 13 01 	lds	r25, 0x0113
 15c:	01 96       	adiw	r24, 0x01	; 1
 15e:	90 93 13 01 	sts	0x0113, r25
 162:	80 93 12 01 	sts	0x0112, r24
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	a8 ec       	ldi	r26, 0xC8	; 200
 16c:	b2 e4       	ldi	r27, 0x42	; 66
 16e:	8b 87       	std	Y+11, r24	; 0x0b
 170:	9c 87       	std	Y+12, r25	; 0x0c
 172:	ad 87       	std	Y+13, r26	; 0x0d
 174:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 176:	6b 85       	ldd	r22, Y+11	; 0x0b
 178:	7c 85       	ldd	r23, Y+12	; 0x0c
 17a:	8d 85       	ldd	r24, Y+13	; 0x0d
 17c:	9e 85       	ldd	r25, Y+14	; 0x0e
 17e:	20 e0       	ldi	r18, 0x00	; 0
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	4a e7       	ldi	r20, 0x7A	; 122
 184:	53 e4       	ldi	r21, 0x43	; 67
 186:	0e 94 2e 03 	call	0x65c	; 0x65c <__mulsf3>
 18a:	dc 01       	movw	r26, r24
 18c:	cb 01       	movw	r24, r22
 18e:	8f 83       	std	Y+7, r24	; 0x07
 190:	98 87       	std	Y+8, r25	; 0x08
 192:	a9 87       	std	Y+9, r26	; 0x09
 194:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
 196:	6f 81       	ldd	r22, Y+7	; 0x07
 198:	78 85       	ldd	r23, Y+8	; 0x08
 19a:	89 85       	ldd	r24, Y+9	; 0x09
 19c:	9a 85       	ldd	r25, Y+10	; 0x0a
 19e:	20 e0       	ldi	r18, 0x00	; 0
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	40 e8       	ldi	r20, 0x80	; 128
 1a4:	5f e3       	ldi	r21, 0x3F	; 63
 1a6:	0e 94 ad 02 	call	0x55a	; 0x55a <__cmpsf2>
 1aa:	88 23       	and	r24, r24
 1ac:	2c f4       	brge	.+10     	; 0x1b8 <__vector_1+0xea>
		__ticks = 1;
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	9e 83       	std	Y+6, r25	; 0x06
 1b4:	8d 83       	std	Y+5, r24	; 0x05
 1b6:	3f c0       	rjmp	.+126    	; 0x236 <__vector_1+0x168>
	else if (__tmp > 65535)
 1b8:	6f 81       	ldd	r22, Y+7	; 0x07
 1ba:	78 85       	ldd	r23, Y+8	; 0x08
 1bc:	89 85       	ldd	r24, Y+9	; 0x09
 1be:	9a 85       	ldd	r25, Y+10	; 0x0a
 1c0:	20 e0       	ldi	r18, 0x00	; 0
 1c2:	3f ef       	ldi	r19, 0xFF	; 255
 1c4:	4f e7       	ldi	r20, 0x7F	; 127
 1c6:	57 e4       	ldi	r21, 0x47	; 71
 1c8:	0e 94 2a 03 	call	0x654	; 0x654 <__gesf2>
 1cc:	18 16       	cp	r1, r24
 1ce:	4c f5       	brge	.+82     	; 0x222 <__vector_1+0x154>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1d0:	6b 85       	ldd	r22, Y+11	; 0x0b
 1d2:	7c 85       	ldd	r23, Y+12	; 0x0c
 1d4:	8d 85       	ldd	r24, Y+13	; 0x0d
 1d6:	9e 85       	ldd	r25, Y+14	; 0x0e
 1d8:	20 e0       	ldi	r18, 0x00	; 0
 1da:	30 e0       	ldi	r19, 0x00	; 0
 1dc:	40 e2       	ldi	r20, 0x20	; 32
 1de:	51 e4       	ldi	r21, 0x41	; 65
 1e0:	0e 94 2e 03 	call	0x65c	; 0x65c <__mulsf3>
 1e4:	dc 01       	movw	r26, r24
 1e6:	cb 01       	movw	r24, r22
 1e8:	bc 01       	movw	r22, r24
 1ea:	cd 01       	movw	r24, r26
 1ec:	0e 94 b1 02 	call	0x562	; 0x562 <__fixunssfsi>
 1f0:	dc 01       	movw	r26, r24
 1f2:	cb 01       	movw	r24, r22
 1f4:	9e 83       	std	Y+6, r25	; 0x06
 1f6:	8d 83       	std	Y+5, r24	; 0x05
 1f8:	0f c0       	rjmp	.+30     	; 0x218 <__vector_1+0x14a>
 1fa:	89 e1       	ldi	r24, 0x19	; 25
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	9c 83       	std	Y+4, r25	; 0x04
 200:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 202:	8b 81       	ldd	r24, Y+3	; 0x03
 204:	9c 81       	ldd	r25, Y+4	; 0x04
 206:	01 97       	sbiw	r24, 0x01	; 1
 208:	f1 f7       	brne	.-4      	; 0x206 <__vector_1+0x138>
 20a:	9c 83       	std	Y+4, r25	; 0x04
 20c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 20e:	8d 81       	ldd	r24, Y+5	; 0x05
 210:	9e 81       	ldd	r25, Y+6	; 0x06
 212:	01 97       	sbiw	r24, 0x01	; 1
 214:	9e 83       	std	Y+6, r25	; 0x06
 216:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 218:	8d 81       	ldd	r24, Y+5	; 0x05
 21a:	9e 81       	ldd	r25, Y+6	; 0x06
 21c:	00 97       	sbiw	r24, 0x00	; 0
 21e:	69 f7       	brne	.-38     	; 0x1fa <__vector_1+0x12c>
 220:	14 c0       	rjmp	.+40     	; 0x24a <__vector_1+0x17c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 222:	6f 81       	ldd	r22, Y+7	; 0x07
 224:	78 85       	ldd	r23, Y+8	; 0x08
 226:	89 85       	ldd	r24, Y+9	; 0x09
 228:	9a 85       	ldd	r25, Y+10	; 0x0a
 22a:	0e 94 b1 02 	call	0x562	; 0x562 <__fixunssfsi>
 22e:	dc 01       	movw	r26, r24
 230:	cb 01       	movw	r24, r22
 232:	9e 83       	std	Y+6, r25	; 0x06
 234:	8d 83       	std	Y+5, r24	; 0x05
 236:	8d 81       	ldd	r24, Y+5	; 0x05
 238:	9e 81       	ldd	r25, Y+6	; 0x06
 23a:	9a 83       	std	Y+2, r25	; 0x02
 23c:	89 83       	std	Y+1, r24	; 0x01
 23e:	89 81       	ldd	r24, Y+1	; 0x01
 240:	9a 81       	ldd	r25, Y+2	; 0x02
 242:	01 97       	sbiw	r24, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <__vector_1+0x174>
 246:	9a 83       	std	Y+2, r25	; 0x02
 248:	89 83       	std	Y+1, r24	; 0x01
    }
    _delay_ms(100);
    EIMSK = 0x03;
 24a:	e9 e5       	ldi	r30, 0x59	; 89
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	83 e0       	ldi	r24, 0x03	; 3
 250:	80 83       	st	Z, r24
}
 252:	60 96       	adiw	r28, 0x10	; 16
 254:	de bf       	out	0x3e, r29	; 62
 256:	cd bf       	out	0x3d, r28	; 61
 258:	cf 91       	pop	r28
 25a:	df 91       	pop	r29
 25c:	ff 91       	pop	r31
 25e:	ef 91       	pop	r30
 260:	bf 91       	pop	r27
 262:	af 91       	pop	r26
 264:	9f 91       	pop	r25
 266:	8f 91       	pop	r24
 268:	7f 91       	pop	r23
 26a:	6f 91       	pop	r22
 26c:	5f 91       	pop	r21
 26e:	4f 91       	pop	r20
 270:	3f 91       	pop	r19
 272:	2f 91       	pop	r18
 274:	0f 90       	pop	r0
 276:	00 92 5b 00 	sts	0x005B, r0
 27a:	0f 90       	pop	r0
 27c:	0f be       	out	0x3f, r0	; 63
 27e:	0f 90       	pop	r0
 280:	1f 90       	pop	r1
 282:	18 95       	reti

00000284 <__vector_2>:
ISR (INT1_vect) {
 284:	1f 92       	push	r1
 286:	0f 92       	push	r0
 288:	0f b6       	in	r0, 0x3f	; 63
 28a:	0f 92       	push	r0
 28c:	00 90 5b 00 	lds	r0, 0x005B
 290:	0f 92       	push	r0
 292:	11 24       	eor	r1, r1
 294:	2f 93       	push	r18
 296:	3f 93       	push	r19
 298:	4f 93       	push	r20
 29a:	5f 93       	push	r21
 29c:	6f 93       	push	r22
 29e:	7f 93       	push	r23
 2a0:	8f 93       	push	r24
 2a2:	9f 93       	push	r25
 2a4:	af 93       	push	r26
 2a6:	bf 93       	push	r27
 2a8:	ef 93       	push	r30
 2aa:	ff 93       	push	r31
 2ac:	df 93       	push	r29
 2ae:	cf 93       	push	r28
 2b0:	cd b7       	in	r28, 0x3d	; 61
 2b2:	de b7       	in	r29, 0x3e	; 62
 2b4:	60 97       	sbiw	r28, 0x10	; 16
 2b6:	de bf       	out	0x3e, r29	; 62
 2b8:	cd bf       	out	0x3d, r28	; 61
    EIMSK = 0x00;
 2ba:	e9 e5       	ldi	r30, 0x59	; 89
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	10 82       	st	Z, r1
    if (indexE >= 15) {
 2c0:	80 91 16 01 	lds	r24, 0x0116
 2c4:	90 91 17 01 	lds	r25, 0x0117
 2c8:	8f 30       	cpi	r24, 0x0F	; 15
 2ca:	91 05       	cpc	r25, r1
 2cc:	f4 f0       	brlt	.+60     	; 0x30a <__vector_2+0x86>
        indexE = 0;
 2ce:	10 92 17 01 	sts	0x0117, r1
 2d2:	10 92 16 01 	sts	0x0116, r1
        indexC = indexC >= 15 ? 0 : indexC + 1;
 2d6:	80 91 14 01 	lds	r24, 0x0114
 2da:	90 91 15 01 	lds	r25, 0x0115
 2de:	8f 30       	cpi	r24, 0x0F	; 15
 2e0:	91 05       	cpc	r25, r1
 2e2:	54 f4       	brge	.+20     	; 0x2f8 <__vector_2+0x74>
 2e4:	80 91 14 01 	lds	r24, 0x0114
 2e8:	90 91 15 01 	lds	r25, 0x0115
 2ec:	9c 01       	movw	r18, r24
 2ee:	2f 5f       	subi	r18, 0xFF	; 255
 2f0:	3f 4f       	sbci	r19, 0xFF	; 255
 2f2:	38 8b       	std	Y+16, r19	; 0x10
 2f4:	2f 87       	std	Y+15, r18	; 0x0f
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <__vector_2+0x78>
 2f8:	18 8a       	std	Y+16, r1	; 0x10
 2fa:	1f 86       	std	Y+15, r1	; 0x0f
 2fc:	8f 85       	ldd	r24, Y+15	; 0x0f
 2fe:	98 89       	ldd	r25, Y+16	; 0x10
 300:	90 93 15 01 	sts	0x0115, r25
 304:	80 93 14 01 	sts	0x0114, r24
 308:	09 c0       	rjmp	.+18     	; 0x31c <__vector_2+0x98>
    } else {
        indexE++;
 30a:	80 91 16 01 	lds	r24, 0x0116
 30e:	90 91 17 01 	lds	r25, 0x0117
 312:	01 96       	adiw	r24, 0x01	; 1
 314:	90 93 17 01 	sts	0x0117, r25
 318:	80 93 16 01 	sts	0x0116, r24
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	a8 ec       	ldi	r26, 0xC8	; 200
 322:	b2 e4       	ldi	r27, 0x42	; 66
 324:	8b 87       	std	Y+11, r24	; 0x0b
 326:	9c 87       	std	Y+12, r25	; 0x0c
 328:	ad 87       	std	Y+13, r26	; 0x0d
 32a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 32c:	6b 85       	ldd	r22, Y+11	; 0x0b
 32e:	7c 85       	ldd	r23, Y+12	; 0x0c
 330:	8d 85       	ldd	r24, Y+13	; 0x0d
 332:	9e 85       	ldd	r25, Y+14	; 0x0e
 334:	20 e0       	ldi	r18, 0x00	; 0
 336:	30 e0       	ldi	r19, 0x00	; 0
 338:	4a e7       	ldi	r20, 0x7A	; 122
 33a:	53 e4       	ldi	r21, 0x43	; 67
 33c:	0e 94 2e 03 	call	0x65c	; 0x65c <__mulsf3>
 340:	dc 01       	movw	r26, r24
 342:	cb 01       	movw	r24, r22
 344:	8f 83       	std	Y+7, r24	; 0x07
 346:	98 87       	std	Y+8, r25	; 0x08
 348:	a9 87       	std	Y+9, r26	; 0x09
 34a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
 34c:	6f 81       	ldd	r22, Y+7	; 0x07
 34e:	78 85       	ldd	r23, Y+8	; 0x08
 350:	89 85       	ldd	r24, Y+9	; 0x09
 352:	9a 85       	ldd	r25, Y+10	; 0x0a
 354:	20 e0       	ldi	r18, 0x00	; 0
 356:	30 e0       	ldi	r19, 0x00	; 0
 358:	40 e8       	ldi	r20, 0x80	; 128
 35a:	5f e3       	ldi	r21, 0x3F	; 63
 35c:	0e 94 ad 02 	call	0x55a	; 0x55a <__cmpsf2>
 360:	88 23       	and	r24, r24
 362:	2c f4       	brge	.+10     	; 0x36e <__vector_2+0xea>
		__ticks = 1;
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	9e 83       	std	Y+6, r25	; 0x06
 36a:	8d 83       	std	Y+5, r24	; 0x05
 36c:	3f c0       	rjmp	.+126    	; 0x3ec <__vector_2+0x168>
	else if (__tmp > 65535)
 36e:	6f 81       	ldd	r22, Y+7	; 0x07
 370:	78 85       	ldd	r23, Y+8	; 0x08
 372:	89 85       	ldd	r24, Y+9	; 0x09
 374:	9a 85       	ldd	r25, Y+10	; 0x0a
 376:	20 e0       	ldi	r18, 0x00	; 0
 378:	3f ef       	ldi	r19, 0xFF	; 255
 37a:	4f e7       	ldi	r20, 0x7F	; 127
 37c:	57 e4       	ldi	r21, 0x47	; 71
 37e:	0e 94 2a 03 	call	0x654	; 0x654 <__gesf2>
 382:	18 16       	cp	r1, r24
 384:	4c f5       	brge	.+82     	; 0x3d8 <__vector_2+0x154>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 386:	6b 85       	ldd	r22, Y+11	; 0x0b
 388:	7c 85       	ldd	r23, Y+12	; 0x0c
 38a:	8d 85       	ldd	r24, Y+13	; 0x0d
 38c:	9e 85       	ldd	r25, Y+14	; 0x0e
 38e:	20 e0       	ldi	r18, 0x00	; 0
 390:	30 e0       	ldi	r19, 0x00	; 0
 392:	40 e2       	ldi	r20, 0x20	; 32
 394:	51 e4       	ldi	r21, 0x41	; 65
 396:	0e 94 2e 03 	call	0x65c	; 0x65c <__mulsf3>
 39a:	dc 01       	movw	r26, r24
 39c:	cb 01       	movw	r24, r22
 39e:	bc 01       	movw	r22, r24
 3a0:	cd 01       	movw	r24, r26
 3a2:	0e 94 b1 02 	call	0x562	; 0x562 <__fixunssfsi>
 3a6:	dc 01       	movw	r26, r24
 3a8:	cb 01       	movw	r24, r22
 3aa:	9e 83       	std	Y+6, r25	; 0x06
 3ac:	8d 83       	std	Y+5, r24	; 0x05
 3ae:	0f c0       	rjmp	.+30     	; 0x3ce <__vector_2+0x14a>
 3b0:	89 e1       	ldi	r24, 0x19	; 25
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	9c 83       	std	Y+4, r25	; 0x04
 3b6:	8b 83       	std	Y+3, r24	; 0x03
 3b8:	8b 81       	ldd	r24, Y+3	; 0x03
 3ba:	9c 81       	ldd	r25, Y+4	; 0x04
 3bc:	01 97       	sbiw	r24, 0x01	; 1
 3be:	f1 f7       	brne	.-4      	; 0x3bc <__vector_2+0x138>
 3c0:	9c 83       	std	Y+4, r25	; 0x04
 3c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3c4:	8d 81       	ldd	r24, Y+5	; 0x05
 3c6:	9e 81       	ldd	r25, Y+6	; 0x06
 3c8:	01 97       	sbiw	r24, 0x01	; 1
 3ca:	9e 83       	std	Y+6, r25	; 0x06
 3cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3ce:	8d 81       	ldd	r24, Y+5	; 0x05
 3d0:	9e 81       	ldd	r25, Y+6	; 0x06
 3d2:	00 97       	sbiw	r24, 0x00	; 0
 3d4:	69 f7       	brne	.-38     	; 0x3b0 <__vector_2+0x12c>
 3d6:	14 c0       	rjmp	.+40     	; 0x400 <__vector_2+0x17c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 3d8:	6f 81       	ldd	r22, Y+7	; 0x07
 3da:	78 85       	ldd	r23, Y+8	; 0x08
 3dc:	89 85       	ldd	r24, Y+9	; 0x09
 3de:	9a 85       	ldd	r25, Y+10	; 0x0a
 3e0:	0e 94 b1 02 	call	0x562	; 0x562 <__fixunssfsi>
 3e4:	dc 01       	movw	r26, r24
 3e6:	cb 01       	movw	r24, r22
 3e8:	9e 83       	std	Y+6, r25	; 0x06
 3ea:	8d 83       	std	Y+5, r24	; 0x05
 3ec:	8d 81       	ldd	r24, Y+5	; 0x05
 3ee:	9e 81       	ldd	r25, Y+6	; 0x06
 3f0:	9a 83       	std	Y+2, r25	; 0x02
 3f2:	89 83       	std	Y+1, r24	; 0x01
 3f4:	89 81       	ldd	r24, Y+1	; 0x01
 3f6:	9a 81       	ldd	r25, Y+2	; 0x02
 3f8:	01 97       	sbiw	r24, 0x01	; 1
 3fa:	f1 f7       	brne	.-4      	; 0x3f8 <__vector_2+0x174>
 3fc:	9a 83       	std	Y+2, r25	; 0x02
 3fe:	89 83       	std	Y+1, r24	; 0x01
    }
    _delay_ms(100);
    EIMSK = 0x03;
 400:	e9 e5       	ldi	r30, 0x59	; 89
 402:	f0 e0       	ldi	r31, 0x00	; 0
 404:	83 e0       	ldi	r24, 0x03	; 3
 406:	80 83       	st	Z, r24
}
 408:	60 96       	adiw	r28, 0x10	; 16
 40a:	de bf       	out	0x3e, r29	; 62
 40c:	cd bf       	out	0x3d, r28	; 61
 40e:	cf 91       	pop	r28
 410:	df 91       	pop	r29
 412:	ff 91       	pop	r31
 414:	ef 91       	pop	r30
 416:	bf 91       	pop	r27
 418:	af 91       	pop	r26
 41a:	9f 91       	pop	r25
 41c:	8f 91       	pop	r24
 41e:	7f 91       	pop	r23
 420:	6f 91       	pop	r22
 422:	5f 91       	pop	r21
 424:	4f 91       	pop	r20
 426:	3f 91       	pop	r19
 428:	2f 91       	pop	r18
 42a:	0f 90       	pop	r0
 42c:	00 92 5b 00 	sts	0x005B, r0
 430:	0f 90       	pop	r0
 432:	0f be       	out	0x3f, r0	; 63
 434:	0f 90       	pop	r0
 436:	1f 90       	pop	r1
 438:	18 95       	reti

0000043a <main>:

int main(void) {
 43a:	df 93       	push	r29
 43c:	cf 93       	push	r28
 43e:	cd b7       	in	r28, 0x3d	; 61
 440:	de b7       	in	r29, 0x3e	; 62
    DDRA = 0xFF; DDRB = 0xFF;
 442:	ea e3       	ldi	r30, 0x3A	; 58
 444:	f0 e0       	ldi	r31, 0x00	; 0
 446:	8f ef       	ldi	r24, 0xFF	; 255
 448:	80 83       	st	Z, r24
 44a:	e7 e3       	ldi	r30, 0x37	; 55
 44c:	f0 e0       	ldi	r31, 0x00	; 0
 44e:	8f ef       	ldi	r24, 0xFF	; 255
 450:	80 83       	st	Z, r24
    DDRC = 0xFF; DDRE = 0xFF;
 452:	e4 e3       	ldi	r30, 0x34	; 52
 454:	f0 e0       	ldi	r31, 0x00	; 0
 456:	8f ef       	ldi	r24, 0xFF	; 255
 458:	80 83       	st	Z, r24
 45a:	e2 e2       	ldi	r30, 0x22	; 34
 45c:	f0 e0       	ldi	r31, 0x00	; 0
 45e:	8f ef       	ldi	r24, 0xFF	; 255
 460:	80 83       	st	Z, r24
    DDRF = 0xFF; DDRG = 0xFF;
 462:	e1 e6       	ldi	r30, 0x61	; 97
 464:	f0 e0       	ldi	r31, 0x00	; 0
 466:	8f ef       	ldi	r24, 0xFF	; 255
 468:	80 83       	st	Z, r24
 46a:	e4 e6       	ldi	r30, 0x64	; 100
 46c:	f0 e0       	ldi	r31, 0x00	; 0
 46e:	8f ef       	ldi	r24, 0xFF	; 255
 470:	80 83       	st	Z, r24

    DDRD = 0x00;
 472:	e1 e3       	ldi	r30, 0x31	; 49
 474:	f0 e0       	ldi	r31, 0x00	; 0
 476:	10 82       	st	Z, r1

    PORTA = digit[indexA]; PORTB = digit[indexB];
 478:	ab e3       	ldi	r26, 0x3B	; 59
 47a:	b0 e0       	ldi	r27, 0x00	; 0
 47c:	80 91 10 01 	lds	r24, 0x0110
 480:	90 91 11 01 	lds	r25, 0x0111
 484:	fc 01       	movw	r30, r24
 486:	e0 50       	subi	r30, 0x00	; 0
 488:	ff 4f       	sbci	r31, 0xFF	; 255
 48a:	80 81       	ld	r24, Z
 48c:	8c 93       	st	X, r24
 48e:	a8 e3       	ldi	r26, 0x38	; 56
 490:	b0 e0       	ldi	r27, 0x00	; 0
 492:	80 91 12 01 	lds	r24, 0x0112
 496:	90 91 13 01 	lds	r25, 0x0113
 49a:	fc 01       	movw	r30, r24
 49c:	e0 50       	subi	r30, 0x00	; 0
 49e:	ff 4f       	sbci	r31, 0xFF	; 255
 4a0:	80 81       	ld	r24, Z
 4a2:	8c 93       	st	X, r24
    PORTC = digit[indexC]; PORTE = digit[indexE];
 4a4:	a5 e3       	ldi	r26, 0x35	; 53
 4a6:	b0 e0       	ldi	r27, 0x00	; 0
 4a8:	80 91 14 01 	lds	r24, 0x0114
 4ac:	90 91 15 01 	lds	r25, 0x0115
 4b0:	fc 01       	movw	r30, r24
 4b2:	e0 50       	subi	r30, 0x00	; 0
 4b4:	ff 4f       	sbci	r31, 0xFF	; 255
 4b6:	80 81       	ld	r24, Z
 4b8:	8c 93       	st	X, r24
 4ba:	a3 e2       	ldi	r26, 0x23	; 35
 4bc:	b0 e0       	ldi	r27, 0x00	; 0
 4be:	80 91 16 01 	lds	r24, 0x0116
 4c2:	90 91 17 01 	lds	r25, 0x0117
 4c6:	fc 01       	movw	r30, r24
 4c8:	e0 50       	subi	r30, 0x00	; 0
 4ca:	ff 4f       	sbci	r31, 0xFF	; 255
 4cc:	80 81       	ld	r24, Z
 4ce:	8c 93       	st	X, r24
    PORTF = digit[0];
 4d0:	e2 e6       	ldi	r30, 0x62	; 98
 4d2:	f0 e0       	ldi	r31, 0x00	; 0
 4d4:	80 91 00 01 	lds	r24, 0x0100
 4d8:	80 83       	st	Z, r24

    PORTG = 0xFF;
 4da:	e5 e6       	ldi	r30, 0x65	; 101
 4dc:	f0 e0       	ldi	r31, 0x00	; 0
 4de:	8f ef       	ldi	r24, 0xFF	; 255
 4e0:	80 83       	st	Z, r24
    PORTD = 0xFF;
 4e2:	e2 e3       	ldi	r30, 0x32	; 50
 4e4:	f0 e0       	ldi	r31, 0x00	; 0
 4e6:	8f ef       	ldi	r24, 0xFF	; 255
 4e8:	80 83       	st	Z, r24

    EICRA = 0x00;
 4ea:	ea e6       	ldi	r30, 0x6A	; 106
 4ec:	f0 e0       	ldi	r31, 0x00	; 0
 4ee:	10 82       	st	Z, r1
    EIMSK = 0x03;
 4f0:	e9 e5       	ldi	r30, 0x59	; 89
 4f2:	f0 e0       	ldi	r31, 0x00	; 0
 4f4:	83 e0       	ldi	r24, 0x03	; 3
 4f6:	80 83       	st	Z, r24
    SREG = 0x80;
 4f8:	ef e5       	ldi	r30, 0x5F	; 95
 4fa:	f0 e0       	ldi	r31, 0x00	; 0
 4fc:	80 e8       	ldi	r24, 0x80	; 128
 4fe:	80 83       	st	Z, r24

    while(1) {             // Infinite loop; define here the
        PORTA = digit[indexA];
 500:	ab e3       	ldi	r26, 0x3B	; 59
 502:	b0 e0       	ldi	r27, 0x00	; 0
 504:	80 91 10 01 	lds	r24, 0x0110
 508:	90 91 11 01 	lds	r25, 0x0111
 50c:	fc 01       	movw	r30, r24
 50e:	e0 50       	subi	r30, 0x00	; 0
 510:	ff 4f       	sbci	r31, 0xFF	; 255
 512:	80 81       	ld	r24, Z
 514:	8c 93       	st	X, r24
        PORTB = digit[indexB];
 516:	a8 e3       	ldi	r26, 0x38	; 56
 518:	b0 e0       	ldi	r27, 0x00	; 0
 51a:	80 91 12 01 	lds	r24, 0x0112
 51e:	90 91 13 01 	lds	r25, 0x0113
 522:	fc 01       	movw	r30, r24
 524:	e0 50       	subi	r30, 0x00	; 0
 526:	ff 4f       	sbci	r31, 0xFF	; 255
 528:	80 81       	ld	r24, Z
 52a:	8c 93       	st	X, r24
        PORTC = digit[indexC];
 52c:	a5 e3       	ldi	r26, 0x35	; 53
 52e:	b0 e0       	ldi	r27, 0x00	; 0
 530:	80 91 14 01 	lds	r24, 0x0114
 534:	90 91 15 01 	lds	r25, 0x0115
 538:	fc 01       	movw	r30, r24
 53a:	e0 50       	subi	r30, 0x00	; 0
 53c:	ff 4f       	sbci	r31, 0xFF	; 255
 53e:	80 81       	ld	r24, Z
 540:	8c 93       	st	X, r24
        PORTE = digit[indexE];
 542:	a3 e2       	ldi	r26, 0x23	; 35
 544:	b0 e0       	ldi	r27, 0x00	; 0
 546:	80 91 16 01 	lds	r24, 0x0116
 54a:	90 91 17 01 	lds	r25, 0x0117
 54e:	fc 01       	movw	r30, r24
 550:	e0 50       	subi	r30, 0x00	; 0
 552:	ff 4f       	sbci	r31, 0xFF	; 255
 554:	80 81       	ld	r24, Z
 556:	8c 93       	st	X, r24
 558:	d3 cf       	rjmp	.-90     	; 0x500 <main+0xc6>

0000055a <__cmpsf2>:
 55a:	2f d0       	rcall	.+94     	; 0x5ba <__fp_cmp>
 55c:	08 f4       	brcc	.+2      	; 0x560 <__cmpsf2+0x6>
 55e:	81 e0       	ldi	r24, 0x01	; 1
 560:	08 95       	ret

00000562 <__fixunssfsi>:
 562:	57 d0       	rcall	.+174    	; 0x612 <__fp_splitA>
 564:	88 f0       	brcs	.+34     	; 0x588 <__fixunssfsi+0x26>
 566:	9f 57       	subi	r25, 0x7F	; 127
 568:	90 f0       	brcs	.+36     	; 0x58e <__fixunssfsi+0x2c>
 56a:	b9 2f       	mov	r27, r25
 56c:	99 27       	eor	r25, r25
 56e:	b7 51       	subi	r27, 0x17	; 23
 570:	a0 f0       	brcs	.+40     	; 0x59a <__fixunssfsi+0x38>
 572:	d1 f0       	breq	.+52     	; 0x5a8 <__fixunssfsi+0x46>
 574:	66 0f       	add	r22, r22
 576:	77 1f       	adc	r23, r23
 578:	88 1f       	adc	r24, r24
 57a:	99 1f       	adc	r25, r25
 57c:	1a f0       	brmi	.+6      	; 0x584 <__fixunssfsi+0x22>
 57e:	ba 95       	dec	r27
 580:	c9 f7       	brne	.-14     	; 0x574 <__fixunssfsi+0x12>
 582:	12 c0       	rjmp	.+36     	; 0x5a8 <__fixunssfsi+0x46>
 584:	b1 30       	cpi	r27, 0x01	; 1
 586:	81 f0       	breq	.+32     	; 0x5a8 <__fixunssfsi+0x46>
 588:	5e d0       	rcall	.+188    	; 0x646 <__fp_zero>
 58a:	b1 e0       	ldi	r27, 0x01	; 1
 58c:	08 95       	ret
 58e:	5b c0       	rjmp	.+182    	; 0x646 <__fp_zero>
 590:	67 2f       	mov	r22, r23
 592:	78 2f       	mov	r23, r24
 594:	88 27       	eor	r24, r24
 596:	b8 5f       	subi	r27, 0xF8	; 248
 598:	39 f0       	breq	.+14     	; 0x5a8 <__fixunssfsi+0x46>
 59a:	b9 3f       	cpi	r27, 0xF9	; 249
 59c:	cc f3       	brlt	.-14     	; 0x590 <__fixunssfsi+0x2e>
 59e:	86 95       	lsr	r24
 5a0:	77 95       	ror	r23
 5a2:	67 95       	ror	r22
 5a4:	b3 95       	inc	r27
 5a6:	d9 f7       	brne	.-10     	; 0x59e <__fixunssfsi+0x3c>
 5a8:	3e f4       	brtc	.+14     	; 0x5b8 <__fixunssfsi+0x56>
 5aa:	90 95       	com	r25
 5ac:	80 95       	com	r24
 5ae:	70 95       	com	r23
 5b0:	61 95       	neg	r22
 5b2:	7f 4f       	sbci	r23, 0xFF	; 255
 5b4:	8f 4f       	sbci	r24, 0xFF	; 255
 5b6:	9f 4f       	sbci	r25, 0xFF	; 255
 5b8:	08 95       	ret

000005ba <__fp_cmp>:
 5ba:	99 0f       	add	r25, r25
 5bc:	00 08       	sbc	r0, r0
 5be:	55 0f       	add	r21, r21
 5c0:	aa 0b       	sbc	r26, r26
 5c2:	e0 e8       	ldi	r30, 0x80	; 128
 5c4:	fe ef       	ldi	r31, 0xFE	; 254
 5c6:	16 16       	cp	r1, r22
 5c8:	17 06       	cpc	r1, r23
 5ca:	e8 07       	cpc	r30, r24
 5cc:	f9 07       	cpc	r31, r25
 5ce:	c0 f0       	brcs	.+48     	; 0x600 <__fp_cmp+0x46>
 5d0:	12 16       	cp	r1, r18
 5d2:	13 06       	cpc	r1, r19
 5d4:	e4 07       	cpc	r30, r20
 5d6:	f5 07       	cpc	r31, r21
 5d8:	98 f0       	brcs	.+38     	; 0x600 <__fp_cmp+0x46>
 5da:	62 1b       	sub	r22, r18
 5dc:	73 0b       	sbc	r23, r19
 5de:	84 0b       	sbc	r24, r20
 5e0:	95 0b       	sbc	r25, r21
 5e2:	39 f4       	brne	.+14     	; 0x5f2 <__fp_cmp+0x38>
 5e4:	0a 26       	eor	r0, r26
 5e6:	61 f0       	breq	.+24     	; 0x600 <__fp_cmp+0x46>
 5e8:	23 2b       	or	r18, r19
 5ea:	24 2b       	or	r18, r20
 5ec:	25 2b       	or	r18, r21
 5ee:	21 f4       	brne	.+8      	; 0x5f8 <__fp_cmp+0x3e>
 5f0:	08 95       	ret
 5f2:	0a 26       	eor	r0, r26
 5f4:	09 f4       	brne	.+2      	; 0x5f8 <__fp_cmp+0x3e>
 5f6:	a1 40       	sbci	r26, 0x01	; 1
 5f8:	a6 95       	lsr	r26
 5fa:	8f ef       	ldi	r24, 0xFF	; 255
 5fc:	81 1d       	adc	r24, r1
 5fe:	81 1d       	adc	r24, r1
 600:	08 95       	ret

00000602 <__fp_split3>:
 602:	57 fd       	sbrc	r21, 7
 604:	90 58       	subi	r25, 0x80	; 128
 606:	44 0f       	add	r20, r20
 608:	55 1f       	adc	r21, r21
 60a:	59 f0       	breq	.+22     	; 0x622 <__fp_splitA+0x10>
 60c:	5f 3f       	cpi	r21, 0xFF	; 255
 60e:	71 f0       	breq	.+28     	; 0x62c <__fp_splitA+0x1a>
 610:	47 95       	ror	r20

00000612 <__fp_splitA>:
 612:	88 0f       	add	r24, r24
 614:	97 fb       	bst	r25, 7
 616:	99 1f       	adc	r25, r25
 618:	61 f0       	breq	.+24     	; 0x632 <__fp_splitA+0x20>
 61a:	9f 3f       	cpi	r25, 0xFF	; 255
 61c:	79 f0       	breq	.+30     	; 0x63c <__fp_splitA+0x2a>
 61e:	87 95       	ror	r24
 620:	08 95       	ret
 622:	12 16       	cp	r1, r18
 624:	13 06       	cpc	r1, r19
 626:	14 06       	cpc	r1, r20
 628:	55 1f       	adc	r21, r21
 62a:	f2 cf       	rjmp	.-28     	; 0x610 <__fp_split3+0xe>
 62c:	46 95       	lsr	r20
 62e:	f1 df       	rcall	.-30     	; 0x612 <__fp_splitA>
 630:	08 c0       	rjmp	.+16     	; 0x642 <__fp_splitA+0x30>
 632:	16 16       	cp	r1, r22
 634:	17 06       	cpc	r1, r23
 636:	18 06       	cpc	r1, r24
 638:	99 1f       	adc	r25, r25
 63a:	f1 cf       	rjmp	.-30     	; 0x61e <__fp_splitA+0xc>
 63c:	86 95       	lsr	r24
 63e:	71 05       	cpc	r23, r1
 640:	61 05       	cpc	r22, r1
 642:	08 94       	sec
 644:	08 95       	ret

00000646 <__fp_zero>:
 646:	e8 94       	clt

00000648 <__fp_szero>:
 648:	bb 27       	eor	r27, r27
 64a:	66 27       	eor	r22, r22
 64c:	77 27       	eor	r23, r23
 64e:	cb 01       	movw	r24, r22
 650:	97 f9       	bld	r25, 7
 652:	08 95       	ret

00000654 <__gesf2>:
 654:	b2 df       	rcall	.-156    	; 0x5ba <__fp_cmp>
 656:	08 f4       	brcc	.+2      	; 0x65a <__gesf2+0x6>
 658:	8f ef       	ldi	r24, 0xFF	; 255
 65a:	08 95       	ret

0000065c <__mulsf3>:
 65c:	0b d0       	rcall	.+22     	; 0x674 <__mulsf3x>
 65e:	78 c0       	rjmp	.+240    	; 0x750 <__fp_round>
 660:	69 d0       	rcall	.+210    	; 0x734 <__fp_pscA>
 662:	28 f0       	brcs	.+10     	; 0x66e <__mulsf3+0x12>
 664:	6e d0       	rcall	.+220    	; 0x742 <__fp_pscB>
 666:	18 f0       	brcs	.+6      	; 0x66e <__mulsf3+0x12>
 668:	95 23       	and	r25, r21
 66a:	09 f0       	breq	.+2      	; 0x66e <__mulsf3+0x12>
 66c:	5a c0       	rjmp	.+180    	; 0x722 <__fp_inf>
 66e:	5f c0       	rjmp	.+190    	; 0x72e <__fp_nan>
 670:	11 24       	eor	r1, r1
 672:	ea cf       	rjmp	.-44     	; 0x648 <__fp_szero>

00000674 <__mulsf3x>:
 674:	c6 df       	rcall	.-116    	; 0x602 <__fp_split3>
 676:	a0 f3       	brcs	.-24     	; 0x660 <__mulsf3+0x4>

00000678 <__mulsf3_pse>:
 678:	95 9f       	mul	r25, r21
 67a:	d1 f3       	breq	.-12     	; 0x670 <__mulsf3+0x14>
 67c:	95 0f       	add	r25, r21
 67e:	50 e0       	ldi	r21, 0x00	; 0
 680:	55 1f       	adc	r21, r21
 682:	62 9f       	mul	r22, r18
 684:	f0 01       	movw	r30, r0
 686:	72 9f       	mul	r23, r18
 688:	bb 27       	eor	r27, r27
 68a:	f0 0d       	add	r31, r0
 68c:	b1 1d       	adc	r27, r1
 68e:	63 9f       	mul	r22, r19
 690:	aa 27       	eor	r26, r26
 692:	f0 0d       	add	r31, r0
 694:	b1 1d       	adc	r27, r1
 696:	aa 1f       	adc	r26, r26
 698:	64 9f       	mul	r22, r20
 69a:	66 27       	eor	r22, r22
 69c:	b0 0d       	add	r27, r0
 69e:	a1 1d       	adc	r26, r1
 6a0:	66 1f       	adc	r22, r22
 6a2:	82 9f       	mul	r24, r18
 6a4:	22 27       	eor	r18, r18
 6a6:	b0 0d       	add	r27, r0
 6a8:	a1 1d       	adc	r26, r1
 6aa:	62 1f       	adc	r22, r18
 6ac:	73 9f       	mul	r23, r19
 6ae:	b0 0d       	add	r27, r0
 6b0:	a1 1d       	adc	r26, r1
 6b2:	62 1f       	adc	r22, r18
 6b4:	83 9f       	mul	r24, r19
 6b6:	a0 0d       	add	r26, r0
 6b8:	61 1d       	adc	r22, r1
 6ba:	22 1f       	adc	r18, r18
 6bc:	74 9f       	mul	r23, r20
 6be:	33 27       	eor	r19, r19
 6c0:	a0 0d       	add	r26, r0
 6c2:	61 1d       	adc	r22, r1
 6c4:	23 1f       	adc	r18, r19
 6c6:	84 9f       	mul	r24, r20
 6c8:	60 0d       	add	r22, r0
 6ca:	21 1d       	adc	r18, r1
 6cc:	82 2f       	mov	r24, r18
 6ce:	76 2f       	mov	r23, r22
 6d0:	6a 2f       	mov	r22, r26
 6d2:	11 24       	eor	r1, r1
 6d4:	9f 57       	subi	r25, 0x7F	; 127
 6d6:	50 40       	sbci	r21, 0x00	; 0
 6d8:	8a f0       	brmi	.+34     	; 0x6fc <__mulsf3_pse+0x84>
 6da:	e1 f0       	breq	.+56     	; 0x714 <__mulsf3_pse+0x9c>
 6dc:	88 23       	and	r24, r24
 6de:	4a f0       	brmi	.+18     	; 0x6f2 <__mulsf3_pse+0x7a>
 6e0:	ee 0f       	add	r30, r30
 6e2:	ff 1f       	adc	r31, r31
 6e4:	bb 1f       	adc	r27, r27
 6e6:	66 1f       	adc	r22, r22
 6e8:	77 1f       	adc	r23, r23
 6ea:	88 1f       	adc	r24, r24
 6ec:	91 50       	subi	r25, 0x01	; 1
 6ee:	50 40       	sbci	r21, 0x00	; 0
 6f0:	a9 f7       	brne	.-22     	; 0x6dc <__mulsf3_pse+0x64>
 6f2:	9e 3f       	cpi	r25, 0xFE	; 254
 6f4:	51 05       	cpc	r21, r1
 6f6:	70 f0       	brcs	.+28     	; 0x714 <__mulsf3_pse+0x9c>
 6f8:	14 c0       	rjmp	.+40     	; 0x722 <__fp_inf>
 6fa:	a6 cf       	rjmp	.-180    	; 0x648 <__fp_szero>
 6fc:	5f 3f       	cpi	r21, 0xFF	; 255
 6fe:	ec f3       	brlt	.-6      	; 0x6fa <__mulsf3_pse+0x82>
 700:	98 3e       	cpi	r25, 0xE8	; 232
 702:	dc f3       	brlt	.-10     	; 0x6fa <__mulsf3_pse+0x82>
 704:	86 95       	lsr	r24
 706:	77 95       	ror	r23
 708:	67 95       	ror	r22
 70a:	b7 95       	ror	r27
 70c:	f7 95       	ror	r31
 70e:	e7 95       	ror	r30
 710:	9f 5f       	subi	r25, 0xFF	; 255
 712:	c1 f7       	brne	.-16     	; 0x704 <__mulsf3_pse+0x8c>
 714:	fe 2b       	or	r31, r30
 716:	88 0f       	add	r24, r24
 718:	91 1d       	adc	r25, r1
 71a:	96 95       	lsr	r25
 71c:	87 95       	ror	r24
 71e:	97 f9       	bld	r25, 7
 720:	08 95       	ret

00000722 <__fp_inf>:
 722:	97 f9       	bld	r25, 7
 724:	9f 67       	ori	r25, 0x7F	; 127
 726:	80 e8       	ldi	r24, 0x80	; 128
 728:	70 e0       	ldi	r23, 0x00	; 0
 72a:	60 e0       	ldi	r22, 0x00	; 0
 72c:	08 95       	ret

0000072e <__fp_nan>:
 72e:	9f ef       	ldi	r25, 0xFF	; 255
 730:	80 ec       	ldi	r24, 0xC0	; 192
 732:	08 95       	ret

00000734 <__fp_pscA>:
 734:	00 24       	eor	r0, r0
 736:	0a 94       	dec	r0
 738:	16 16       	cp	r1, r22
 73a:	17 06       	cpc	r1, r23
 73c:	18 06       	cpc	r1, r24
 73e:	09 06       	cpc	r0, r25
 740:	08 95       	ret

00000742 <__fp_pscB>:
 742:	00 24       	eor	r0, r0
 744:	0a 94       	dec	r0
 746:	12 16       	cp	r1, r18
 748:	13 06       	cpc	r1, r19
 74a:	14 06       	cpc	r1, r20
 74c:	05 06       	cpc	r0, r21
 74e:	08 95       	ret

00000750 <__fp_round>:
 750:	09 2e       	mov	r0, r25
 752:	03 94       	inc	r0
 754:	00 0c       	add	r0, r0
 756:	11 f4       	brne	.+4      	; 0x75c <__fp_round+0xc>
 758:	88 23       	and	r24, r24
 75a:	52 f0       	brmi	.+20     	; 0x770 <__fp_round+0x20>
 75c:	bb 0f       	add	r27, r27
 75e:	40 f4       	brcc	.+16     	; 0x770 <__fp_round+0x20>
 760:	bf 2b       	or	r27, r31
 762:	11 f4       	brne	.+4      	; 0x768 <__fp_round+0x18>
 764:	60 ff       	sbrs	r22, 0
 766:	04 c0       	rjmp	.+8      	; 0x770 <__fp_round+0x20>
 768:	6f 5f       	subi	r22, 0xFF	; 255
 76a:	7f 4f       	sbci	r23, 0xFF	; 255
 76c:	8f 4f       	sbci	r24, 0xFF	; 255
 76e:	9f 4f       	sbci	r25, 0xFF	; 255
 770:	08 95       	ret

00000772 <_exit>:
 772:	f8 94       	cli

00000774 <__stop_program>:
 774:	ff cf       	rjmp	.-2      	; 0x774 <__stop_program>
