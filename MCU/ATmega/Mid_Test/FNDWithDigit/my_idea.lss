
my_idea.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000004a6  0000051a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004a6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000480  00000000  00000000  00000520  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000073e  00000000  00000000  000009a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 ea       	ldi	r30, 0xA6	; 166
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 30       	cpi	r26, 0x06	; 6
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  b6:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <main>:
// ***********************************************************

#include <avr/io.h>              // Most basic include files
#include <util/delay.h>

int main(void) {
  be:	df 93       	push	r29
  c0:	cf 93       	push	r28
  c2:	cd b7       	in	r28, 0x3d	; 61
  c4:	de b7       	in	r29, 0x3e	; 62
  c6:	6b 97       	sbiw	r28, 0x1b	; 27
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	f8 94       	cli
  cc:	de bf       	out	0x3e, r29	; 62
  ce:	0f be       	out	0x3f, r0	; 63
  d0:	cd bf       	out	0x3d, r28	; 61
    DDRA = 0xFF;
  d2:	ea e3       	ldi	r30, 0x3A	; 58
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	8f ef       	ldi	r24, 0xFF	; 255
  d8:	80 83       	st	Z, r24
    DDRB = 0xFF;
  da:	e7 e3       	ldi	r30, 0x37	; 55
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	8f ef       	ldi	r24, 0xFF	; 255
  e0:	80 83       	st	Z, r24
    DDRC = 0x00;
  e2:	e4 e3       	ldi	r30, 0x34	; 52
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	10 82       	st	Z, r1
    PORTA = 0xFF;
  e8:	eb e3       	ldi	r30, 0x3B	; 59
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	8f ef       	ldi	r24, 0xFF	; 255
  ee:	80 83       	st	Z, r24
    PORTB = 0xFF;
  f0:	e8 e3       	ldi	r30, 0x38	; 56
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	8f ef       	ldi	r24, 0xFF	; 255
  f6:	80 83       	st	Z, r24
    PORTC = 0xFF;
  f8:	e5 e3       	ldi	r30, 0x35	; 53
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	8f ef       	ldi	r24, 0xFF	; 255
  fe:	80 83       	st	Z, r24
    int index = 0;
 100:	18 8a       	std	Y+16, r1	; 0x10
 102:	1f 86       	std	Y+15, r1	; 0x0f

    char digit[6] = {
        0xC0, 0xF9, 0xA4, 
        0xB0, 0x99, 0x92
    };
 104:	ce 01       	movw	r24, r28
 106:	41 96       	adiw	r24, 0x11	; 17
 108:	98 8f       	std	Y+24, r25	; 0x18
 10a:	8f 8b       	std	Y+23, r24	; 0x17
 10c:	e0 e0       	ldi	r30, 0x00	; 0
 10e:	f1 e0       	ldi	r31, 0x01	; 1
 110:	fa 8f       	std	Y+26, r31	; 0x1a
 112:	e9 8f       	std	Y+25, r30	; 0x19
 114:	f6 e0       	ldi	r31, 0x06	; 6
 116:	fb 8f       	std	Y+27, r31	; 0x1b
 118:	e9 8d       	ldd	r30, Y+25	; 0x19
 11a:	fa 8d       	ldd	r31, Y+26	; 0x1a
 11c:	00 80       	ld	r0, Z
 11e:	89 8d       	ldd	r24, Y+25	; 0x19
 120:	9a 8d       	ldd	r25, Y+26	; 0x1a
 122:	01 96       	adiw	r24, 0x01	; 1
 124:	9a 8f       	std	Y+26, r25	; 0x1a
 126:	89 8f       	std	Y+25, r24	; 0x19
 128:	ef 89       	ldd	r30, Y+23	; 0x17
 12a:	f8 8d       	ldd	r31, Y+24	; 0x18
 12c:	00 82       	st	Z, r0
 12e:	8f 89       	ldd	r24, Y+23	; 0x17
 130:	98 8d       	ldd	r25, Y+24	; 0x18
 132:	01 96       	adiw	r24, 0x01	; 1
 134:	98 8f       	std	Y+24, r25	; 0x18
 136:	8f 8b       	std	Y+23, r24	; 0x17
 138:	9b 8d       	ldd	r25, Y+27	; 0x1b
 13a:	91 50       	subi	r25, 0x01	; 1
 13c:	9b 8f       	std	Y+27, r25	; 0x1b
 13e:	eb 8d       	ldd	r30, Y+27	; 0x1b
 140:	ee 23       	and	r30, r30
 142:	51 f7       	brne	.-44     	; 0x118 <main+0x5a>

    while(1) {             // Infinite loop; define here the
        if (PINC == 0xFE) {
 144:	e3 e3       	ldi	r30, 0x33	; 51
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	8e 3f       	cpi	r24, 0xFE	; 254
 14c:	29 f4       	brne	.+10     	; 0x158 <main+0x9a>
            PORTB = 0b10101010;
 14e:	e8 e3       	ldi	r30, 0x38	; 56
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	8a ea       	ldi	r24, 0xAA	; 170
 154:	80 83       	st	Z, r24
 156:	0e c0       	rjmp	.+28     	; 0x174 <main+0xb6>
        } else if(PINC == 0xFD) {
 158:	e3 e3       	ldi	r30, 0x33	; 51
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	8d 3f       	cpi	r24, 0xFD	; 253
 160:	29 f4       	brne	.+10     	; 0x16c <main+0xae>
            PORTB = 0b01010101;
 162:	e8 e3       	ldi	r30, 0x38	; 56
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	85 e5       	ldi	r24, 0x55	; 85
 168:	80 83       	st	Z, r24
 16a:	04 c0       	rjmp	.+8      	; 0x174 <main+0xb6>
        } else {
            PORTB = 0xFF;
 16c:	e8 e3       	ldi	r30, 0x38	; 56
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	8f ef       	ldi	r24, 0xFF	; 255
 172:	80 83       	st	Z, r24
        }
        PORTA = digit[index];
 174:	ab e3       	ldi	r26, 0x3B	; 59
 176:	b0 e0       	ldi	r27, 0x00	; 0
 178:	2f 85       	ldd	r18, Y+15	; 0x0f
 17a:	38 89       	ldd	r19, Y+16	; 0x10
 17c:	ce 01       	movw	r24, r28
 17e:	41 96       	adiw	r24, 0x11	; 17
 180:	fc 01       	movw	r30, r24
 182:	e2 0f       	add	r30, r18
 184:	f3 1f       	adc	r31, r19
 186:	80 81       	ld	r24, Z
 188:	8c 93       	st	X, r24
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	a8 ec       	ldi	r26, 0xC8	; 200
 190:	b2 e4       	ldi	r27, 0x42	; 66
 192:	8b 87       	std	Y+11, r24	; 0x0b
 194:	9c 87       	std	Y+12, r25	; 0x0c
 196:	ad 87       	std	Y+13, r26	; 0x0d
 198:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 19a:	6b 85       	ldd	r22, Y+11	; 0x0b
 19c:	7c 85       	ldd	r23, Y+12	; 0x0c
 19e:	8d 85       	ldd	r24, Y+13	; 0x0d
 1a0:	9e 85       	ldd	r25, Y+14	; 0x0e
 1a2:	20 e0       	ldi	r18, 0x00	; 0
 1a4:	30 e0       	ldi	r19, 0x00	; 0
 1a6:	4a e7       	ldi	r20, 0x7A	; 122
 1a8:	53 e4       	ldi	r21, 0x43	; 67
 1aa:	0e 94 c6 01 	call	0x38c	; 0x38c <__mulsf3>
 1ae:	dc 01       	movw	r26, r24
 1b0:	cb 01       	movw	r24, r22
 1b2:	8f 83       	std	Y+7, r24	; 0x07
 1b4:	98 87       	std	Y+8, r25	; 0x08
 1b6:	a9 87       	std	Y+9, r26	; 0x09
 1b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
 1ba:	6f 81       	ldd	r22, Y+7	; 0x07
 1bc:	78 85       	ldd	r23, Y+8	; 0x08
 1be:	89 85       	ldd	r24, Y+9	; 0x09
 1c0:	9a 85       	ldd	r25, Y+10	; 0x0a
 1c2:	20 e0       	ldi	r18, 0x00	; 0
 1c4:	30 e0       	ldi	r19, 0x00	; 0
 1c6:	40 e8       	ldi	r20, 0x80	; 128
 1c8:	5f e3       	ldi	r21, 0x3F	; 63
 1ca:	0e 94 45 01 	call	0x28a	; 0x28a <__cmpsf2>
 1ce:	88 23       	and	r24, r24
 1d0:	2c f4       	brge	.+10     	; 0x1dc <main+0x11e>
		__ticks = 1;
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	9e 83       	std	Y+6, r25	; 0x06
 1d8:	8d 83       	std	Y+5, r24	; 0x05
 1da:	3f c0       	rjmp	.+126    	; 0x25a <main+0x19c>
	else if (__tmp > 65535)
 1dc:	6f 81       	ldd	r22, Y+7	; 0x07
 1de:	78 85       	ldd	r23, Y+8	; 0x08
 1e0:	89 85       	ldd	r24, Y+9	; 0x09
 1e2:	9a 85       	ldd	r25, Y+10	; 0x0a
 1e4:	20 e0       	ldi	r18, 0x00	; 0
 1e6:	3f ef       	ldi	r19, 0xFF	; 255
 1e8:	4f e7       	ldi	r20, 0x7F	; 127
 1ea:	57 e4       	ldi	r21, 0x47	; 71
 1ec:	0e 94 c2 01 	call	0x384	; 0x384 <__gesf2>
 1f0:	18 16       	cp	r1, r24
 1f2:	4c f5       	brge	.+82     	; 0x246 <main+0x188>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1f4:	6b 85       	ldd	r22, Y+11	; 0x0b
 1f6:	7c 85       	ldd	r23, Y+12	; 0x0c
 1f8:	8d 85       	ldd	r24, Y+13	; 0x0d
 1fa:	9e 85       	ldd	r25, Y+14	; 0x0e
 1fc:	20 e0       	ldi	r18, 0x00	; 0
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	40 e2       	ldi	r20, 0x20	; 32
 202:	51 e4       	ldi	r21, 0x41	; 65
 204:	0e 94 c6 01 	call	0x38c	; 0x38c <__mulsf3>
 208:	dc 01       	movw	r26, r24
 20a:	cb 01       	movw	r24, r22
 20c:	bc 01       	movw	r22, r24
 20e:	cd 01       	movw	r24, r26
 210:	0e 94 49 01 	call	0x292	; 0x292 <__fixunssfsi>
 214:	dc 01       	movw	r26, r24
 216:	cb 01       	movw	r24, r22
 218:	9e 83       	std	Y+6, r25	; 0x06
 21a:	8d 83       	std	Y+5, r24	; 0x05
 21c:	0f c0       	rjmp	.+30     	; 0x23c <main+0x17e>
 21e:	89 e1       	ldi	r24, 0x19	; 25
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	9c 83       	std	Y+4, r25	; 0x04
 224:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 226:	8b 81       	ldd	r24, Y+3	; 0x03
 228:	9c 81       	ldd	r25, Y+4	; 0x04
 22a:	01 97       	sbiw	r24, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <main+0x16c>
 22e:	9c 83       	std	Y+4, r25	; 0x04
 230:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 232:	8d 81       	ldd	r24, Y+5	; 0x05
 234:	9e 81       	ldd	r25, Y+6	; 0x06
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	9e 83       	std	Y+6, r25	; 0x06
 23a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 23c:	8d 81       	ldd	r24, Y+5	; 0x05
 23e:	9e 81       	ldd	r25, Y+6	; 0x06
 240:	00 97       	sbiw	r24, 0x00	; 0
 242:	69 f7       	brne	.-38     	; 0x21e <main+0x160>
 244:	14 c0       	rjmp	.+40     	; 0x26e <main+0x1b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 246:	6f 81       	ldd	r22, Y+7	; 0x07
 248:	78 85       	ldd	r23, Y+8	; 0x08
 24a:	89 85       	ldd	r24, Y+9	; 0x09
 24c:	9a 85       	ldd	r25, Y+10	; 0x0a
 24e:	0e 94 49 01 	call	0x292	; 0x292 <__fixunssfsi>
 252:	dc 01       	movw	r26, r24
 254:	cb 01       	movw	r24, r22
 256:	9e 83       	std	Y+6, r25	; 0x06
 258:	8d 83       	std	Y+5, r24	; 0x05
 25a:	8d 81       	ldd	r24, Y+5	; 0x05
 25c:	9e 81       	ldd	r25, Y+6	; 0x06
 25e:	9a 83       	std	Y+2, r25	; 0x02
 260:	89 83       	std	Y+1, r24	; 0x01
 262:	89 81       	ldd	r24, Y+1	; 0x01
 264:	9a 81       	ldd	r25, Y+2	; 0x02
 266:	01 97       	sbiw	r24, 0x01	; 1
 268:	f1 f7       	brne	.-4      	; 0x266 <main+0x1a8>
 26a:	9a 83       	std	Y+2, r25	; 0x02
 26c:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(100);
        index > 5 ? index = 0 : index++;
 26e:	8f 85       	ldd	r24, Y+15	; 0x0f
 270:	98 89       	ldd	r25, Y+16	; 0x10
 272:	86 30       	cpi	r24, 0x06	; 6
 274:	91 05       	cpc	r25, r1
 276:	1c f0       	brlt	.+6      	; 0x27e <main+0x1c0>
 278:	18 8a       	std	Y+16, r1	; 0x10
 27a:	1f 86       	std	Y+15, r1	; 0x0f
 27c:	63 cf       	rjmp	.-314    	; 0x144 <main+0x86>
 27e:	8f 85       	ldd	r24, Y+15	; 0x0f
 280:	98 89       	ldd	r25, Y+16	; 0x10
 282:	01 96       	adiw	r24, 0x01	; 1
 284:	98 8b       	std	Y+16, r25	; 0x10
 286:	8f 87       	std	Y+15, r24	; 0x0f
 288:	5d cf       	rjmp	.-326    	; 0x144 <main+0x86>

0000028a <__cmpsf2>:
 28a:	2f d0       	rcall	.+94     	; 0x2ea <__fp_cmp>
 28c:	08 f4       	brcc	.+2      	; 0x290 <__cmpsf2+0x6>
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	08 95       	ret

00000292 <__fixunssfsi>:
 292:	57 d0       	rcall	.+174    	; 0x342 <__fp_splitA>
 294:	88 f0       	brcs	.+34     	; 0x2b8 <__fixunssfsi+0x26>
 296:	9f 57       	subi	r25, 0x7F	; 127
 298:	90 f0       	brcs	.+36     	; 0x2be <__fixunssfsi+0x2c>
 29a:	b9 2f       	mov	r27, r25
 29c:	99 27       	eor	r25, r25
 29e:	b7 51       	subi	r27, 0x17	; 23
 2a0:	a0 f0       	brcs	.+40     	; 0x2ca <__fixunssfsi+0x38>
 2a2:	d1 f0       	breq	.+52     	; 0x2d8 <__fixunssfsi+0x46>
 2a4:	66 0f       	add	r22, r22
 2a6:	77 1f       	adc	r23, r23
 2a8:	88 1f       	adc	r24, r24
 2aa:	99 1f       	adc	r25, r25
 2ac:	1a f0       	brmi	.+6      	; 0x2b4 <__fixunssfsi+0x22>
 2ae:	ba 95       	dec	r27
 2b0:	c9 f7       	brne	.-14     	; 0x2a4 <__fixunssfsi+0x12>
 2b2:	12 c0       	rjmp	.+36     	; 0x2d8 <__fixunssfsi+0x46>
 2b4:	b1 30       	cpi	r27, 0x01	; 1
 2b6:	81 f0       	breq	.+32     	; 0x2d8 <__fixunssfsi+0x46>
 2b8:	5e d0       	rcall	.+188    	; 0x376 <__fp_zero>
 2ba:	b1 e0       	ldi	r27, 0x01	; 1
 2bc:	08 95       	ret
 2be:	5b c0       	rjmp	.+182    	; 0x376 <__fp_zero>
 2c0:	67 2f       	mov	r22, r23
 2c2:	78 2f       	mov	r23, r24
 2c4:	88 27       	eor	r24, r24
 2c6:	b8 5f       	subi	r27, 0xF8	; 248
 2c8:	39 f0       	breq	.+14     	; 0x2d8 <__fixunssfsi+0x46>
 2ca:	b9 3f       	cpi	r27, 0xF9	; 249
 2cc:	cc f3       	brlt	.-14     	; 0x2c0 <__fixunssfsi+0x2e>
 2ce:	86 95       	lsr	r24
 2d0:	77 95       	ror	r23
 2d2:	67 95       	ror	r22
 2d4:	b3 95       	inc	r27
 2d6:	d9 f7       	brne	.-10     	; 0x2ce <__fixunssfsi+0x3c>
 2d8:	3e f4       	brtc	.+14     	; 0x2e8 <__fixunssfsi+0x56>
 2da:	90 95       	com	r25
 2dc:	80 95       	com	r24
 2de:	70 95       	com	r23
 2e0:	61 95       	neg	r22
 2e2:	7f 4f       	sbci	r23, 0xFF	; 255
 2e4:	8f 4f       	sbci	r24, 0xFF	; 255
 2e6:	9f 4f       	sbci	r25, 0xFF	; 255
 2e8:	08 95       	ret

000002ea <__fp_cmp>:
 2ea:	99 0f       	add	r25, r25
 2ec:	00 08       	sbc	r0, r0
 2ee:	55 0f       	add	r21, r21
 2f0:	aa 0b       	sbc	r26, r26
 2f2:	e0 e8       	ldi	r30, 0x80	; 128
 2f4:	fe ef       	ldi	r31, 0xFE	; 254
 2f6:	16 16       	cp	r1, r22
 2f8:	17 06       	cpc	r1, r23
 2fa:	e8 07       	cpc	r30, r24
 2fc:	f9 07       	cpc	r31, r25
 2fe:	c0 f0       	brcs	.+48     	; 0x330 <__fp_cmp+0x46>
 300:	12 16       	cp	r1, r18
 302:	13 06       	cpc	r1, r19
 304:	e4 07       	cpc	r30, r20
 306:	f5 07       	cpc	r31, r21
 308:	98 f0       	brcs	.+38     	; 0x330 <__fp_cmp+0x46>
 30a:	62 1b       	sub	r22, r18
 30c:	73 0b       	sbc	r23, r19
 30e:	84 0b       	sbc	r24, r20
 310:	95 0b       	sbc	r25, r21
 312:	39 f4       	brne	.+14     	; 0x322 <__fp_cmp+0x38>
 314:	0a 26       	eor	r0, r26
 316:	61 f0       	breq	.+24     	; 0x330 <__fp_cmp+0x46>
 318:	23 2b       	or	r18, r19
 31a:	24 2b       	or	r18, r20
 31c:	25 2b       	or	r18, r21
 31e:	21 f4       	brne	.+8      	; 0x328 <__fp_cmp+0x3e>
 320:	08 95       	ret
 322:	0a 26       	eor	r0, r26
 324:	09 f4       	brne	.+2      	; 0x328 <__fp_cmp+0x3e>
 326:	a1 40       	sbci	r26, 0x01	; 1
 328:	a6 95       	lsr	r26
 32a:	8f ef       	ldi	r24, 0xFF	; 255
 32c:	81 1d       	adc	r24, r1
 32e:	81 1d       	adc	r24, r1
 330:	08 95       	ret

00000332 <__fp_split3>:
 332:	57 fd       	sbrc	r21, 7
 334:	90 58       	subi	r25, 0x80	; 128
 336:	44 0f       	add	r20, r20
 338:	55 1f       	adc	r21, r21
 33a:	59 f0       	breq	.+22     	; 0x352 <__fp_splitA+0x10>
 33c:	5f 3f       	cpi	r21, 0xFF	; 255
 33e:	71 f0       	breq	.+28     	; 0x35c <__fp_splitA+0x1a>
 340:	47 95       	ror	r20

00000342 <__fp_splitA>:
 342:	88 0f       	add	r24, r24
 344:	97 fb       	bst	r25, 7
 346:	99 1f       	adc	r25, r25
 348:	61 f0       	breq	.+24     	; 0x362 <__fp_splitA+0x20>
 34a:	9f 3f       	cpi	r25, 0xFF	; 255
 34c:	79 f0       	breq	.+30     	; 0x36c <__fp_splitA+0x2a>
 34e:	87 95       	ror	r24
 350:	08 95       	ret
 352:	12 16       	cp	r1, r18
 354:	13 06       	cpc	r1, r19
 356:	14 06       	cpc	r1, r20
 358:	55 1f       	adc	r21, r21
 35a:	f2 cf       	rjmp	.-28     	; 0x340 <__fp_split3+0xe>
 35c:	46 95       	lsr	r20
 35e:	f1 df       	rcall	.-30     	; 0x342 <__fp_splitA>
 360:	08 c0       	rjmp	.+16     	; 0x372 <__fp_splitA+0x30>
 362:	16 16       	cp	r1, r22
 364:	17 06       	cpc	r1, r23
 366:	18 06       	cpc	r1, r24
 368:	99 1f       	adc	r25, r25
 36a:	f1 cf       	rjmp	.-30     	; 0x34e <__fp_splitA+0xc>
 36c:	86 95       	lsr	r24
 36e:	71 05       	cpc	r23, r1
 370:	61 05       	cpc	r22, r1
 372:	08 94       	sec
 374:	08 95       	ret

00000376 <__fp_zero>:
 376:	e8 94       	clt

00000378 <__fp_szero>:
 378:	bb 27       	eor	r27, r27
 37a:	66 27       	eor	r22, r22
 37c:	77 27       	eor	r23, r23
 37e:	cb 01       	movw	r24, r22
 380:	97 f9       	bld	r25, 7
 382:	08 95       	ret

00000384 <__gesf2>:
 384:	b2 df       	rcall	.-156    	; 0x2ea <__fp_cmp>
 386:	08 f4       	brcc	.+2      	; 0x38a <__gesf2+0x6>
 388:	8f ef       	ldi	r24, 0xFF	; 255
 38a:	08 95       	ret

0000038c <__mulsf3>:
 38c:	0b d0       	rcall	.+22     	; 0x3a4 <__mulsf3x>
 38e:	78 c0       	rjmp	.+240    	; 0x480 <__fp_round>
 390:	69 d0       	rcall	.+210    	; 0x464 <__fp_pscA>
 392:	28 f0       	brcs	.+10     	; 0x39e <__mulsf3+0x12>
 394:	6e d0       	rcall	.+220    	; 0x472 <__fp_pscB>
 396:	18 f0       	brcs	.+6      	; 0x39e <__mulsf3+0x12>
 398:	95 23       	and	r25, r21
 39a:	09 f0       	breq	.+2      	; 0x39e <__mulsf3+0x12>
 39c:	5a c0       	rjmp	.+180    	; 0x452 <__fp_inf>
 39e:	5f c0       	rjmp	.+190    	; 0x45e <__fp_nan>
 3a0:	11 24       	eor	r1, r1
 3a2:	ea cf       	rjmp	.-44     	; 0x378 <__fp_szero>

000003a4 <__mulsf3x>:
 3a4:	c6 df       	rcall	.-116    	; 0x332 <__fp_split3>
 3a6:	a0 f3       	brcs	.-24     	; 0x390 <__mulsf3+0x4>

000003a8 <__mulsf3_pse>:
 3a8:	95 9f       	mul	r25, r21
 3aa:	d1 f3       	breq	.-12     	; 0x3a0 <__mulsf3+0x14>
 3ac:	95 0f       	add	r25, r21
 3ae:	50 e0       	ldi	r21, 0x00	; 0
 3b0:	55 1f       	adc	r21, r21
 3b2:	62 9f       	mul	r22, r18
 3b4:	f0 01       	movw	r30, r0
 3b6:	72 9f       	mul	r23, r18
 3b8:	bb 27       	eor	r27, r27
 3ba:	f0 0d       	add	r31, r0
 3bc:	b1 1d       	adc	r27, r1
 3be:	63 9f       	mul	r22, r19
 3c0:	aa 27       	eor	r26, r26
 3c2:	f0 0d       	add	r31, r0
 3c4:	b1 1d       	adc	r27, r1
 3c6:	aa 1f       	adc	r26, r26
 3c8:	64 9f       	mul	r22, r20
 3ca:	66 27       	eor	r22, r22
 3cc:	b0 0d       	add	r27, r0
 3ce:	a1 1d       	adc	r26, r1
 3d0:	66 1f       	adc	r22, r22
 3d2:	82 9f       	mul	r24, r18
 3d4:	22 27       	eor	r18, r18
 3d6:	b0 0d       	add	r27, r0
 3d8:	a1 1d       	adc	r26, r1
 3da:	62 1f       	adc	r22, r18
 3dc:	73 9f       	mul	r23, r19
 3de:	b0 0d       	add	r27, r0
 3e0:	a1 1d       	adc	r26, r1
 3e2:	62 1f       	adc	r22, r18
 3e4:	83 9f       	mul	r24, r19
 3e6:	a0 0d       	add	r26, r0
 3e8:	61 1d       	adc	r22, r1
 3ea:	22 1f       	adc	r18, r18
 3ec:	74 9f       	mul	r23, r20
 3ee:	33 27       	eor	r19, r19
 3f0:	a0 0d       	add	r26, r0
 3f2:	61 1d       	adc	r22, r1
 3f4:	23 1f       	adc	r18, r19
 3f6:	84 9f       	mul	r24, r20
 3f8:	60 0d       	add	r22, r0
 3fa:	21 1d       	adc	r18, r1
 3fc:	82 2f       	mov	r24, r18
 3fe:	76 2f       	mov	r23, r22
 400:	6a 2f       	mov	r22, r26
 402:	11 24       	eor	r1, r1
 404:	9f 57       	subi	r25, 0x7F	; 127
 406:	50 40       	sbci	r21, 0x00	; 0
 408:	8a f0       	brmi	.+34     	; 0x42c <__mulsf3_pse+0x84>
 40a:	e1 f0       	breq	.+56     	; 0x444 <__mulsf3_pse+0x9c>
 40c:	88 23       	and	r24, r24
 40e:	4a f0       	brmi	.+18     	; 0x422 <__mulsf3_pse+0x7a>
 410:	ee 0f       	add	r30, r30
 412:	ff 1f       	adc	r31, r31
 414:	bb 1f       	adc	r27, r27
 416:	66 1f       	adc	r22, r22
 418:	77 1f       	adc	r23, r23
 41a:	88 1f       	adc	r24, r24
 41c:	91 50       	subi	r25, 0x01	; 1
 41e:	50 40       	sbci	r21, 0x00	; 0
 420:	a9 f7       	brne	.-22     	; 0x40c <__mulsf3_pse+0x64>
 422:	9e 3f       	cpi	r25, 0xFE	; 254
 424:	51 05       	cpc	r21, r1
 426:	70 f0       	brcs	.+28     	; 0x444 <__mulsf3_pse+0x9c>
 428:	14 c0       	rjmp	.+40     	; 0x452 <__fp_inf>
 42a:	a6 cf       	rjmp	.-180    	; 0x378 <__fp_szero>
 42c:	5f 3f       	cpi	r21, 0xFF	; 255
 42e:	ec f3       	brlt	.-6      	; 0x42a <__mulsf3_pse+0x82>
 430:	98 3e       	cpi	r25, 0xE8	; 232
 432:	dc f3       	brlt	.-10     	; 0x42a <__mulsf3_pse+0x82>
 434:	86 95       	lsr	r24
 436:	77 95       	ror	r23
 438:	67 95       	ror	r22
 43a:	b7 95       	ror	r27
 43c:	f7 95       	ror	r31
 43e:	e7 95       	ror	r30
 440:	9f 5f       	subi	r25, 0xFF	; 255
 442:	c1 f7       	brne	.-16     	; 0x434 <__mulsf3_pse+0x8c>
 444:	fe 2b       	or	r31, r30
 446:	88 0f       	add	r24, r24
 448:	91 1d       	adc	r25, r1
 44a:	96 95       	lsr	r25
 44c:	87 95       	ror	r24
 44e:	97 f9       	bld	r25, 7
 450:	08 95       	ret

00000452 <__fp_inf>:
 452:	97 f9       	bld	r25, 7
 454:	9f 67       	ori	r25, 0x7F	; 127
 456:	80 e8       	ldi	r24, 0x80	; 128
 458:	70 e0       	ldi	r23, 0x00	; 0
 45a:	60 e0       	ldi	r22, 0x00	; 0
 45c:	08 95       	ret

0000045e <__fp_nan>:
 45e:	9f ef       	ldi	r25, 0xFF	; 255
 460:	80 ec       	ldi	r24, 0xC0	; 192
 462:	08 95       	ret

00000464 <__fp_pscA>:
 464:	00 24       	eor	r0, r0
 466:	0a 94       	dec	r0
 468:	16 16       	cp	r1, r22
 46a:	17 06       	cpc	r1, r23
 46c:	18 06       	cpc	r1, r24
 46e:	09 06       	cpc	r0, r25
 470:	08 95       	ret

00000472 <__fp_pscB>:
 472:	00 24       	eor	r0, r0
 474:	0a 94       	dec	r0
 476:	12 16       	cp	r1, r18
 478:	13 06       	cpc	r1, r19
 47a:	14 06       	cpc	r1, r20
 47c:	05 06       	cpc	r0, r21
 47e:	08 95       	ret

00000480 <__fp_round>:
 480:	09 2e       	mov	r0, r25
 482:	03 94       	inc	r0
 484:	00 0c       	add	r0, r0
 486:	11 f4       	brne	.+4      	; 0x48c <__fp_round+0xc>
 488:	88 23       	and	r24, r24
 48a:	52 f0       	brmi	.+20     	; 0x4a0 <__fp_round+0x20>
 48c:	bb 0f       	add	r27, r27
 48e:	40 f4       	brcc	.+16     	; 0x4a0 <__fp_round+0x20>
 490:	bf 2b       	or	r27, r31
 492:	11 f4       	brne	.+4      	; 0x498 <__fp_round+0x18>
 494:	60 ff       	sbrs	r22, 0
 496:	04 c0       	rjmp	.+8      	; 0x4a0 <__fp_round+0x20>
 498:	6f 5f       	subi	r22, 0xFF	; 255
 49a:	7f 4f       	sbci	r23, 0xFF	; 255
 49c:	8f 4f       	sbci	r24, 0xFF	; 255
 49e:	9f 4f       	sbci	r25, 0xFF	; 255
 4a0:	08 95       	ret

000004a2 <_exit>:
 4a2:	f8 94       	cli

000004a4 <__stop_program>:
 4a4:	ff cf       	rjmp	.-2      	; 0x4a4 <__stop_program>
